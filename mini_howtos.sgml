<!doctype debiandoc public "-//DebianDoc//DTD DebianDoc//EN">
<!--$Id: mini_howtos.sgml,v 1.90 2015/03/13 13:20:02 curro Exp curro $-->

<book>

<title>Some Mini-Howtos of Interest</title>

<author>Curro Perez-Bernal
<email>francisco.perez@dfaie.uhu.es</email>
</author>

  <abstract>
A little collection of Mini-Howtos for GNU/Linux systems trying to
help solving everyday problems I have found in different aspects, from system
administration to basic graphic edition or text processing. The howtos
were prepared having Debian systems in mind, but they should be useful
for other GNU/Linux systems as well. You can get the latest version of
this document from <prgn>github</prgn>
(<url id="https://github.com/currix/Mini-Howtos-GEM"  name="Mini Howto GEM">). 
Translations of all or part of this document to <url id="http://www.autoteiledirekt.de/science/certains-mini-howtos-dinteret"
  name="French"> (by Kate Bondareva)
  <!--and <url id="http://www.webhostinghub.com/support/es/misc/instalacion-de-perl"
  name="Spanish"> (by Maria Ramos) are--> is also available online.
     </abstract>
     
     <copyright>
       <copyrightsummary>
         Copyright  2013 by Curro Perez-Bernal <email>francisco.perez@dfaie.uhu.es</>
       </copyrightsummary>
       <p>
       <url id="http://www.gnu.org/licenses/fdl-1.3.html"
             name="This document may be used under the terms of the
             GNU Free Documentation License version 1.3 or higher.">
     </copyright>
<toc>



<chapt id="cap_0"><heading>Basic Administration</heading> 
<sect id="sec_01">Reinstalling a wiped out <prgn>GRUB</prgn>

<p>
Sometimes, specially if an operating system other
than <prgn>GNU/Linux</prgn> is installed, the <prgn>Grub</prgn>
bootloader can be wiped out and the booting process broken. In order
to fix this, we will first assume that we have the new
version <prgn>Grub2</prgn> installed. Afterwards we explain how to
proceed for the older <prgn>Grub</prgn> versions.

<sect1 id="sec_0101"> <prgn>Grub2</prgn> case.
<p>
Updated on January 19th, 2012.

<p>
The first step is to prepare or find a rescue Live-CD (or bootable Live-USB) so
we can start our system. We should know which is the partition of the
hard drive that is mounted as root partition in <tt>/</tt>. We will
assume in this example that the HD where the system is installed is
<tt>/dev/sda</tt> and the root partition is <tt>sda7</tt>. If we do
not know this information we can retrieve it using <tt>fdisk</tt>
and <tt>mount</tt>. Once the
Live-CD has booted, we require to open a rescue session in the booting
advanced options. We will be prompted for the root partition and we
the rescue disk will open a shell with the given root partition
mounted. 

<p>
It is important the if the <file>/var</file> directory is in
a partition by itself (e.g. <tt>sda8</tt>) it is also mounted as follows
<p>
<example> 
# mount <var>/dev/sda7</var> /var
</example> 

<p>
We now proceed to run <tt>dpkg-reconfigure grub-pc</tt>,
and <prgn>Grub2</prgn> will be reconfigured and the problem fixed.

<p>
In some cases it may be necessary to reinstall <prgn>Grub</prgn> in
a system running with a live CD. In this case you should first mount
the root partition and then install <prgn>Grub</prgn> using <tt>grub-install</tt>
<p>
<example> 
sudo grub-install <var>/dev/sda</var> --root-directory=<var>/mnt</var>
sudo reboot
</example> 

<p>
In case that the boot menu may not be the same than the previous one,
after rebooting you can update it

<p>
<example> 
sudo update-grub
</example> 

<p>
This last order is the command you need to run when you make changes
in the <prgn>Grub2</prgn> configuration. In this version the
configuration file is not anymore in the <file>/boot</file> directory
but in <file>/etc</file>: <file>/etc/grub.cfg</file> and <file>/etc/grub.d/*</file>.

</sect1>

<sect1 id="sec_0102"> Old <prgn>Grub</prgn> case.

<p>
In order to recover the old <prgn>Grub</prgn> version we proceed as in
the previous case, booting the computer from a Live-CD or Live-USB and
opening a terminal. In this terminal we launch <prgn>Grub</prgn>

<p>
<example> 
$ sudo grub
</example> 

Once in the <prgn>Grub</prgn> application we define the root
filesystem with the command <tt>root</tt> <var>partition</var>. 
Remember that root syntax for disk and partitions
is <tt>hd</tt><var>disk</var><tt>,</tt><var>partition</var>, and it
starts counting from zero. If, as in the previous case,
we assume in this example that the HD where the system is installed is
<tt>/dev/sda</tt> and the root partition is <tt>sda7</tt>. Once the
root partition is defined we install grub in the disk whose MBR is
going to be used (<tt>sda</tt> in this case) and we quit. 


<p>
<example> 
root (hd0,6)
setup (hd0)
quit
</example> 


<p>We can now reboot the computer normally. In order to recover the
  previous menu it could be necessary to, after rebooting, execute


<p>
<example> 
sudo update-grub
</example> 


</sect1>

<sect1 id="ref_wipedgrub"><heading>References</heading> 
<p>
<enumlist>  
<item><url id="http://sites.google.com/site/easylinuxtipsproject/grub#TOC-The-new-Grub-2-present-in-Ubuntu-9."
name="http://sites.google.com/site/easylinuxtipsproject/grub#TOC-The-new-Grub-2-present-in-Ubuntu-9.">
<item><url id="http://sites.google.com/site/easylinuxtipsproject/oldgrub"
name="http://sites.google.com/site/easylinuxtipsproject/oldgrub">
</enumlist>  
</sect1>

</sect>

<sect id="sec_02">Problem with journalizing

<p> There could be a problem with the journalizing if an <tt>ext3</tt>
filesystem refuses to be mounted. In the following we suppose that we are
  mounting  an <tt>ext3</tt> filesystem associated to <var>/dev/sdb2</var> in
  mount-point <var>/media/usb_disk/</var>.

<p>
<example> 
$ mount <var>/media/usb_disk/</var>
mount: wrong fs type, bad option, bad superblock on <var>/dev/sdb2</var>,
       missing codepage or other error
       In some cases useful info is found in syslog - try
       dmesg | tail  or so
</example> 

<p>And in the <tt>dmesg</tt> file you will find something like

<p>
<example>JBD: no valid journal superblock found
EXT3-fs: error loading journal.
</example>


<p> In order to solve this problem first check if the filesystem  can be mounted as <tt>ext2</tt>

<p><example>
# mount -t ext2 /dev/sdb2 /mnt/
# ls -a
.  ..  lost+found  misc
</example>

<p>
If, as in the example, it works, unmount it and recreate the journal:


<p>
<example>
# tune2fs -O ^has_journal /dev/sdb2
tune2fs 1.37 (21-Mar-2005)

# tune2fs  -j /dev/sdb2 
tune2fs 1.37 (21-Mar-2005)
Creating journal inode: done
This filesystem will be automatically checked every 22 mounts or
180 days, whichever comes first.  Use tune2fs -c or -i to override.
</example>

<p> And now you can regularly mount the <tt>ext3</tt> filesystem.

</sect>

<sect id="sec_02_2">Labels in <tt>ext2</tt> and <tt>ext3</tt> units
<p>
Updated on November 21st, 2016.

<p> The use of labels is a convenient way to handle disk units,
  specially for <em>usb</em> units that can be plugged in and
  removed. Instead of taking care of the dynamically associated device
  name the label can unambiguously identify the unit.

<p>
The command used to display and change the label name
for  <tt>ext2</tt> and <tt>ext3</tt> filesystems
is <tt>e2label</tt>. The syntax of the command is such that to change
or define a label named <var>newlabel</var> for
unit <var>device</var>, the order issued
is <tt>e2label</tt> <var>device</var> <var>newlabel</var>. For example
<p>
<example> 
# e2label /dev/sdb2 usb_disk
</example> 

<p> 
 To display the label name the command is used
with the device name as an argument.
<p>
<example> 
# e2label /dev/sdb2
usb_disk
</example> 

<p> To define the corresponding <tt>fstab</tt> entry the following
  line is added to the file <tt>/etc/fstab</tt>

<p><example>
LABEL=usb_disk /media/usb_disk  ext3    user,noauto     0       0
</example>

<p>
Note that the last option should be zero for removable media because
if this is not the case, the booting process will be affected if the disk is not plugged
in. The corresponding mount point should be defined:


<p>
<example>
# mkdir /media/usb_disk
</example>

<p>Now you can regularly mount the <tt>ext3</tt> filesystem.

<p>
<example>
$ mount /media/usb_disk
</example>

<p>
  In the case of <tt>vfat</tt> partitions the equivalent command
  is <tt>dosfslabel</tt>, provided in the Debian
  package <tt>dosfstools</tt>. For example, to check and change the
  label of a <tt>vfat</tt> partition:
<p>
<example>
# dosfslabel /dev/sdc1 
LABEL
# dosfslabel /dev/sdc1 DATA_CPB
# dosfslabel /dev/sdc1 
DATA_CPB
</example>
  

</sect>

<sect id="sec_03">Open a <prgn>xconsole</prgn> as normal user

<p> First the existence and permissions of the
  file <tt>/dev/xconsole</tt> has to be checked

<p>
<example> 
ls -l /dev/xconsole 
prw-r-----  1 root adm 0 2006-05-02 12:40 /dev/xconsole
</example> 

<p>The user who is going to open the <prgn>xconsole</prgn> in his
  window manager (e.g. <var>bob</var>) has to be added to the <tt>adm</tt> group.

<p>
<example>
adduser bob adm
Adding user `bob' to group `adm' ...
Done.
</example>


<p>The xconsole program can be now normally launched



<p>
<example>
xconsole -file /dev/xconsole
</example>


</sect>

<sect id="sec_04">Resetting the <tt>root</tt> password

<p> The first and simplest option is to boot in <tt>single-user</tt>
  mode. To do so, if the bootloader is <prgn>GRUB</prgn> stop the
  booting process and edit the line where the kernel is selected
  adding <tt>1</tt> at the end of the line. The system should boot to
  a <tt>root</tt> prompt and the password can be changed using
  the <prgn>passwd</prgn> command.

<p>
Another possibility is to boot using a rescue disk and once that you
are at the command prompt mount the system's root directory if it has
not been already mounted. For example, let's assume that the system's
root partition is <tt>/dev/sda1</tt> and will be mounted
in <tt>/mnt/sysrootdir</tt>
<p>
<example> 
mkdir /mnt/sysrootdir
mount /dev/sda1 /mnt/sysrootdir
</example> 

<p>Then, after switching to the system's root directory
  with <prgn>chroot</prgn>, reset the password.

<p>
<example>
chroot /mnt/sysrootdir
passwd
</example>



<sect1 id="ref_rootpasswd"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://www.linuxjournal.com/issue/180"
name=" Tech tip in http://www.linuxjournal.com/issue/180">
</enumlist>  
</sect1>

</sect>

<sect id="sec_05">Configure <prgn>exim</prgn> to use <prgn>SMTP-TLS</prgn>

<p>The following instructions explain in a short and direct way the
  minimal steps necessary to include <prgn>SMTP-TLS</prgn> support
  in <prgn>exim</prgn> to connect with a <em>smarthost</em> node
  relaying mail. The data provided are appropriate for connecting with
  the server <tt>mailgw.uhu.es</tt> and for a box with <prgn>Debian
  Lenny</prgn>.


<p> The necessary steps are the following
<enumlist>  
<item> Install packages <tt>exim4-base</tt>, <tt>exim4-config</tt>,
  and <tt>exim4-daemon-light</tt>.

<p> 
<example>[root@localhost ~]# apt-get install exim4-base exim4-config \
exim4-daemon-light
</example>

<item>If during the <prgn>exim4</prgn> installation no question is
  asked or if the packages are already installed in the computer,
  reconfigure the mail agent:

<p>
<example>dpkg-reconfigure exim4-config</example>

<p> The following answers apply to configure a box in CLGEM-UHU:

<enumlist>  
<item> <tt>mail sent by smarthost; received via SMTP or fetchmail</tt>
<item> <tt>local mail name</tt> <var>boxname.dfa.uhu.es</var>

<item> <tt>IP-addresses to listen on for incoming SMTP connections:</tt>
<var> 127.0.0.1</var>

<item> <tt>Other destinations for which mail is
    accepted:</tt> <var>[Blank]</var>
<item><tt> Machines to relay mail for:</tt> <var>[Blank]</var>
<item> <tt>IP address or host name of the outgoing smarthost:</tt>  <var>mailgw.uhu.es</var>
<item><tt>Hide local mail name in outgoing mail?</tt>  <var>Yes</var>
<item> <tt>Visible domain name for local users:</tt> <var>[Blank]</var>
<item><tt>Keep number of DNS-queries minimal (Dial-on-Demand)?</tt> <var>No </var>
<item><tt>Delivery method for local mail:</tt>   <var>mbox format in /var/mail/</var>
<item> <tt>Split configuration into small files?</tt> <var>Yes</var>
</enumlist>



<item> The next step is the generation of the necessary keys.
<p>
<example>
# cd /etc/exim4/ 
# openssl req -x509 -newkey rsa:1024 -keyout rsa.key -out rsa.cert \
-days 9999 -nodes
# openssl dhparam -out dh.key 1024 
</example>

<item> Enable <tt>TLS</tt> in <prgn>exim</prgn>'s configuration
  editing the file 
<p>
<tt>/etc/exim4/conf.d/main/03_exim4-config_tlsoptions</tt>
<p>  
and adding the following lines
<p>
<example> 
tls_certificate = /etc/exim4/rsa.cert
tls_privatekey = /etc/exim4/rsa.key
tls_dhparam = /etc/exim4/dh.key
</example>

<item> Edit the user authentication info on
  file <tt>/etc/exim4/passwd.client</tt><footnote>There should be a
  way to do this from a user's perspective and not editing a general
  file for the system (TO DO).</footnote>. For example, for
  user <tt>coco.elmo.dfaie</tt> with LDAP password <tt>frdg098r</tt>
<p>
<example> 
# password file used when the local exim is authenticating to a remote
# host as a client.
#
# see exim4_passwd_client(5) for more documentation
#
# Example:
### target.mail.server.example:login:password
mailgw.uhu.es:coco.elmo.dfaie:frdg098r
</example>
<item> Restart the <prgn>exim</prgn>'s daemon.
<p>
<example> 
# /etc/init.d/exim4 restart
</example>

</enumlist>  

<sect1 id="ref_exim"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://www.amk.ca/diary/2003/03/enabling_smtptls_with_exim.html"
name="http://www.amk.ca/diary/2003/03/enabling_smtptls_with_exim.html">
</enumlist>  
</sect1>
</sect>


<sect id="sec_08"> Copying <prgn>CUPS</prgn> configuration from one server to another

<p> The simplest way to copy the <prgn>CUPS</prgn> configuration from
  one server to another is the following:

<enumlist>
<item> Stop CUPS on the target system.
<p>
<example> 
target# /etc/init.d/cups stop
</example> 

<item> Rename or backup the existing configuration directory
<p>
<example> 
target# mv /etc/cups /etc/cups.orig
</example> 

<item> Copy the /etc/cups directory from the source system to the destination system.
<p>
<example> 
target# scp -r source:/etc/cups /etc/cups
</example> 


<item> Copy any modified model files from the source system to the
  destination system. These files should be
  in <tt>/usr/share/cups/model</tt>.
<p>
<example> 
target# scp -r source:/usr/share/cups/model /usr/share/cups/model
</example> 


<item> On the target server edit the
  file <tt>/etc/cups/cupsd.conf</tt> and check if the hostname or IP
  address of your source system is present. If so, change it to the
  target server hostname or IP. Check that hostnames are defined
  properly in the <tt>/etc/hosts</tt> file of the target system.

<item> If any custom groups or accounts are used on the old system to manage <prgn>CUPS</prgn> recreate them on the new system.

<item> Restart cups in the target system and test it.
</enumlist>

<sect1 id="ref_cupscopy"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://www.tipsandscripts.net/archives/19"
name=" Tech tip in My Scripts and Tips">
</enumlist>  
</sect1>

</sect>
<sect id="sec_09">Mapping network interfaces to a fixed name.

<p> As modules on the booting process or during the system's activity
  are not loaded always in the same order, it is difficult to get the
  network devices named in a constant way. This can be achieved using
  the package <prgn>ifrename</prgn>. This software  maps the
  interfaces to a fixed name based on the MAC address (for
  example). You just need to add the file <tt>/etc/iftab</tt>:

<p>
<example> 
# Mapping NICs to fixed names
ether0  driver 8139too mac XX:XX:XX:XX:XX:XX
wifi0  driver ipw2200 mac XX:XX:XX:XX:XX:XX
</example> 

Another way to get the same result especially prone
to <prgn>Debian</prgn> systems is to include an addition of
a <tt>udev</tt> rule. In order to do so, create the
file <tt>/etc/udev/rules.d/net.local.rules</tt>, and populate it with
the following: 

<p>
<example> 
    KERNEL=="eth*", SYSFS{address}=="00:01:80:50:dc:f2", NAME="wired"
    KERNEL=="eth*", SYSFS{address}=="00:0d:61:a1:20:15", NAME="wireless"
</example> 

changing the <tt>MAC</tt>'s addresses and <tt>NAME</tt>'s accordingly.

</sect>
<sect id="sec_010">Using labels to mount disk partitions

<p> Using the possibility of labelling the disk partitions it is
  useful for avoiding ambiguities and errors mounting them. This is
  valid for <tt>ext2</tt>, <tt>ext3</tt>, and <tt>ext4</tt>
  filesystems. To name <var>usbdisk0</var> the second partition of a
  disk which is currently <tt>/dev/sdb</tt> we should do as
  follows<footnote>It is also possible to rename the partition using a
  graphical interface such as <prgn>gparted</prgn>.</footnote>

<p>
<example> 
# e2label /dev/sdb2 usbdisk0
</example> 
<p>
There are other tools to label partitions for different filesystems.

<p>
<enumlist>  
<item> <tt>ext2 ext3 ext4</tt>: <prgn>e2label</prgn>
<item> <tt>FAT16 FAT32</tt>: <prgn>mtools</prgn>
<item> <tt>jfs</tt>: <prgn>jfstune</prgn>
<item> <tt>NTFS</tt>: <prgn>ntfsprogs</prgn>
</enumlist>  

<p>Then, once the partition is labelled, we create the mount point,
e.g. <tt>mkdir /media/usb_disk_0</tt>, and we can add a line
in <tt>/etc/fstab</tt> like the following

<p>
<example> 
LABEL=usbdisk0       /media/usb_disk_0 ext3    exec,user,noauto  0       0
</example> 

<p>
When we use the command <tt>mount /media/usb_disk_0</tt>
the previously labelled partition will be mounted.
</sect>

<sect id="sec_011">Using <prgn>find</prgn> and <prgn>xargs</prgn>
<p>
Updated on January 12th, 2016.

<p>
The combination of the utilities <prgn>find</prgn> and <prgn>xargs</prgn> is a powerful tool if you need to apply a program or repeat a task with several files. 

<p>
As an example let's imagine that we have a directory with
many <prgn>LaTeX</prgn> files, and some of them are letters, named
as <tt>lett_</tt><var>name</var><tt>.tex</tt> and we should transform
some of them into pdf files. A simple <prgn>perl</prgn> oneliner that
can do the task of transforming a <tt>tex</tt> file into a <tt>pdf</tt>
 file is the following.


<p>
<example> 
perl -e '(my $name= $ARGV[0])=~s/\.tex//; system "latex $name;dvipdf $name"' file.tex
</example> 

<p>
How to select the <prgn>LaTeX</prgn> files with different and flexible
criteria and apply this program to all of them? A possible answer is
to combine the powerful <prgn>find</prgn> and <prgn>xargs</prgn>
programs. 

<p>
Let's suppose that we want to transform to <tt>pdf</tt> format all the
files having names starting as <tt>lett_</tt>. Then we can execute

<p>
<example> 
$ find . -name "lett_*.tex" -print 
./lett_diput_Huelva.tex
./lett_Hospital_IE.tex
./lett_CEPSA.tex
./lett_del_JA_Huelva.tex
./lett_audiencia_Huelva.tex
./lett_subdel_gob_Huelva.tex
./lett_INNOV.tex
./lett_ayto_Huelva.tex
./lett_Hospital_JRJ.tex
./lett_ayto_Palos.tex
</example> 

<p>
This command finds all the files starting with <tt>lett_</tt> and
finishing as <tt>.tex</tt> and print
its names. The option <tt>-iname</tt> makes a case insensitive
search. Other interesting options are <tt>-amin n</tt> and <tt>-atime
n</tt> where <tt>n</tt> is the number of minutes or hours that have
passed since the last time the file was accessed. If the number is
negative the effect is the contrary and look for files accessed prior
to this time. 

<p>
The program <prgn>xargs</prgn> can be combined with find. This program
in its simplest form takes lines of input and apply programs to
them. The simplest use is <tt>xargs -I
{}</tt> <var>run_command</var> <tt>{}</tt>. In this
form <prgn>xargs</prgn> read lines from the standard input and apply
to each of them the command <var>run_command</var>
substituting <tt>{}</tt> by the input line. Instead of the standard
input the option <tt>-a</tt> <var>filename</var>
permits <prgn>xargs</prgn> to get its input from a file rather that
the standard input. We can combine the two command as follows

<p>
<example> 
$ find . -iname "lett*.tex" -print | xargs -I {} perl -e '(my $name= $ARGV[0])=~s/\.tex//; system "latex $name;dvipdf $name"' {}
</example> 

<p>
In multiprocessor computers we can use the interesting
option <tt>-P</tt> <var>n</var>, which makes <prgn>xargs</prgn> to
run <var>n</var> number of commands in parallel.

<p>
Another interesting option of <prgn>find</prgn> is <tt>-newer
    filename</tt>. With this option the program displays the names of
    the files that are more recent than the
    file <tt>filename</tt>. Using this in combination
    with  <prgn>xargs</prgn> we can for example, transfer
    using <prgn>scp</prgn> all the files in a directory that are more
    recent that a given file. If we want to upload to a server
    called <tt>destination.org</tt> all files in a directory that are
    more recent than a file called <file>fulltext.pdf</file> we shoud
    execute

<p>
<example> 
$ find ./* -newer fulltext.pdf -print | xargs -I {} scp {} user@destination.org:<var>FilesPath</var>
</example> 

<p>
Another possible example, let's think that you have several
directories and you want to copy files that fulfill some condition to
a directory. For example, you want to copy all files having names
ending as <tt>_presentation.pdf</tt> to the
directory <file>/media/user/3908-E1A4/</file>. You can achieve this goal with the following
pipe:
<p>
<example> 
$ find . -name "*_presentation.pdf" | xargs -I {} cp {} /media/user/3908-E1A4/
</example> 


<p>
The following case is a practical example that shows how useful is the
combination of pipes in <prgn>bash</prgn>, making also use of
the <prgn>xargs</prgn> command. 

<p>
Let's assume that we are copying into a directory a backup of the home
folders of several users. Then, by mistake, instead of the directory of a user
called <tt>tigu</tt>, we copied the contents of his directory to the backup
directory, wreaking some havoc and transforming 
<p>
<example>
user1 user2 user3  ...   tigu 
</example>

<p>
into

<p>
<example>
user1 user2 user3  ...   tigu and all tigu files and directories 
</example>

<p>
A quick solution, avoiding the selection and deletion by hand of each
of the misplaced files and directories, consists in the combination
with pipes of several commands

<p>
<example>
$ find . -maxdepth 1 -user tigu | grep -v tigu | xargs rm -r
</example>

<p>
The first command output is a list (non-recursive) of all files and
directories in the current directory (assuming that the current
directory is where the backup takes place) belonging to
user <tt>tigu</tt>.

<p>
The first pipe <em>pipes</em> the result of this search to the grep
command, where the directory named <tt>tigu</tt> is explicitly excluded. This is done to
prevent the command from erasing the original user home
directory. 

<p>
Finally the output of <prgn>grep</prgn> is piped to a combination
of <prgn>xargs</prgn> and <prgn>rm</prgn> that removes the files. For
more details in the use of <prgn>xargs</prgn> see the references
below.

<p> Several commands can be launched by <prgn>xargs</prgn>. For
  example, let's assume that we want to check the differences between
  files in two different directories, and we want to know the file it
  is being tested each time. The way to accomplish this, combining
  an <prgn>echo</prgn> statement with the <prgn>diff</prgn> statement
  using <prgn>xargs</prgn> is the following

<p>
<example>
$ ls -1 *f90 | xargs -I % sh -c 'echo %; diff % /users/home/laura/prototipo_1.0/fortran/1D/1body/pseudostates/src/%;' | less
</example>

<p> 
In this case we are also using a different character as a dummy
variable for <prgn>xargs</prgn> with the option <tt>-I %</tt>.

<p>
A last example of several pipes and <prgn>xargs</prgn> is the
following, where we are reconstructing
using  <prgn>rdiff-backup</prgn> the accounts of a series of users,
excepting user <tt>laura</tt>, from a
directory <file>/home_backup/<var>username</var></file> in a node
called <tt>backup_server</tt> to the directory <file>/home</file> in
the node <tt>server</tt>

<p>
<example>
 ssh root@backup_server ls -1 /home_backup | grep -v laura | xargs -I % sh -c "rdiff-backup -v4 --restore-as-of now  root@backup_server::/home_backup/% /home/%"
</example>

<sect1 id="ref_xargs"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://www.linuxjournal.com/article/10643"
name="http://www.linuxjournal.com/article/10643">
</enumlist>  
</sect1>

</sect>
<sect id="sec_012">Preparing a USB bootable <prgn>Linux</prgn>
  installation device (Fast way).
<p>
Updated on October 6th, 2014.

<p>
We need a USB disk that is at least 256 MB in size with
a <tt>FAT16</tt> partition. Normally the sticks come with a
preconfigured single  <tt>FAT16</tt> partition that is valid. If it is
necessary to format the disk you can find instructions
in <ref id="sec_012b">. 

Take also into account that <em>all data in the stick will be erased</em>.

Plug in and mount the dist. Let's assume that the USB disk corresponds to
the <tt>/dev/sdb</tt> device.

<p>
<example> 
$ mount
/dev/sdb1 on /media/disk type vfat (rw,nosuid,nodev,uhelper=hal,uid=1001,shortname=winnt)
</example> 

<p>
Download the <prgn>Debian</prgn> image. Take into account that the
image should fit into the stick.

<p>
<example> 
$ wget -c http://cdimage.debian.org/debian-cd/6.0.1a/i386/iso-cd/debian-6.0.1a-i386-netinst.iso
--2011-05-03 13:37:50--  http://cdimage.debian.org/debian-cd/6.0.1a/i386/iso-cd/debian-6.0.1a-i386-netinst.iso
Resolving cdimage.debian.org... 130.239.18.173, 130.239.18.163, 2001:6b0:e:2018::163, ...
.
.
.
.
Saving to: `debian-6.0.1a-i386-netinst.iso'

100%[============================================================>] 198,064,128 1.54M/s   in 98s     

2011-05-03 13:39:35 (1.92 MB/s) - `debian-6.0.1a-i386-netinst.iso' saved [198064128/198064128]
</example> 

<p>
The CD or DVD image you choose should be written directly to the USB stick, overwriting its current contents with the command <tt>dd if=<var>file</var> of=<var>device</var> bs=4M; sync</tt>. If the pendrive device is <file>/dev/sdb</file> and the iso image path is <file>/media/MSDOS/FSTS/ubuntu-14.04.1-desktop-amd64.iso</file> the command should be

<p>
<example> 
# dd if=/media/MSDOS/FSTS/ubuntu-14.04.1-desktop-amd64.iso of=/dev/sdb bs=4M; sync
245+1 records in
245+1 records out
1028653056 bytes (1.0 GB) copied, 22.5565 s, 45.6 MB/s
</example> 

<p>
And the stick is ready.

<sect1 id="ref_usbboot1"><heading>References</heading> 
<p>
<enumlist>  
<item><url id="http://www.debian.org/releases/stable/i386/ch04s03.html.en"
name="http://www.debian.org/releases/stable/i386/ch04s03.html.en">
</enumlist>  
</sect1>

</sect>

<sect id="sec_012b">Preparing a USB bootable <prgn>Debian</prgn>
  installation device.

<p>
The first step is the creation of a <tt>FAT16</tt> partition and
filesystem in the USB disk. Suppose that the USB disk corresponds to
the <tt>/dev/sdb</tt> device. Then, as root we format and include the
filesystem. 

<p>
<example> 
# fdisk /dev/sdb


Disk /dev/sdb: 1 GB, 1997649920 bytes
62 heads, 62 sectors/track, 1015 cylinders
Units = cylinders of 3844 * 512 = 1968128 bytes

   Device Boot      Start         End      Blocks   Id  System 
/dev/sdb1   *           1        1015     1950799    6  FAT16


# mkdosfs /dev/sdb1
mkdosfs 3.0.1 (23 Nov 2008)
</example> 

<p>
We now proceed to install a bootloader,
as <prgn>syslinux</prgn>, <prgn>grub</prgn>, or <prgn>lilo</prgn>. We
include  <prgn>syslinux</prgn><footnote>Please, note that the packages
<tt>syslinux</tt> and <tt>mtools</tt>  have to be installed to be able
to run <tt>syslinux</tt>.</footnote>

<p>
<example> 
# syslinux /dev/sdb1
#
</example> 

<p>
We now add the installer image, mounting the stick and copying the
files  <tt>vmlinuz</tt> (kernel binary) and <tt>initrd.gz</tt>
(initial ramdisk image) to the stick. Both files can be found under
the
directory <tt>/debian/dists/lenny/main/installer-i386/current/images/hd-media/</tt>
of the distribution.



<p>
<example> 
# mount /dev/sdb1 /mnt
# ls /mnt
ldlinux.sys
# 
# cd /mnt
/mnt# wget http://http.us.debian.org/debian/dists/lenny/main/installer-i386/current/images/hd-media/vmlinuz
--2010-03-12 16:16:23--  http://http.us.debian.org/debian/dists/lenny/main/installer-i386/current/images/hd-media/vmlinuz
Resolving http.us.debian.org... 149.20.20.135, 204.152.191.39, 35.9.37.225, ...
Connecting to http.us.debian.org|149.20.20.135|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 1468976 (1.4M) [text/plain]
Saving to: `vmlinuz'

100%[======================================>] 1,468,976    624K/s   in 2.3s    

2010-03-12 16:16:26 (624 KB/s) - `vmlinuz' saved [1468976/1468976]

deckard:/mnt# wget http://http.us.debian.org/debian/dists/lenny/main/installer-i386/current/images/hd-media/initrd.gz
--2010-03-12 16:16:37--  http://http.us.debian.org/debian/dists/lenny/main/installer-i386/current/images/hd-media/initrd.gz
Resolving http.us.debian.org... 128.30.2.36, 149.20.20.135, 204.152.191.39, ...
Connecting to http.us.debian.org|128.30.2.36|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 5183930 (4.9M) [application/x-gzip]
Saving to: `initrd.gz'

100%[======================================>] 5,183,930   1.42M/s   in 3.5s    

2010-03-12 16:16:40 (1.42 MB/s) - `initrd.gz' saved [5183930/5183930]

</example> 

<p>
Now we should create a <tt>syslinux.cfg</tt> configuration file, which at a bare minimum should contain the following two lines:

<p>
<example> 
default vmlinuz
append initrd=initrd.gz
</example> 

We finally copy a Debian ISO image (businesscard, netinst or full CD
image; be sure to select one that fits) onto the stick and unmount the USB memory stick. 


<sect1 id="ref_usbboot"><heading>References</heading> 
<p>
<enumlist>  
<item><url id="http://www.debian.org/releases/stable/i386/ch04s03.html.en"
name="http://www.debian.org/releases/stable/i386/ch04s03.html.en">
</enumlist>  
</sect1>

</sect>

<sect id="sec_013">Upgrading <prgn>Flashplayer</prgn> in <prgn>Debian Lenny</prgn>
  using <em>backports</em>.

<p>
We start adding <em>Debian Backports</em><footnote>Backports are
recompiled packages from testing (mostly) and unstable (in a few cases
only, e.g. security updates), so they will run without new libraries
(wherever it is possible) on a stable Debian distribution. I recommend
you to pick out single backports which fits your needs, and not to use
all backports available here (from  <url id="http://www.backports.org/dokuwiki/doku.php"
name="http://www.backports.org/dokuwiki/doku.php">).</footnote> to
<file>/etc/apt/sources.list</file>. Be warned: once backports is
active he resulting system <em>can't be considered plain "stable" anymore</em>. 

<p>
<example> 
# backports Added by Currix 28/04/10
deb http://www.backports.org/debian lenny-backports main contrib non-free
</example> 

<p>
You then proceed to run <tt>apt-get update</tt>. There would probably
be an error due to the lack of <tt>backports.org</tt> archive's key. 


<p>
<example> 
# apt-get update

...

Reading package lists... Done
W: GPG error: http://www.backports.org lenny-backports Release: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY EA8E8B2116BA136C
W: You may want to run apt-get update to correct these problems
</example> 

<p>
In order to correct this we can now install the public key from
<tt>backports.org</tt>.

<p>
<example> 
# apt-get install debian-backports-keyring
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following packages were automatically installed and are no longer required:
  libsilc-1.1-2 libhesiod0 libzephyr3
Use 'apt-get autoremove' to remove them.
The following NEW packages will be installed:
  debian-backports-keyring
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 3362B of archives.
After this operation, 49.2kB of additional disk space will be used.
WARNING: The following packages cannot be authenticated!
  debian-backports-keyring
Install these packages without verification [y/N]? y
Get:1 http://www.backports.org lenny-backports/main debian-backports-keyring 2009.02.20 [3362B]
Fetched 3362B in 0s (29.2kB/s)
Selecting previously deselected package debian-backports-keyring.
(Reading database ... 219559 files and directories currently installed.)
Unpacking debian-backports-keyring (from .../debian-backports-keyring_2009.02.20_all.deb) ...
Setting up debian-backports-keyring (2009.02.20) ...
OK
</example> 

<p>
We can now run <tt>apt-get update</tt> without any warning or
error. Backport packages  are deactivated by default (i.e. the
packages are pinned to 1 by using NotAutomatic: yes in the Release
files, just as in experimental). If you want to install a package from backports run:

<p>
<example> 
apt-get -t lenny-backports install <var>package</var> 
</example> 

<p>
or

<p>
<example> 
aptitude -t lenny-backports install <var>package</var> 
</example> 



<p>
In order to update to <prgn>Flash Player 10</prgn> first you should
install the package <tt>flashplugin-nonfree</tt>
<p>
<example> 
# apt-get -t lenny-backports install flashplugin-nonfree

   .
   .
   .

2010-04-28 09:46:20 (450 KB/s) - `./install_flash_player_10_linux.tar.gz' saved [4050435/4050435]

# 

</example> 

<p>
Then update the <prgn>Flash Player</prgn> with the command
<p>
<example> 
# /usr/sbin/update-flashplugin-nonfree --install
#
</example> 

<p>
To check if the plugin has been recognized by <prgn>iceweasel</prgn>
type 

<p>
<example> 
about:plugins
</example> 

<p> in the browser address line. If there are previous versions of the
plugin installed they can interfere. Uninstall them removing from
<file>~/.mozilla/plugins</file> the corresponding file.

<sect1 id="ref_flashplayer"><heading>References</heading> 
<p>
<enumlist>  
<item><url id="http://backports.org/dokuwiki/doku.php?id=instructions"
name="http://backports.org/dokuwiki/doku.php?id=instructions">
<item><url id="http://wiki.debian.org/FlashPlayer"
name="http://wiki.debian.org/FlashPlayer">
<item><url id="http://plugindoc.mozdev.org/"
name="http://plugindoc.mozdev.org/">
</enumlist>  
</sect1>

</sect>
<sect id="sec_014">Passive network exploration with <prgn>p0f</prgn>.
<p>
This utility uses passive techniques to try to guess the what machines
exist on a network and properties of these computers. By default the
application only listens to packets addressed to the machine executing
the application

<p>
<example> 
# p0f 
p0f - passive os fingerprinting utility, version 2.0.8
(C) M. Zalewski &lt;lcamtuf@dione.cc&gt;, W. Stearns &lt;wstearns@pobox.com&gt;
p0f: listening (SYN) on 'eth0', 262 sigs (14 generic, cksum 0F1F5CA2), rule: 'all'.
</example> 
<p>
To look at all the packets, not only the packets addressed to the
machine where <prgn>p0f</prgn> is running, the interface should be in
promiscuous mode, using the <tt>-p</tt> option. Be aware that this can
cause a large capture data rate.
<p>
Using the <tt>-s</tt> option, the application can work
with <prgn>tcpdump</prgn> data logs. The <tt>-w</tt> option allows to
save network traffic data in  <prgn>tcpdump</prgn> format.

<p>
Other interesting options are <tt>-M</tt> to activate the masquerade
detection algorithm to try to identify hosts behind a NAT,
and <tt>-l</tt> to format the output in a one-line style that is
easier to grep.
</sect>

<sect id="sec_015">Preparing a bootable flashdisk with <prgn>Billix</prgn>.

<p>
We start downloading <prgn>billix</prgn> from its <em>sourceforge</em> page. The
link can be found in <ref id="ref_billix">. In the present example the
downloaded file name is <file>billix-0.27.tar.gz</file>. We need a usb
flashdisk of a minimum size of 256 MB and with a <tt>FAT</tt>
or <tt>FAT32</tt> filesystem. In the present example is the
device <file>/dev/sdb1</file> mounted in <file>/media/disk</file>.

<p>
<example> 
$ mount | grep disk
/dev/sdb1 on /media/disk type vfat (rw,nosuid,nodev,uhelper=hal,shortname=winnt,uid=1001)
</example> 

<p>
The downloaded file is untarred in the flashdisk

<p>
<example> 
$ cd /media/disk
/media/disk$ tar xzf ~/Downloads/billix-0.27.tar.gz 
</example> 

<p>
The second step is the installation of the <tt>MBR</tt> (Master Boot
Record) in the flahsdisk. <footnote>In <prgn>Debian</prgn> systems it is
necessary to install the <file>mbr</file> package to have access to
this tool.</footnote> This has to be executed as superuser and the
syntax is <tt>install-mbr -p1 <var>device</var></tt> and it is
important to select the correct device, as this can wreak havoc if
executed in an incorrect device.


<p>
<example> 
# install-mbr -p1 /dev/sdb
</example> 

<p>
We can now install the bootsector within the first partition
running <tt>syslinux -s <var>device/partition</var></tt>. Again this
is a potentially dangerous operation and should never be performed in
a wrong partition. Superuser privileges are not necessary to perform
this operation.

<p>
<example> 
/media/disk$ syslinux -s /dev/sdb1
</example> 

<p>
The bootable flash disk is now ready and can be used as nice help for
the system administrator. If there is spare space in the flash disk
can be used normally for file storing.
<sect1 id="ref_billix"><heading>References</heading> 
<p>
<enumlist>  
<item><url id="http://sourceforge.net/projects/billix/"
name="Billix project homepage">
</enumlist>  
</sect1>

</sect>

<sect id="sec_016"><heading>Recovering a console that is unusable.</heading>

<p>
Sometimes it is convenient to clean the display of a text console,
something that can be done using the shell command <tt>clean</tt>. For
more extreme cases, when the console has gone totally berserk,
e.g. after displaying binary characters, the initial state can be
recovered using the command <tt>reset</tt>. It is possible that you
will not be able to see the command while you type, but after its
execution the console should return to a saner state.

</sect>
<sect id="sec_017"><heading>Simple configuration of <prgn>sudo</prgn></heading>

<p>
A very quick and dirty configuration of <tt>sudo</tt> in order to allow a
user, e.g. <var>tuxie</var>, to execute programs with superuser
privileges can be done adding one line to the <file>sudoers</file>
file:

<p>
<example> 
# echo "tuxie  ALL=(ALL) ALL" >> /etc/sudoers
</example>

<p>
A more detailed configuration is required in a sensitive environment.

</sect>
<sect id="sec_018"><heading>Check the groups to which a user belongs.</heading>

<p>
In order to check to what groups a user, e.g. <var>tuxie</var>,
belongs the command <tt>groups</tt> can be used:

<p>
<example> 
$ groups tuxie
tuxie adm dialout cdrom floppy audio video plugdev
</example>


</sect>
<sect id="sec_019"><heading>Check the available system <tt>locale</tt> options
  and establish a default one.</heading>

<p>
In order to check what <tt>locale</tt> options are compiled and
available in a <prgn>Debian</prgn> system the user should execute.

<p>
<example> 
$ locale -a
C
en_IE
en_IE@euro
en_IE.iso88591
en_IE.iso885915@euro
en_IE.utf8
en_US
en_US.iso88591
es_ES
es_ES@euro
es_ES.iso88591
es_ES.iso885915@euro
es_ES.utf8
POSIX
spanish
</example>

<p>
The system's default locale in <prgn>Debian</prgn> systems is found
in the <file>/etc/default/locale</file> file.
<p>
<example> 
$ cat /etc/default/locale 
LANG=en_IE.UTF-8
</example>

<p>
The <tt>locale</tt> setting when executing a program can be changed on the
fly

<p>
<example> 
$  LANG=en_IE.utf8 date
Wed Oct 27 11:54:44 CEST 2010
$  LANG=es_ES.utf8 date
mié oct 27 11:54:52 CEST 2010
$ 
</example>


<p>It is recommended to use always a <tt>utf-8</tt> locale as a standard. And to
  define it only setting the <var>$LANG</var> variable, and not a
  complicate set of <var>$LC_*</var> variables. To define the default
  local for the system use the <tt>dpkg-reconfigure locales</tt>
  command.
</sect>
<sect id="sec_020"><heading>Change the encoding of given files.</heading>

<p>
To change the encoding of a file is very useful the
application <prgn>iconv</prgn>. This application transforms a file
from a given coding system to the default system encoding or to a
different encoding. The different available encoding schemes can be
shown with the option <tt>-l</tt> or <tt>--list</tt>


<p>
<example> 
$ iconv -l
The following list contain all the coded character sets known.  This does
not necessarily mean that all combinations of these names can be used for
the FROM and TO command line parameters.  One coded character set can be
listed with several different names (aliases).

  437, 500, 500V1, 850, 851, 852, 855, 856, 857, 860, 861, 862, 863, 864, 865,
  866, 866NAV, 869, 874, 904, 1026, 1046, 1047, 8859_1, 8859_2, 8859_3, 8859_4,
  8859_5, 8859_6, 8859_7, 8859_8, 8859_9, 10646-1:1993, 10646-1:1993/UCS4,

  ...

  ISO-2022-JP-2, ISO-2022-JP-3, ISO-2022-JP, ISO-2022-KR, ISO-8859-1,
  ISO-8859-2, ISO-8859-3, ISO-8859-4, ISO-8859-5, ISO-8859-6, ISO-8859-7,
  ISO-8859-8, ISO-8859-9, ISO-8859-9E, ISO-8859-10, ISO-8859-11, ISO-8859-13,
  ISO-8859-14, ISO-8859-15, ISO-8859-16, ISO-10646, ISO-10646/UCS2,
  ISO-10646/UCS4, ISO-10646/UTF-8, ISO-10646/UTF8, ISO-CELTIC, ISO-IR-4,

  ...

  UNICODEBIG, UNICODELITTLE, US-ASCII, US, UTF-7, UTF-8, UTF-16, UTF-16BE,
  UTF-16LE, UTF-32, UTF-32BE, UTF-32LE, UTF7, UTF8, UTF16, UTF16BE, UTF16LE,
  UTF32, UTF32BE, UTF32LE, VISCII, WCHAR_T, WIN-SAMI-2, WINBALTRIM,
  WINDOWS-31J, WINDOWS-874, WINDOWS-936, WINDOWS-1250, WINDOWS-1251,
  WINDOWS-1252, WINDOWS-1253, WINDOWS-1254, WINDOWS-1255, WINDOWS-1256,
  WINDOWS-1257, WINDOWS-1258, WINSAMI2, WS2, YU
</example>

<p>
For example, if the default encoding
is <tt>UTF-8</tt> and we want to transform an <tt>ISO-8859-1</tt> file
named <var>example</var> to this encoding we should run

<p>
<example> 
$ file non_standard_ISO 
non_standard_ISO: ISO-8859 text
$ file non_standard_ISO 
non_standard_ISO: ISO-8859 text
curro@deckard:~/temp$ iconv -f ISO-8859-1 non_standard_ISO 
ñññññññ
áááá
ééé
íí
ó
ú
</example>

<p>
If no output file name is given with the option <tt>-o</tt> the result
is displayed in the standard output. Thus, to save the file
as <file>non_standard_UTF</file> we can execute

<p>
<example> 
$ iconv -f ISO-8859-1 non_standard_ISO -o non_standard_UTF
curro@deckard:~/temp$ file non_standard_UTF 
non_standard_UTF: UTF-8 Unicode text
</example>

<p>
We can also transform to an encoding that is not the system's default
one with the option <tt>-t</tt>
<p>
<example> 
$ iconv -f ISO-8859-1 -t UNICODE non_standard_ISO -o non_standard_UNI
$ file non_standard_UNI 
non_standard_UNI: Little-endian UTF-16 Unicode character data
</example>
</sect>
<sect id="sec_021"><heading>Problem with the wireless and <tt>nm</tt></heading>

<p>
Sometimes, specially after having tweaked with the network manually, the NetworkManager applet does not appear any more, or when it appears it informs that it does not manage the wireless networks.

<p>
In order to fix this, ensure that the file <file>/etc/network/interfaces</file> is like the following, commenting any other thing previously added:
<p>
<example> 
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback
</example>
<p>
and make sure to change the option <tt>false</tt> to <tt>true</tt>
in the file <file>/etc/NetworkManager/NetworkManager.conf</file>
<p>
<example> 
[ifupdown]
managed=true
</example>

<p> With this changes, restarting the network should be all you need to
solve the problem.

</sect>
<sect id="sec_022"><heading>Updating <prgn>Debian</prgn> 
      from <prgn>Wheezy</prgn> to <prgn>Jessie</prgn></heading>

<p>
Updated on January 19, 2011.


<p>A sensible previous step is to backup some files and directories

<p>
<example> 
# tar czf /temp/bck_dck/etc.tgz /etc &
# tar czf /temp/bck_dck/var_lib_dpkg.tgz /var/lib/dpkg/ &
# tar czf /temp/bck_dck/var_lib_apt.tgz /var/lib/apt/ &
# dpkg --get-selections "*" > /temp/bck_dck/selections.txt 
# tar czf /temp/bck_dck/var_lib_aptitude_pkgstates.tgz /var/lib/aptitud
</example>

<p> In order to gain an extra safety margin when upgrading remotely, we suggest that you run upgrade processes in the virtual console provided by <prgn>screen</prgn>, which enables safe reconnection and ensures the upgrade process is not interrupted even if the remote connection process fails.

<p>
<example> 
#  
# screen
# screen -ls
There is a screen on:
        10305.pts-0.deck     (22/12/15 14:28:45)     (Attached)
1 Socket in /var/run/screen/S-root.
</example>

<p>To have a smooth and flawless upgrade, review actions pending in
package manager launching aptitude and press <tt>g</tt> (Go). If it
shows any actions, you should review them and either fix them or
implement the suggested actions. If no actions are suggested you will
be presented with a message saying <tt>No packages are scheduled to be
installed, removed, or upgraded</tt>. In case you have configured APT
pinning it should also be changed to point to packages in the new
version. In case you do not know what pinning is do not worry and
follow on.

<p> Regardless of the method used for upgrading, it is recommended
that you check the status of all packages first, and verify that all
packages are in an upgradable state. The following command will show
  any packages which have a status of <tt>Half-Installed</tt> or <tt>Failed-Config</tt>,
and those with any error status.

<p>
<example> 
# dpkg --audit
The following packages are missing the md5sums control file in the
database, they need to be reinstalled:
 p0f                  Passive OS fingerprinting tool
 libdb4.5             Berkeley v4.5 Database Libraries [runtime]
 dhcp3-common         ISC DHCP common files (transitional package)
</example>

<p>Reinstall packages with some issues. Transitional packages and
  other packages in the Obsolete Section often can be
  removed once reinstalled. 
<p>
<example> 
# 
# aptitude reinstall p0f
The following packages will be REINSTALLED:
  p0f 
0 packages upgraded, 0 newly installed, 1 reinstalled, 0 to remove and 0 not upgraded.
Need to get 71.0 kB of archives. After unpacking 0 B will be used.
Get: 1 http://ftp.de.debian.org/debian/ wheezy/main p0f i386 2.0.8-2 [71.0 kB]
Fetched 71.0 kB in 0s (122 kB/s)
dpkg: warning: parsing file '/var/lib/dpkg/available' near line 447064 package 'cnews':
 error in Version string 'cr.g7-40.4': version number does not start with digit
dpkg: warning: parsing file '/var/lib/dpkg/available' near line 600967 package 'epic4':
 'Conflicts' field, reference to 'epic4-help': error in version: version number does not start with digit
(Reading database ... 397695 files and directories currently installed.)
Preparing to replace p0f 2.0.8-2 (using .../archives/p0f_2.0.8-2_i386.deb) ...
Unpacking replacement p0f ...
Processing triggers for man-db ...
Setting up p0f (2.0.8-2) ...
#
# aptitude reinstall libdb4.5
The following packages will be REINSTALLED:
  libdb4.5 
0 packages upgraded, 0 newly installed, 1 reinstalled, 0 to remove and 0 not upgraded.
Need to get 0 B of archives. After unpacking 0 B will be used.
E: I wasn't able to locate a file for the libdb4.5 package. This might mean you need to manually fix this package.
E: I wasn't able to locate a file for the libdb4.5 package. This might mean you need to manually fix this package.
E: Internal error: couldn't generate list of packages to download
</example>

<p>Check packages on hold

<p>
<example> 
# aptitude search "~ahold" 
No packages on hold
</example>

<p>Edit <file>/etc/apt/sources.list</file>  replacing wheezy by jessie

<p>
<example> 
# vi sources.list
# cat sources.list
# 
#deb http://ftp.de.debian.org/debian/ wheezy  main contrib non-free
#deb-src http://ftp.de.debian.org/debian/ wheezy main contrib non-free
deb http://ftp.de.debian.org/debian/ jessie  main contrib non-free
deb-src http://ftp.de.debian.org/debian/ jessie main contrib non-free

#deb http://security.debian.org/ wheezy/updates main contrib non-free
#deb-src http://security.debian.org/ wheezy/updates main contrib non-free
deb http://security.debian.org/ jessie/updates main contrib non-free
deb-src http://security.debian.org/ jessie/updates main contrib non-free
</example>

<p>Upgrade packages using the package management tool <prgn>apt-get</prgn>. In previous releases, <prgn>aptitude</prgn> was recommended for this purpose, but recent versions of  <prgn>apt-get</prgn> provide equivalent functionality and also have shown to more consistently give the desired upgrade results.

  Use <prgn>/usr/bin/script</prgn> program to record a transcript of
  the upgrade session. Then if a problem occurs, you will have a log
  of what happened that could provide exact information in a bug report. To start the recording, type:

<p>
<example> 
# script -t 2>~/upgrade-jessiestep.time -a ~/upgrade-jessiestep.script
Script started, file is /root/upgrade-jessiestep.script
# 
</example>

<p>
Update package list

<p>
<example> 
# apt-get update
</example>

<p>
Check if you have enough space for the update

<p>
<example> 
# apt-get -o APT::Get::Trivial-Only=true dist-upgrade
....
  xserver-xorg-video-fbdev xserver-xorg-video-geode xserver-xorg-video-intel xserver-xorg-video-mach64 xserver-xorg-video-mga
  xserver-xorg-video-neomagic xserver-xorg-video-nouveau xserver-xorg-video-openchrome xserver-xorg-video-r128
  xserver-xorg-video-radeon xserver-xorg-video-savage xserver-xorg-video-siliconmotion xserver-xorg-video-sisusb
  xserver-xorg-video-tdfx xserver-xorg-video-trident xserver-xorg-video-vesa xserver-xorg-video-vmware xsltproc xterm xtrans-dev xvfb
  xz-utils yelp yelp-xsl zenity zenity-common zip zlib1g zlib1g-dev
2095 upgraded, 820 newly installed, 54 to remove and 0 not upgraded.
Need to get 3,135 MB of archives.
After this operation, 1,645 MB of additional disk space will be used.
E: You don't have enough free space in /var/cache/apt/archives/.
</example>

<p> In cases like the present one, when you do not have enough space
  in <tt>var</tt>, create a temporary <file>/var/cache/apt/archives</file> directory

<p>
<example> 
# cp -ax /var/cache/apt/archives/ /home/
# ls /home/archives/
lock  partial
#  mount --bind /home/archives /var/cache/apt/archives
# mount | grep arch
/dev/sda6 on /var/cache/apt/archives type ext3 (rw,relatime,errors=continue,user_xattr,barrier=1,data=ordered)
</example>

<p>
Proceed to a minimal system upgrade to overcome deleting a large
number of packages and some possible inconsistencies, and then a full
upgrade. To do this run first <tt>apt-get upgrade</tt> followed
by <tt>apt-get dist-upgrade</tt>. In case the error message indicates
so, like in the following example, run <tt>apt-get -f install</tt>

<p>
<example> 
# apt-get upgrade

...
Running updmap-sys. This may take some time... done.
Running mktexlsr /var/lib/texmf ... done.
Processing triggers for initramfs-tools ...
update-initramfs: Generating /boot/initrd.img-3.2.0-4-686-pae
Processing triggers for python-support ...
Processing triggers for menu ...

# apt-get dist-upgrade

....

dpkg: error processing package libgtk-3-0:i386 (--configure):
 dependency problems - leaving unconfigured
Processing triggers for libc-bin (2.19-18+deb8u1) ...
Errors were encountered while processing:
 libpango-1.0-0:i386
 libpangoft2-1.0-0:i386
 libpangocairo-1.0-0:i386
 libgtk-3-bin
 librsvg2-2:i386
 librsvg2-common:i386
 adwaita-icon-theme
 libgtk-3-common
 libgtk-3-0:i386
E: Sub-process /usr/bin/dpkg returned an error code (1)
deckard:~# 
deckard:~# apt-get dist-upgrade
Reading package lists... Done
Building dependency tree       
Reading state information... Done
You might want to run 'apt-get -f install' to correct these.
The following packages have unmet dependencies:
 cgmanager : Depends: init-system-helpers (>= 1.18~) but it is not installed
 cups-daemon : Depends: init-system-helpers (>= 1.18~) but it is not installed
               Recommends: cups-browsed but it is not installed
               Recommends: avahi-daemon (>= 0.6.31-3~) but 0.6.31-2 is installed
 dpkg : Breaks: fontconfig (< 2.11.0-6.2~) but 2.9.0-7.1 is installed
        Breaks: man-db (< 2.6.3-6~) but 2.6.2-1 is installed
 emacs24 : Depends: libmagickcore-6.q16-2 (>= 8:6.8.8.2) but it is not installed
 grace : Depends: libxbae4m (>= 4.60.2) but it is not installed
         Depends: libxmhtml1.1 (>= 1.1.9) but it is not installed
 libmagickwand-6.q16-2 : Depends: libmagickcore-6.q16-2 (>= 8:6.8.9.9) but it is not installed
 libperl5.20 : Depends: perl-base (= 5.20.2-3+deb8u1) but 5.14.2-21+deb7u2 is installed
 policycoreutils : Depends: init-system-helpers (>= 1.18~) but it is not installed
                   Recommends: python-audit but it is not installed
E: Unmet dependencies. Try using -f.

deckard:~# apt-get -f install
....
  libclass-c3-xs-perl libcpan-meta-perl libdata-optlist-perl libdata-section-perl libfcgi-perl libgadu3 liblog-message-perl
  liblog-message-simple-perl libmagickcore-6.q16-2 libmodule-build-perl libmodule-pluggable-perl libmodule-signature-perl
  libmro-compat-perl libpackage-constants-perl libparams-util-perl libperl4-corelibs-perl libpod-latex-perl libpod-readme-perl
  libprotobuf-c1 libregexp-common-perl libsoftware-license-perl libsub-exporter-perl libsub-install-perl libterm-ui-perl
  libtext-soundex-perl libtext-template-perl libxbae4m libxmhtml1.1 rename
The following packages will be upgraded:
  fontconfig libalgorithm-diff-xs-perl libbit-vector-perl libfile-fcntllock-perl libgeant321-2-gfortran libhtml-parser-perl
  libio-pty-perl liblocale-gettext-perl libnet-dbus-perl libnet-ssleay-perl libpawlib-lesstif3-gfortran libpawlib2-dev
  libpawlib2-gfortran libpipeline1 libpurple0 libsocket-perl libtext-charwidth-perl libtext-iconv-perl libuuid-perl libxbae-dev
  libxml-parser-perl libyaml-syck-perl man-db paw++ perl perl-base perl-doc perl-modules perl-tk pidgin pidgin-data
31 upgraded, 35 newly installed, 7 to remove and 1041 not upgraded.
343 not fully installed or removed.
Need to get 0 B/31.0 MB of archives.
After this operation, 5,868 kB of additional disk space will be used.
Do you want to continue [Y/n]? 
......Setting up gnome-themes-standard:i386 (3.14.2.2-1) ...
Processing triggers for libc-bin (2.19-18+deb8u1) ...
Processing triggers for menu (2.1.46) ...
Processing triggers for libgdk-pixbuf2.0-0:i386 (2.31.1-2+deb8u4) ...
Processing triggers for systemd (215-17+deb8u2) ...
Processing triggers for auctex (11.87-3+deb8u1) ...
update-auctex-elisp[8251]: Will scan macros for Emacs flavor emacs24 (log to /var/lib/auctex/emacs24/CompilationLog)
update-auctex-elisp[8251]: Will scan macros for Emacs flavor emacs23 (log to /var/lib/auctex/emacs23/CompilationLog)
# 
</example>

<p>
  Success... Now run <tt>apt-get update</tt> and <tt>upgrade</tt> to
  check that the system has been correctly updated and
  edit <file>/etc/apt/sources.list.d/dropbox.list</file> in case it
  exists and change it to

<p>
<example> 
deckard:/etc/apt/sources.list.d# cat dropbox.list 
deb [arch=i386,amd64] http://linux.dropbox.com/debian jessie main
</example>

<p>Rerun <tt>apt-get update</tt> and <tt>apt-get upgrade</tt> until no
  more errors are found. If required run <tt>apt-get autoremove</tt>

<p>
<example> 
# apt-get upgrade
.....
Processing triggers for libc-bin (2.19-18+deb8u1) ...
Processing triggers for systemd (215-17+deb8u2) ...
Processing triggers for dbus (1.8.20-0+deb8u1) ...
Processing triggers for menu (2.1.47) ...
Processing triggers for python-support (1.0.15) ...
Processing triggers for initramfs-tools (0.120) ...
update-initramfs: Generating /boot/initrd.img-3.2.0-4-686-pae
# 
# apt-get update
# apt-get upgrade
Reading package lists... Done
Building dependency tree
Reading state information... Done
Calculating upgrade... The following packages were automatically installed and are no longer required:
  cernlib-core cernlib-montecarlo dzedit geant321-data geant321-doc html2text kdebase-bin kdebase-runtime kuipc kxterm lesstif2-dev
  ......
  m17n-contrib montecarlo-base montecarlo-data nypatchy paw paw++ paw-common paw-demos x11proto-print-dev
Use 'apt-get autoremove' to remove them.
Done
The following packages have been kept back:
  alsa-utils amarok amarok-common amarok-utils aptitude aptitude-common banshee base-passwd bind9-host blt brasero brasero-common
  bwidget colord console-common console-data default-jre default-jre-headless dia dia-common dia-libs diffpdf dnsmasq-base dnsutils
  docutils-common dolphin etherape exiv2 exo-utils fail2ban fakeroot file-roller flex fop gettext gir1.2-gnomebluetooth-1.0
............
  xfce4-power-manager-data xfce4-quicklauncher-plugin xfce4-screenshooter xfce4-sensors-plugin xfce4-session xfce4-settings
  xfce4-smartbookmark-plugin xfce4-systemload-plugin xfce4-terminal xfce4-timer-plugin xfce4-verve-plugin xfce4-wavelan-plugin
  xfce4-weather-plugin xfce4-xkb-plugin xfconf xfdesktop4 xfdesktop4-data xfwm4 xfwm4-themes xpra yelp
0 upgraded, 0 newly installed, 0 to remove and 560 not upgraded.
# apt-get autoremove
.......
Removing montecarlo-base (20061220+dfsg3-3) ...
Removing paw-common (1:2.14.04.dfsg.2-9) ...
Removing x11proto-print-dev (1.0.5-2) ...
Removing libmathlib2-gfortran (20061220+dfsg3-2) ...
Removing libpacklib1-gfortran (20061220+dfsg3-2) ...
Removing libkernlib1-gfortran (20061220+dfsg3-2) ...
Processing triggers for man-db (2.7.0.2-5) ...
Processing triggers for libc-bin (2.19-18+deb8u1) ...
Processing triggers for doc-base (0.10.6) ...
Processing 6 removed doc-base files, 2 added doc-base files...
Error while merging /usr/share/doc-base/kino-en with /usr/share/doc-base/kino-fr: format html already defined.
Registering documents with scrollkeeper...
Processing triggers for mime-support (3.58) ...
Processing triggers for desktop-file-utils (0.22-1) ...
Processing triggers for menu (2.1.47) ...
Processing triggers for hal (0.5.14-8) ...
Regenerating hal fdi cache ...
Processing triggers for hicolor-icon-theme (0.13-1) ...
# 
# apt-get update
# apt-get upgrade
....................
  xfce4-diskperf-plugin xfce4-fsguard-plugin xfce4-genmon-plugin xfce4-mailwatch-plugin xfce4-mixer xfce4-mount-plugin
  xfce4-netload-plugin xfce4-notes xfce4-notes-plugin xfce4-notifyd xfce4-panel xfce4-places-plugin xfce4-power-manager
  xfce4-power-manager-data xfce4-quicklauncher-plugin xfce4-screenshooter xfce4-sensors-plugin xfce4-session xfce4-settings
  xfce4-smartbookmark-plugin xfce4-systemload-plugin xfce4-terminal xfce4-timer-plugin xfce4-verve-plugin xfce4-wavelan-plugin
  xfce4-weather-plugin xfce4-xkb-plugin xfconf xfdesktop4 xfdesktop4-data xfwm4 xfwm4-themes xpra yelp
0 upgraded, 0 newly installed, 0 to remove and 548 not upgraded.
deckard:~# 
deckard:~# apt-get dist-upgrade
.....
Setting up libmono-compilerservices-symbolwriter4.0-cil (3.2.8+dfsg-10) ...
Setting up tomboy (1.14.1-3) ...
Processing triggers for systemd (215-17+deb8u2) ...
Processing triggers for libc-bin (2.19-18+deb8u1) ...
Processing triggers for menu (2.1.47) ...
Processing triggers for dbus (1.8.20-0+deb8u1) ...
Processing triggers for python-support (1.0.15) ...
Processing triggers for rygel (0.24.2-1+b1) ...
# 
# apt-get upgrade
Reading package lists... Done
Building dependency tree       
Reading state information... Done
Calculating upgrade... The following packages were automatically installed and are no longer required:
  gcj-4.6-base gcj-4.6-jre-lib gcj-4.7-base gcj-4.7-jre-lib gir1.2-gnomebluetooth-1.0 gnome-js-common kdemultimedia-kio-plugins
  ........
  squeeze texlive-luatex tsconf ttf-dejavu ttf-liberation ttf-marvosym ttf-sil-gentium-basic xbase-clients xfprint4
Use 'apt-get autoremove' to remove them.
Done
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
deckard:~# apt-get autoremove
</example>

<p> Once finisished with no more errors umount the
  temporary <tt>archives</tt> directory and you can
  use <prgn>aptitude</prgn> for package management.

<p>
<example> 
# umount /var/cache/apt/archives/

  
And That's all....
</example>


<sect1 id="ref_jessieupdate"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="https://www.debian.org/releases/jessie/amd64/release-notes/ch-upgrading.en.html"
name="Debian Jessie Release Notes">
</enumlist>  
</sect1>



<sect id="sec_023"><heading>Error in file <file>/var/lib/dpkg/status</file></heading>

<p>
Added on May 21, 2011.

<p>
The arrival of <prgn>Squeeze</prgn> has brought the "illegalization"
of the underscore as a valid character in
the  <file>/var/lib/dpkg/status</file> file and this cause some havoc  if there are some packages
having this character in its name

<example>
warning, in file '/var/lib/dpkg/status' near line 6627 package 'virtualbox':
 error in Version string '1.3.6_Debian_etch': invalid character in version number
warning, in file '/var/lib/dpkg/status' near line 6628 package 'virtualbox':
 error in Config-Version string '1.3.6_Debian_etch': invalid character in version number
</example>


The solution is to clean this packages from the list and from the
available packages info. In this particular case the package was not
installed but still caused the problem.

<example>
sudo dpkg --clear-avail
sudo aptitude purge virtualbox
</example>

</sect>

<sect id="sec_024"><heading>How to record terminal sessions using <prgn>ttyrec</prgn></heading>

<p>
Added on September 2nd, 2011.

<p>
The recording of terminal sessions can be of utility, specially for
teaching purposes. A nice tool to obtain this recordings is
the <prgn>ttyrec</prgn> program. 

<p>
We will briefly show the way to record your terminal sessions. The
first step is to install the <prgn>ttyrec</prgn> package (in <prgn>Debian</prgn>)
<p>
<example>
# apt-get install ttyrec
Reading package lists... Done
Building dependency tree... Done
The following NEW packages will be installed:
  ttyrec
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 30.9kB of archives.
After unpacking 131kB of additional disk space will be used.
Get:1 http://archive.debian.org etch/main ttyrec 1.0.6-1 [30.9kB]
Fetched 30.9kB in 1s (21.0kB/s)
Selecting previously deselected package ttyrec.
(Reading database ... 103998 files and directories currently installed.)
Unpacking ttyrec (from .../ttyrec_1.0.6-1_i386.deb) ...
Setting up ttyrec (1.0.6-1) ...
#
</example>

<p> 
Then a second step is to open a terminal window with a 80x25 size
where <prgn>ttyrec</prgn> will be executed. 

<p>
Prior to the execution it is useful to create an initialization file to
start <prgn>ttyrec</prgn> with the appropriate settings. This is not
mandatory, but can be interesting. A sample file is the following:

<p>
<example>
# input file for starting a bash session using ttyrec
# by Currix TM.
#
# vt100 setting
export TERM=vt100
# 
# change prompt
export PS1="$ "
#
# Remove trailing CTRL-C from comments
bind 'set echo-control-characters off'
</example>

<p>
If the name of this file is <file>.inputrc_ttyrec</file> the
program <prgn>ttyrec</prgn>  should be invoked as 

<p>
<example>
ttyrec -e 'bash --rcfile .inputrc_ttyrec'
</example>

<p>
In the references for this chapter (<ref id="ref_ttyrec">) a link to a
recorded session is found. There it is shown how for example
a <prgn>vi</prgn> session can be included or how comments are made by
typing <tt>CTRL-c</tt> at the end of each comment line.

<p>
The default output of <prgn>ttyrec</prgn> is a file
named <file>ttyrecord</file>. To save the output in a different file
the filename should be included at the end of the <prgn>ttyrec</prgn>
program invocation. The output file can be played back using the
program <prgn>ttyplay</prgn>, included in the <prgn>ttyrec</prgn>
package. A sample file can be downloaded and played
<p>
<example>
wget http://www.uhu.es/gem/clinux/descargas/ttyrecord
ttyplay ttyrecord
</example>

<p> 
The speed of the playback can be increased with the <tt>+</tt> key or
slowed with <tt>-</tt>.

<p> 
An interesting site to find terminal recordings is <tt>Playterm</tt>,
whose URL can be found in the references section.

<sect1 id="ref_ttyrec"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://0xcc.net/ttyrec/index.html.en"
name="ttyrec homepage">
<item><url id="http://www.uhu.es/gem/clinux/descargas/ttyrecord"
name="ttyrecord file sample">
<item><url id="http://www.playterm.org/"
name="Playterm homepage">
</enumlist>  
</sect1>

</sect>
<sect id="sec_025"><heading>Using <prgn>Bash</prgn> to count the
    number of files in a directory</heading>

<p>
Added on September 6th, 2011.

<p>
The number of files in a directory, or in general, the number of files
displayed by the command <prgn>ls</prgn> can be counted using a pipe
and the command <prgn>wc</prgn>
<p>
<example>
$ ls -1 1*gif 
115810.strip.print.gif
115811.strip.print.gif
115813.strip.print.gif
116637.strip.print.gif
116639.strip.print.gif
116642.strip.print.gif
117321.strip.print.gif
117324.strip.print.gif
118015.strip.print.gif
$ ls -1 1*gif | wc -l
9
</example>

<p>
Some alternatives with <prgn>Perl</prgn> oneliners can be found in <ref id="sec_32">
</sect>
<sect id="sec_026"><heading>Getting detailed information about your hardware</heading>

<p>
Added on November 30th, 2011.

<p>
The command <tt>lshw</tt> lists a (very) detailed information about your
hardware. The <prgn>Debian</prgn> package has the same name. This
program should be executed as superuser.
<p>
<example>
deckard
    description: All In One
    product: iMac8,1
    vendor: Apple Inc.
    version: 1.0
.
.
. Very long output here...
.
.
  *-network DISABLED
       description: Ethernet interface
       physical id: 1
       logical name: vboxnet0
       serial: 0a:00:27:00:00:00
       capabilities: ethernet physical
       configuration: broadcast=yes multicast=yes
</example>

<p>
To get an abridged output with the essential info the program can be
run with the option <tt>-short</tt>.


</sect>
<sect id="sec_027"><heading>Adding your servers load to
    the <prgn>screen</prgn> hardstatus line</heading>

<p>
Added on December 1st, 2011.

<p>
It is possible to configure <prgn>screen</prgn> to display the cpu
load or other information of interest in the hardstatus line. In this
case we use <prgn>Perl</prgn> and <prgn>ssh</prgn>. We prepare a
short <prgn>Perl</prgn> script that takes as arguments an argument
related to the output format and a server ip. The considered output
formats are green (cpu load &lt; 1.0), yellow   (3.0 &gt; cpu load
&gt;= 1.0), and red (cpu load &gt;= 3.0). The <prgn>Perl</prgn> code
is called <file>perl_load</file>
<p>
<example>
#!/usr/bin/perl
#
use strict;
use warnings;
use 5.010;
#
# by Currix TM
#
my $code =  "$ARGV[0]";
my $hostname = "$ARGV[1]";
#
chomp(my $output = `ssh $hostname cat /proc/loadavg`);
my @load = ($1,$2,$3) if ($output =~ /^(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+\d.*$/);
#
given($code) {
  when ("red") {
    if ($load[0] &gt;= 3.0) {
      $output = $hostname.": ".$load[0];
    } else {
      $output = '';
    }
  }
  when ("orange") {
    if ($load[0] &gt;= 1.0 && $load[0] &lt; 3.0) {
      $output = $hostname.": ".$load[0];
    } else {
      $output = '';
    }
  }
  when ("green") {
    if ($load[0] &lt; 1.0) {
      $output = $hostname.": ".$load[0];
    } else {
      $output = '';
    }
  }
  default {
    $output = "wrong option";
  }
}
print "$output";
</example>
<p>
The script output is the server name and the cpu load average for the
past minute if the load is in the interval defined by the format output.

<p>
The inclusion of this script in the <file>.screenrc</file> is
accomplished using <tt>backticks</tt>. For more information on this
point and  color formatting  check the <prgn>screen</prgn> man
page. An example <file>.screenrc</file> is given below

<p>
<example> 
shell -$SHELL
#
backtick 101 31 31 /home/username/bin/perl_load red server_name_or_IP
backtick 102 61 61 /home/username/bin/perl_load orange server_name_or_IP
backtick 103 91 91 /home/username/bin/perl_load green server_name_or_IP
#
hardstatus alwayslastline
hardstatus string '%{= kG}[ %{G}%H %{g}][%= %{=kw}%?%-Lw%?%{r}(%{W}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{g}][%{B}%Y-%m-%d %{W}%c  | %{+b R}%101`%{+b Y}%102`%{+b G}%103`  %{g}]'

# Default screens
screen -t mutt          0       mutt 
screen -t server	1       
screen -t box_1	        2       ssh username@rbox_1
screen -t box_2 	3       ssh username@box_2
</example>

</sect>
<sect id="sec_028"><heading>Making a backup of a <prgn>Gmail</prgn> account.</heading>

<p>
Added on December 7th, 2011.

<p>
We describe a way of backing up a <prgn>Gmail</prgn> mail account
making use of <prgn>IMAP</prgn> and the <prgn>getmail</prgn>
program. We assume that the copies want to be made in
different <tt>mbox</tt> files for different periods of time. For
example, a backup copy on a yearly basis.

<p>
The first step consist in enabling <prgn>IMAP</prgn> access in the
settings section of the <prgn>Gmail</prgn> account to be backed up and
the creation of a set of labels in the <prgn>Gmail</prgn> account
grouping the messages that will be backed up. This can be accomplished
using a search with <tt>before</tt> and <tt>after</tt>.  For example,
we can search for mail that matches the search
<tt>before:2007/10/01 AND after:2007/09/01</tt>, which will include
conversations for September 2007, and group the result of the search
under the label <tt>mail_sept_2007</tt>.
<p>
The second step is the installation of the <package>getmail4</package>
package, a mail agent program far simpler to configure than <prgn>fetchmail</prgn>.

<p>
<example>
$ sudo aptitude install getmail4
</example>
<p>
The next step is the more complicated one and implies the
configuration of the <prgn>getmail</prgn> program. In order to do so
a <file>.getmail</file> directory should be created, with restricted permissions, and a config
file <file>getmail.gmail</file> edited
<p>
<example> 
$ mkdir .getmail
$ chmod og-xr .getmail/
</example>
<p>
This is a sample <file>getmail.gmail</file>
<p>
<example> 
$ cat getmail/getmail.gmail
[retriever]
type = SimpleIMAPSSLRetriever
server = imap.gmail.com
username = <var>XXXXX</var>@gmail.com
password = <var>XXXXXXXXXXXX</var>
mailboxes = ("mail_sept_2007",)

[destination]
type = Mboxrd
path = <var>DESTINATION_PATH/mail-sept_2007.mbox</var>

[options]
# print messages about each action (verbose = 2)
# Other options:
# 0 prints only warnings and errors
# 1 prints messages about retrieving and deleting messages only
verbose = 2
message_log = ~/.getmail/gmail.log
</example>
<p>
This file should also have read permissions only for the user owning
it. Messages in this example are saved with <tt>Mbox</tt> format. For
other alternatives check references. The <tt>Mbox</tt> file has to be
created before backing up.
<p>
<example> 
$ touch <var>DESTINATION_PATH/mail-sept_2007.mbox</var>
</example>
<p>
The last step is to proceed to download the mail
<p>
<example> 
$ getmail -r getmail.gmail 
getmail version 4.20.0
Copyright (C) 1998-2009 Charles Cazabon.  Licensed under the GNU GPL version 2.
SimpleIMAPSSLRetriever:currix@gmail.com@imap.gmail.com:993:
.
. Lots of output here...
.
  1200 messages (596565682 bytes) retrieved, 0 skipped
Summary:
Retrieved 1200 messages (596565682 bytes) from SimpleIMAPSSLRetriever:XXXX@gmail.com@imap.gmail.com:993
</example>
<p>
The resulting <tt>Mbox</tt> files can be easily accessed
with <prgn>Mutt</prgn> or other mail reader program.

<sect1 id="ref_getmailgmail"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://www.mattcutts.com/blog/backup-gmail-in-linux-with-getmail"
name="Matt Cutts Blog">
<item><url id="http://blog.pengdeng.com/2008/03/backup-gmail-via-imap-using-getmail_16.html"
name="Peng.u.i.n Blog">
</enumlist>  
</sect1>
</sect>
<sect id="sec_errred"><heading>Redirecting <tt>STDERR</tt> to <tt>SDTOUT</tt></heading>

<p>
Added on Febuary 3rd, 2012.

<p>
Sometimes you need to redirect the standard error
output,  <tt>STDERR</tt>, merging it with the standard
output,  <tt>STDOUT</tt>. This is needed, for example, when you have a
long error output from a program compilation and you want to pipe it
to <tt>less</tt> to peruse the compiler info. This can be done using
the standard <prgn>bash</prgn> redirection tools
as <tt>2&gt;&amp;1</tt>. If we want to check the error output of
a compilation this can be done as follows
<p>
<example>
$ make all 2&gt;&amp;1 | less
</example>

<p>
Instead, if instead you want to merge <tt>STDOUT</tt>
into <tt>STDERR</tt> this is accomplished as  <tt>1&gt;&amp;2</tt>.


</sect>

<sect id="sec_extrdeb">Listing and extracting files from
  a <tt>deb</tt> package file.

<p>
Added on August 11th, 2012.

<p>
The <tt>deb</tt> extension marks <prgn>Debian</prgn> software package format. This
standard is also used in other distributions that are based on
<prgn>Debian</prgn> (e.g. <prgn>Ubuntu</prgn> or <prgn>Knoppix</prgn>).

<p>
The <prgn>dpkg</prgn> program is the low level package manager
for <prgn>Debian</prgn> and with this command you can list and extract
the files containd in a package, as shown below.

<p>
We use as an example the <tt>ovpc</tt> package. Once we download the
file, to display the
contents of a debian package the required option is <tt>dpkg -c</tt>

<p>
<example> 
$ dpkg -c ovpc_1.06.94-3_i386.deb
dr-xr-xr-x root/root         0 2010-02-25 10:54 ./
dr-xr-xr-x root/root         0 2010-02-25 10:54 ./ovpc/
dr-xr-xr-x root/root         0 2010-02-25 10:54 ./ovpc/pkg/
dr-xr-xr-x root/root         0 2010-02-25 10:54 ./ovpc/pkg/lib/
dr-xr-xr-x root/root         0 2010-02-25 10:48 ./ovpc/pkg/lib/header/
-r-xr-xr-x root/root       130 2009-10-29 17:06 ./ovpc/pkg/lib/header/libov.so
.
.
.

-r-xr-xr-x root/root       131 2009-10-29 17:06 ./ovpc/pkg/etc/conf
dr-xr-xr-x root/root         0 2010-02-25 10:54 ./ovpc/pkg/etc/conf/log.conf
</example> 

<p>
You can use <tt>dpkg -x</tt> to extract the files from a deb package as shown below.


<p>
<example> 
$ dpkg -x  ovpc_1.06.94-3_i386.deb /tmp/ov
$ ls /tmp/ov
ovpc
</example> 


<p>
But there is also an alternative way of proceeding. As <tt>deb</tt>
files are <file>ar</file> archives, containing three files:
debian-binary, control.tar.gz, and data.tar.gz. We can use
the <prgn>ar</prgn> and <prgn>tar</prgn> commands to extract and view
the files from the deb package.

<p>
First, extract the content of the <tt>deb</tt> archive file using <prgn>ar</prgn>.

<p>
<example> 
$ ar -vx ovpc_1.06.94-3_i386.deb
x - debian-binary
x - control.tar.gz
x - data.tar.gz
$
</example> 

<p>
Next, extract the content of <file>data.tar.gz</file> file as follows.

<p>
<example>$ tar -xvzf data.tar.gz
./
./ovpc/
./ovpc/pkg/
./ovpc/pkg/lib/
./ovpc/pkg/lib/header/
./ovpc/pkg/lib/header/libov.so
.
.
./ovpc/pkg/etc/conf
./ovpc/pkg/etc/conf/log.con
</example>

<sect1 id="ref_extrdeb"><heading>References</heading> 
<p>
<enumlist>  
<item><url id="http://www.thegeekstuff.com/2010/04/view-and-extract-packages/"
name="TheGeekStuff">
</enumlist>  
</sect1>

</sect>

<sect id="sec_script">Using <tt>script</tt> to keep terminal output records.

<p>
Added on November 18th, 2012.

<p>
The <tt>script</tt> command saves in a file the output of the terminal where it has been executed. The basis command syntax is 


<p>
<example> 
$ script [filename]
</example> 
<p>
If no filename is given then the default filename is <tt>typescript</tt>. Be aware that script works best without making use of programs that manipulate the screen such that <prgn>vi</prgn> or <prgn>less</prgn>. 

<p>
To exit <tt>script</tt> you can type <tt>CTRL-D</tt> or <tt>exit</tt>.

<p>
You can use the <tt>-a</tt> option to append the output to a file without overwriting it. An example of use of script is the following:


<p>
<example> 
$ script test_script
Script started, file is test_script
$ who
bara    tty8         2012-11-17 13:57 (:0)
bara    pts/1        2012-11-17 13:58 (:0.0)
$ exit
exit
Script done, file is test_script
$ ls -l test_script 
-rw-r--r-- 1 bara rsrchrs 780 Nov 18 12:02 test_script
$ cat test_script 
Script started on Sun 18 Nov 2012 12:02:17 PM CET
$ who
bara    tty8         2012-11-17 13:57 (:0)
bara    pts/1        2012-11-17 13:58 (:0.0)
$ exit
exit

Script done on Sun 18 Nov 2012 12:02:33 PM CET
$ 
</example> 


<p>
Another interesting option is to share a session output between two users. This is very handy when explaining to someone a particular feature in the console. In order to do so the script output is sent to a fifo file and the flush option <tt>-t</tt> is added while the second user should have <prgn>ssh</prgn> access to the computer where script is run. 

<p>
For example if user <tt>bara</tt> in computer <tt>prague</tt> wants to show her output to user <tt>alice</tt> in computer <tt>wland</tt> the necessary steps are the following:

<p>
On  <tt>bara</tt>'s side
<p>
<example> 
bara@prague$ mkfifo foo; script -f foo
</example> 

<p>
The console now will be temporarily frozen until <tt>alice</tt> starts getting the output from the fifo file <file>foo</file>. 

<p>
<example>
alice@wland$ ssh alice@prague
alice@prague's password: 
WWelcome to Ubuntu 12.04.1 LTS (GNU/Linux 3.2.0-33-generic i686)

 * Documentation:  https://help.ubuntu.com/

0 packages can be updated.
0 updates are security updates.

Last login: Sun Nov 18 10:50:37 2012 from platea.local
alice@prague$ cat /home/bara/foo
Script started on Sun 18 Nov 2012 11:21:29 AM CET
bara@prague$
</example>

<p> And from now on user <tt>bara</tt> can proceed to work on the terminal sharing the output with <tt>alice</tt>. Beware that the permissions in the fifo file and <tt>bara</tt>'s home directory should allow <tt>alice</tt> to access the fifo.
</sect>

<sect id="sec_modcompopt">Checking actual kernel compiling options.

<p>
Added on January 8th, 2013.

<p>
Sometimes it is necessary to check if the kernel of your computer has
been compiled including a particular option. For example, let's check
if the kernel has been compiled with the <tt>CONFIG_EFI_PARTITION</tt>
option turned on (see <ref id="sec_parted">).

<p>
<example> 
$ cd /boot/
$ ls
System.map-2.6.32-5-amd64  config-2.6.32-5-amd64  grub/  initrd.img-2.6.32-5-amd64  vmlinuz-2.6.32-5-amd64
$ grep _EFI_ config-2.6.32-5-amd64 
CONFIG_EFI_VARS=m
CONFIG_EFI_PARTITION=y
</example> 
</sect>
<sect id="sec_parted">Using <tt>parted</tt> to partition memory sticks or formatting HD partitions larger than 2 TB
<p>
Added on January 8th, 2013.
<p>
Updated on March 22nd, 2019.

<p>
Let's start with the larger than 2 TB partitions. The first step is to
check whether your kernel has been compiled with
the <tt>CONFIG_EFI_PARTITION</tt> option turned on
(see <ref id="sec_modcompopt">). If this is so, let's assume that the
device assigned to the HD that will be partitioned
is <file>/dev/sdb</file>, that it is a 2 TB HD and will be mounted
in <file>/large_disk</file>. The <prgn>fdisk</prgn> program and its
variants cannot be used because the new partition will be too large
(larger than 1.5 TB). Be warned that <prgn>fdisk</prgn> and all its
variants will not issue warnings but will create partitions not larger
than 1.5 TB.


<p>
Be also warned that all the contents of the disk will be lost. <em>Make
the necessary backups in advance.</em> 

<p> Let's assume that you've installed the <prgn>parted</prgn> program.

<p>
<example> 
# parted /dev/sdb
GNU Parted 2.3
Using /dev/sdb
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted)                                                                  
</example> 

<p>
You can print the actual partition scheme 


<p>
<example> 
(parted) print
Model: DELL PERC H700 (scsi)
Disk /dev/sdb: 1933GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos

Number  Start   End     Size    Type     File system  Flags
 1      1049kB  1933GB  1933GB  primary  ext3

(parted)      
</example> 


<p>
The next step is to remove the existing partition

<p>
<example> 
(parted) rm 1                                                             
(parted) print                                                            
Model: DELL PERC H700 (scsi)
Disk /dev/sdb: 1933GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos

Number  Start  End  Size  Type  File system  Flags

(parted)                                                                  
</example> 

<p>
Next, the disk is labeled as a gpt disk

<p>
<example>
(parted) mklabel gpt                                                      
Warning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?
Yes/No? Yes                                                               
(parted) print                                                            
Model: DELL PERC H700 (scsi)
Disk /dev/sdb: 1933GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt

Number  Start  End  Size  File system  Name  Flags

(parted) 
</example>
<p>
Once the disk is relabeled, the new partition can be created and you
can exit <prgn>parted</prgn>
<p>
<example>
(parted) mkpart
Partition name?  []? primary                                              
File system type?  [ext2]?                                                
Start? 0                                                                  
End? -0                                                                   
Warning: The resulting partition is not properly aligned for best performance.
Ignore/Cancel? I                                                          
(parted) print                                                            
Model: DELL PERC H700 (scsi)
Disk /dev/sdb: 1933GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt

Number  Start   End     Size    File system  Name     Flags
 1      17.4kB  1933GB  1933GB               primary

(parted) quit                                                             
Information: You may need to update /etc/fstab.                           
</example>

<p> Create the filesystem in the usual way
<p>
<example>
# mkfs.ext4 /dev/sdb1 
mke2fs 1.41.12 (17-May-2010)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
117964800 inodes, 471859191 blocks
23592959 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=4294967296
14400 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks: 
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
        4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, 
        102400000, 214990848
Writing inode tables: done
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information: done

This filesystem will be automatically checked every 37 mounts or
180 days, whichever comes first.  Use tune2fs -c or -i to override.
</example>
<p>
Finally check the partition <tt>UUID</tt> and edit accordingly the
<file>fstab</file> file.
<p>
<example>
# ls -l /dev/disk/by-uuid/
total 0
lrwxrwxrwx 1 root root 10 Sep 21 11:43 346dc157-f150-4a1e-8b83-bf4a50dc3cad -> ../../sda5
lrwxrwxrwx 1 root root 10 Sep 26 13:00 43615088-9470-419c-9958-199b0bcbbbd6 -> ../../sdb1
lrwxrwxrwx 1 root root 10 Sep 21 11:43 5fa63da1-1ff9-4fbf-93c2-4fcdef686892 -> ../../sda7
lrwxrwxrwx 1 root root 10 Sep 21 11:43 93272bd4-51b2-4e8a-940d-f85d5fa1978d -> ../../sda6
# 
</example>

<p>
In our case the previous partition <tt>UUID</tt> in <file>fstab</file>
needs to be replaced by the new
value <tt>43615088-9470-419c-9958-199b0bcbbbd6</tt> and the filesystem
type should be changed also changed if  necessary. The
corresponding <file>fstab</file> line should read as follows

<p>
<example>
# cat /etc/fstab | grep large
# /large_disk was on /dev/sdb1 during installation
UUID=43615088-9470-419c-9958-199b0bcbbbd6 /large_disk     ext4    defaults        0       2
</example>

<p>
The final result is
<p>
<example>
# df -h | grep large
/dev/sdb1             1.8T  196M  1.7T   1% /large_disk
</example>
<p>
If necessary, reboot and check that the partition is correctly mounted.

<p>
This article was originally written for servers, but after having several times trouble with formatting and creating partitions in memory sticks I decided to update it and address some of the usual problems I face. 

<sect1 id="ref_parted1"><heading>Message <tt>Warning: The driver descriptor says the physical block size is 2048 bytes, but
Linux says it is 512 bytes.</tt></heading> 

  <p> As I learned on the references, this was probably caused by writing an image to the disk using <tt>dd</tt> with the wrong blocksize. This happens to me with a memory stick. Once I umounted the partition and run <tt>parted</tt> I got

<p>
<example>
root@modesto:~# parted /dev/sdc
GNU Parted 3.2
Using /dev/sdc
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) print
Warning: The driver descriptor says the physical block size is 2048 bytes, but
Linux says it is 512 bytes.
Ignore/Cancel? C
Model: TOSHIBA TransMemory (scsi)
Disk /dev/sdc: 7759MB
Sector size (logical/physical): 512B/512B
Partition Table: unknown
Disk Flags: 
(parted) quit                                                             
root@modesto:~#               
</example>

We should wipe out all info in the disk. Be extra careful and do not mix up the device label or you may end erasing all info in the wrong unit... So we check again the units using a command line <tt>parted</tt> with the option <tt>--list</tt>
<p>
<example>
root@modesto:~# parted --list
Model: ATA Micron 1100 SATA (scsi)
Disk /dev/sda: 256GB
Sector size (logical/physical): 512B/4096B
Partition Table: gpt
Disk Flags: 

Number  Start   End    Size    File system     Name                  Flags
 1      1049kB  630MB  629MB   fat32           EFI system partition  boot, esp
 2      630MB   222GB  221GB   ext4            DEBIAN
 4      222GB   256GB  34.1GB  linux-swap(v1)


Warning: The driver descriptor says the physical block size is 2048 bytes, but
Linux says it is 512 bytes.
Ignore/Cancel? I                                                          
Model: TOSHIBA TransMemory (scsi)
Disk /dev/sdb: 31.0GB
Sector size (logical/physical): 2048B/512B
Partition Table: mac
Disk Flags: 

Number  Start   End     Size    File system  Name   Flags
 1      2048B   6143B   4096B                Apple
 2      1925MB  1928MB  2392kB               EFI


</example>
<p> So the wrong unit is <tt>/dev/sdb</tt> which truly has a 8GB size. Let's wiipe it out.
  <p>
    <example>
root@modesto:~# wipefs --all /dev/sdb
/dev/sdb: 5 bytes were erased at offset 0x00008001 (iso9660): 43 44 30 30 31
/dev/sdb: 2 bytes were erased at offset 0x000001fe (dos): 55 aa
/dev/sdb: 8 bytes were erased at offset 0x00000200 (gpt): 45 46 49 20 50 41 52 54
/dev/sdb: 2 bytes were erased at offset 0x00000000 (mac): 45 52
/dev/sdb: calling ioctl to re-read partition table: Success

    </example>
    <p>
      And now let's create a new partition and filesystem with <tt>parted</tt>
      <p>
      <example>root@modesto:~# parted /dev/sdb
GNU Parted 3.2
Using /dev/sdb
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) print                                                            
Error: /dev/sdb: unrecognised disk label
Model: TOSHIBA TransMemory (scsi)                                         
Disk /dev/sdb: 7759MB
Sector size (logical/physical): 512B/512B
Partition Table: unknown
Disk Flags: 
(parted) mklabel gpt
(parted) mkpart                                                           
Partition name?  []? data                                                 
File system type?  [ext2]? fat32                                          
Start? 0                                                                  
End? -1                                                                   
Warning: The resulting partition is not properly aligned for best performance.
Ignore/Cancel? I                                                          
(parted) print                                                            
Model: TOSHIBA TransMemory (scsi)
Disk /dev/sdb: 7759MB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags: 

Number  Start   End     Size    File system  Name  Flags
 1      17.4kB  7758MB  7758MB  fat32        data

(parted) quit                                                             
Information: You may need to update /etc/fstab.

root@modesto:~# mkfs.vfat /dev/sdb1
mkfs.fat 4.1 (2017-01-24)
root@modesto:~# 
      </example>
      <p>
	<em> TODO </em> Get rid of <tt>The resulting partition is not properly aligned for best performance</tt> warning.
<sect1 id="ref_parted"><heading>References</heading> 
<p>
<enumlist>  
<item><url id="http://www.cyberciti.biz/tips/fdisk-unable-to-create-partition-greater-2tb.html"
name="Cyberciti">
<item><url id="https://bugs.launchpad.net/ubuntu/+source/usb-creator/+bug/1708881"
name="USB Stick corrupted">
</enumlist>  
</sect1>

</sect>
<sect id="sec_new_part">Adding a partition to <file>fstab</file> by <tt>UUID</tt>

<p>
Added on January 31st, 2015.

<p>
Assume that you have reformatted your hard disk and created a new
partition, maybe liberating some space from other operating system,
and you want to add the new partition to your <prgn>GNU/Linux</prgn>
system. In our case we suppose that the new partition
is <file>/dev/sda9</file> with an <tt>ext4</tt> filesystem and we want
to mount it in a <file>/data</file> directory. We then want to give
access to a system's user, for instace, user <tt>curro</tt> to this
partition.

<p>
The first step is check the partition <tt>UUID</tt>,
<p>
<example> 
$ ls -l /dev/disk/by-uuid/
total 0
lrwxrwxrwx 1 root root 10 Feb  1 20:17 2AF23ED0F23E9FCD -> ../../sda1
lrwxrwxrwx 1 root root 10 Jan 31 20:43 2e6850cc-0bb9-4f36-b0a8-c167aa257dd6 -> ../../sda7
lrwxrwxrwx 1 root root 10 Jan 31 20:43 55d1fe60-aed5-43c2-9c57-34cdea5accda -> ../../sda6
lrwxrwxrwx 1 root root 10 Jan 31 20:43 578091f7-b057-481a-82b3-6db5a3b86bec -> ../../sda5
lrwxrwxrwx 1 root root 10 Feb  1 20:17 5c1dccb0-e78a-48cc-a63d-95148a8f6cb5 -> ../../sda9
lrwxrwxrwx 1 root root 10 Feb  1 20:16 5F1F-1069 -> ../../sdc1
lrwxrwxrwx 1 root root 10 Feb  1 20:17 6E223D37223D059D -> ../../sda3
lrwxrwxrwx 1 root root 10 Feb  1 20:16 9dbd2628-0353-4798-85e4-738b25d0cdd5 -> ../../sdc2
lrwxrwxrwx 1 root root 10 Feb  1 20:17 c30b003f-11f6-430d-8c19-892d68b2c0cf -> ../../sda8
lrwxrwxrwx 1 root root 10 Feb  1 20:17 EC7A41587A412126 -> ../../sda2
</example> 
<p>
  We then, as root, create the mount point, <file>/data</file> and add the following line to  the <file>/etc/fstab</file>
<p>
<example> 
UUID=5c1dccb0-e78a-48cc-a63d-95148a8f6cb5       /data           ext4    defaults,user_xattr        0       2
</example> 

<p>
  Once the <file>fstab</file> file is saved, we can now mount the new partition

<p>
<example> 
# mount /data
# mount | grep sda9
/dev/sda9 on /data type ext4 (rw,relatime,data=ordered)
</example> 


<p>
  The last step is to give user <var>curro</var> access to this directory. This is done creating a directory and assigning the directory to this user

<p>
<example> 
# mkdir downloads_curro
root@kimoshi:/data# chown curro:curro downloads_curro/
</example> 

<p>
  Then user curro can move the data in his folder <file>Downloads</file>  to this new directory and link the old folder to the new one. 

<p>
<example>
  $ mv Downloads/* /data/downloads_curro
  $ rmdir Downloads
  $ ln -fs /data/downloads_curro ./Downloads
</example>


</sect>
<sect id="sec_error_eject">Error ejecting a CD

<p>
Added on January 31st, 2015.

<p>
  Sometimes when you eject a CD from the terminal the system displays the following error


<p>
<example> 
$ eject
eject: unable to eject, last error: Inappropriate ioctl for device
</example> 
<p>
  The same error is obtained when we try to eject the CD as superuser
<p>
<example> 
# eject
eject: unable to eject, last error: Inappropriate ioctl for device
</example> 

<p>
The verbose output is
<p>
<example> 
# eject -v /dev/sr0
eject: device name is `/dev/sr0'
eject: expanded name is `/dev/sr0'
eject: `/dev/sr0' is not mounted
eject: `/dev/sr0' is not a mount point
eject: `/dev/sr0' is not a multipartition device
eject: trying to eject `/dev/sr0' using CD-ROM eject command
eject: CD-ROM eject command failed
eject: trying to eject `/dev/sr0' using SCSI commands
eject: SCSI eject failed
eject: trying to eject `/dev/sr0' using floppy eject command
eject: floppy eject command failed
eject: trying to eject `/dev/sr0' using tape offline command
eject: tape offline command failed
eject: unable to eject, last error: Inappropriate ioctl for device
</example> 

<p>
  The solution is, as root, use the <tt>-i off</tt> option and then eject the cd

<p>
<example> 
deckard:~# eject -i off /dev/cdrom 
CD-Drive may be ejected with device button
deckard:~# eject /dev/cdrom 
</example> 


<p>
An the CD is cleanly ejected. Happy end.


</sect>

<sect id="sec_xkill">Killing an unresponsive X-windows

<p>
Added on April 2nd, 2016.

<p>
  Assuming that we have a terminal or any XWindows application that is unresponsive and we do not know its associated PID we can kill it in the following way.

  
<p>
  We first open a terminal and start the <prgn>xwininfo</prgn> program. It will ask us to select the window we are interested in, and once we click on it we will get info like the following:
<p>
<example> 
$ xwininfo 

xwininfo: Please select the window about which you
          would like information by clicking the
          mouse in that window.

xwininfo: Window id: 0x5c0006a "Printer Properties - 'HP-LaserJet-CP-1025nw' on localhost"

  Absolute upper-left X:  1422
  Absolute upper-left Y:  649
  Relative upper-left X:  1
  Relative upper-left Y:  28
  Width: 537
  Height: 336
  Depth: 32
  Visual: 0x7b
  Visual Class: TrueColor
  Border width: 0
  Class: InputOutput
  Colormap: 0x5c00049 (not installed)
  Bit Gravity State: NorthWestGravity
  Window Gravity State: NorthWestGravity
  Backing Store State: NotUseful
  Save Under State: no
  Map State: IsViewable
  Override Redirect State: no
  Corners:  +1422+649  -1327+649  -1327-95  +1422-95
  -geometry 537x336+1421-94
</example> 
<p>
  The important piece of data is the window id, in this case  <tt>0x5c0006a</tt>. We can now kill the window using the program <prgn>xkill</prgn>
<p>
<example> 
$ xkill -id 0x5c0006a
xkill:  killing creator of resource 0x5c0006a
</example> 
<p> And the window is killed. RIP.
</sect>
<sect id="sec_tmpplus">Enlarging the size of a <file>tmp</file> directory
<p>
Added on November 14th, 2016.

<p>
  The situation is that we assume that your <file>tmp</file> directory
  is mounted in a partition and, as usually happens with good old
  servers, it gets full for a particular task. In this particular case
  it was cleaning a huge <file>Inbox</file> file.  The first step is
  to reserve space for you new <file>tmp</file> directory in a
  filesystem where you have enough space. We reserve 3Gb in a file
  called <file>tmp-dir</file> in a directory called <file>/vserver</file>

<p>
<example> 
# dd if=/dev/zero of=/vserver/tmp-dir bs=1024M count=3
3+0 records in
3+0 records out
3221225472 bytes (3.2 GB) copied, 62.3108 s, 51.7 MB/s
# ls -l /vserver/tmp-dir 
-rw-r--r-- 1 root root 3221225472 Nov 14 12:28 /vserver/tmp-dir
</example> 

<p>
We then proceed to create a filesystem into the created filespace. You
may be warned that the file is not a block device. 

<p>
<example> 
# mke2fs -j /vserver/tmp-dir
mke2fs 1.41.12 (17-May-2010)
/vserver/tmp-dir is not a block special device.
Proceed anyway? (y,n) y
warning: Unable to get device geometry for /vserver/tmp-dir
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
196608 inodes, 786432 blocks
39321 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=805306368
24 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks: 
        32768, 98304, 163840, 229376, 294912

Writing inode tables: done                            
Creating journal (16384 blocks): done
Writing superblocks and filesystem accounting information: done

This filesystem will be automatically checked every 33 mounts or
180 days, whichever comes first.  Use tune2fs -c or -i to override.
</example> 


<p>
  In order to copy the contents of the actual <file>tmp</file>
  directory and set the right permissions we mount the just created
  filesystem in a mount point, e.g. <file>mnt</file> and proceed

<p>
<example> 
# mount -t ext3 -o loop /vserver/tmp-dir /mnt
# mount | grep mnt
/dev/loop0 on /mnt type ext3 (rw)
# cp -a /tmp/* /mnt/
# chmod 1777 /mnt
# umount /mnt
</example> 

<p>
  Next, we mount the created filesystem as the
  system's <file>tmp</file> directory

<p>
<example>
# mount -t ext3 -o loop /vserver/tmp-dir /tmp
# df -h | grep /tmp
/dev/sda7             3.0G   69M  2.8G   3% /tmp
/dev/loop0            3.0G   69M  2.8G   3% /tmp
</example>
<p>
  Note that the file has been mounted on the same point as the
  old <file>tmp</file>, the block device <file>/dev/sda7</file>, but
  the size is the new size, 3GB. Once we carry out  the tasks we needed
  the enlarged <file>tmp</file> directory for, we can umount and
  recover the initial state of the syste.
<p>
<example>
# umount /dev/loop0
# df -h | grep /tmp
/dev/sda7             1.9G   35M  1.8G   2% /tmp

</example>
And that's all.


<sect1 id="ref_tempnew"><heading>References</heading> 
<p>
<enumlist>  
<item><url id="http://www.yourhowto.net/increase-tmp-partition-size-linux/"
name="YourHowto.Net">
</enumlist>  
</sect1>

</sect>
<sect id="sec_checkpack">Checking if a package is installed in <prgn>Debian</prgn>

<p>
Added on March 18th, 2018.

<p>
  We want to check for example whether a package is installed or not in a <prgn>Debian</prgn> system. For example, let's check if the package <tt>acl</tt> isinstalled. There are different ways of doing this.

  
<p>
  One option implies <tt>dpkg</tt> 
<p>
<example> 
$ dpkg -l acl
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                           Version               Architecture       Description
+++-===============================-=====================-==================-=============================
ii  acl                             2.2.52-3+b1           amd64              Access control list utilities
</example> 
<p>
  The important piece of data are the two <tt>ii</tt> at the beginning of the line, showing that the package is installed. In case that the package were not installed, the line begins with <tt>u</tt> or <tt>p</tt> or the output would be as follows
<p>
<example> 
$ dpkg -l 2ping
dpkg-query: no packages found matching 2ping
</example> 
<p>
  Another option uses the <tt>apt-cache policy</tt> application
  <p>
    <example>
$ apt-cache policy acl
acl:
  Installed: 2.2.52-3+b1
  Candidate: 2.2.52-3+b1
  Version table:
 *** 2.2.52-3+b1 500
        500 http://ftp.es.debian.org/debian stretch/main amd64 Packages
        500 http://deb.debian.org/debian stretch/main amd64 Packages
        100 /var/lib/dpkg/status
</example> 
    <p>
      and
<p>
<example>
$ apt-cache policy 2ping
2ping:
  Installed: (none)
  Candidate: 3.2.1-1
  Version table:
     3.2.1-1 500
        500 http://ftp.es.debian.org/debian stretch/main amd64 Packages
        500 http://deb.debian.org/debian stretch/main amd64 Packages
</example>
</sect>

<chapt id="cap_1"><heading>Network and Navigators</heading> 

<sect id="sec_11">Running multiple <prgn>firefox</prgn> instances 

<p>
In order to execute <prgn>firefox</prgn> (<prgn>mozilla</prgn> or <prgn>iceweasel</prgn>) from a machine that is
  different to the local box while running <prgn>firefox</prgn>
  locally the program should be launched as:
<p>
<example> 
firefox -no-remote
</example>
</sect>
<sect id="sec_12">Electronic signature with <prgn>iceweasel</prgn>
   

<p>
In order to sign documents of the <em>Junta de Andalucía</em>
  or <em>Universidad de Huelva </em>with  <prgn>firefox</prgn>
  (<prgn>mozilla</prgn> or <prgn>iceweasel</prgn>) the following steps
  should be accomplished. This has been tested with the electronic
  administration website of the UHU (<tt>www.uhu.es/ae</tt>)

<p> 
First a certificate from the <tt>FNMT</tt> accrediting the identity of
the person who is going to sign the document should be among the
certificates available to the navigator. If it is not so, it should be
imported (<tt>Preferences -> Advanced -> Encryption -> View
    Certificates -> Import</tt>).

<p>
Once this is done the package<footnote>Written for Debian
    Lenny.</footnote><tt>sun-java6-plugin</tt> should be installed and
    the navigator should be restarted after its installation. 

<p>
The files <url id="https://ws022.juntadeandalucia.es/firmadigital/servicio/paginas/jss33.jar"
name="jss33.jar"> and <url id="https://ws022.juntadeandalucia.es/firmadigital/servicio/paginas/libjss3.so"
name="libjss3.so"> have to be
downloaded. A page is opened with the instructions when the navigator
detects its absence. They have to be copied with the appropriate
      permissions to the right plugin directory
<p>
<example> 
# chmod 644 jss33.jar
# cp jss33.jar /usr/lib/jvm/java-6-sun/jre/lib/ext/
# chmod 755 libjss3.so
# cp libjss3.so /usr/lib/jvm/java-6-sun/jre/lib/i386/client/
</example>

<p> Once this is done the electronic administration page should allow
  us to fill the form and (hopefully) to sign it.
</sect>
<sect id="sec_13">Some tips to access the web using the console
   

<p>
The original console web browser is <prgn>lynx</prgn>. In order to
avoid questions inquiring whether you accept or not cookies it can be
invoked using the option
<p>
<example> 
$ lynx -accept_all_cookies
</example> 
<p> Another interesting option is <tt>-dump</tt>. When using this
option the program writes the lynx output and writes it to the
standard output. More modern and flexible is the <prgn>links</prgn>
browser, that can be used in text mode but also can be compiled to be
accessed from a graphical display
(option <tt>-g</tt>). The <tt>-dump</tt> option is also available. A
strictly text replacement for <prgn>lynx</prgn> (and more modern)
is <prgn>Elinks</prgn> with several interesting options.

<p>
In order to download an off line copy of some web pages, so you can
browse them later offline you can use <prgn>curl</prgn>, that can
upload or download data from to or from a server. You can specify multiple URL's by ranges as in the following two examples
<p>
<example> 
$ curl http://site.(s1,s2,s3).org
$ curl http://site.s[1-3].org
</example>

<p>
The copy of an entire site can be done using <prgn>wget</prgn>
<p>
<example> 
$ wget -k -r -p http://www.interesting_site.org
</example>
<p>
The option <tt>-r</tt> recurses through the site links starting
from <tt>http://www.interesting_site.org/index.html</tt>. The <tt>-k</tt>
option make the links relative allowing the correct navigation through
the downloaded pages. The <tt>-p</tt> option downloads all extra
content on the page. This order makes a true mirror of a site in your
computer.

<p>
Finally, the program <tt>wput</tt> uploads contents to internet using <tt>FTP</tt> as an interface and with a syntax like the <prgn>wget</prgn> one.

<sect1 id="ref_webconso"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://www.linuxjournal.com"
name="Upfront, Linux Journal, issue 197, September 2010">
</enumlist>  
</sect1>
</sect>
<sect id="sec_14">Make files in a directory downloadable from a web server
   

<p>
In order that files can be listed downloaded when accessing a
directory on a webserver the following line should be added to
the <file>.htaccess</file> file
<p>
<example> 
Options +Indexes
</example> 

<p>
Be warned that the contents of all subdirectories of the directory
will also be listable and downloadable...
</sect>



<chapt id="cap_2"><heading>The <prgn>ssh</prgn> application</heading> 

<sect id="sec_21"><heading>Removing a <tt>known_hosts</tt> entry</heading> 

<p>In order to remove from the <tt>known_hosts</tt> file the entry
  corresponding the the computer <var>hostname</var>, execute<footnote>The <tt>IP</tt> value
  can also be used instead of the computer's hostname.</footnote>
<example> 
ssh-keygen -R <var>hostname</var>
</example>

</sect>
<sect id="sec_22"><heading>Generating a key pair and exporting to a
    remote host</heading> 

<p>If we want to access a remote node with <prgn>ssh</prgn> without
  providing our password,  we can do so using automatic login. In
  order to do so, we must first check if we have a keypair already
  generated.  
<p>
<example> 
$ ls .ssh/
known_hosts
</example>
<p> If it is not generated, like in this example, we generate it using
  the command <tt></tt>
<p>
<example> 
$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/users/home/username/.ssh/id_rsa): <var>[press enter]</var>  
Enter passphrase (empty for no passphrase): <var>[press enter]</var>  
Enter same passphrase again: <var>[press enter]</var>  
Your identification has been saved in /users/home/username/.ssh/id_rsa.
Your public key has been saved in /users/home/username/.ssh/id_rsa.pub.
The key fingerprint is:
8b:93:61:e7:2d:4a:50:30:a3:23:7d:fc:c5:21:af:d7 
</example>

The next step is to copy the generated public key to the remote host
  we want to be able to login automatically, <var>hostname</var>.
<example> 
$ ssh-copy-id -i ~/.ssh/id_rsa.pub <var>hostname</var>
36
The authenticity of host 'hostname (XXX.163.XXX.XXX)' can't be established.
RSA key fingerprint is 37:2b:77:61:50:0f:2a:d2:7f:da:c9:a9:10:29:37:t6.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'hostname,XXX.163.XXX.XXX' (RSA) to the list of known hosts.
Password: 
Now try logging into the machine, with "ssh 'hostname'", and check in:

  .ssh/authorized_keys

to make sure we haven't added extra keys that you weren't expecting.
</example>
<p>
And that's all. Now you can login via <prgn>ssh</prgn> without being
prompted for a password.
</sect>

<sect id="sec_23"><heading>Launching with <prgn>ssh</prgn> programs that require a terminal</heading> 

<p>There are some programs that cannot be launched directly with <prgn>ssh</prgn> because they require an associated terminal. For example, <prgn>mutt</prgn> or <prgn>screen</prgn>, 
<p>
<example> 
$ ssh user@server screen
Must be connected to a terminal.
</example>
<p> To solve this problem there is an option in <prgn>ssh</prgn> to
force pseudo-tty allocation. For example, if we want to re-attach to a
previous <prgn>screen</prgn> session in the node <var>server</var> we
can do
<p>
<example> 
$ ssh -t user@server screen -dr
</example>
<sect1 id="ref_sshtty"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://www.linuxjournal.com"
name="Hack and / - Lightning Hacks, Linux Journal, issue 195, July 2010">
</enumlist>  
</sect1>

</sect>
<sect id="sec_24"><heading>Tunneling with <prgn>ssh</prgn></heading> 

<p>The <prgn>ssh</prgn> program has the powerful feature of making the
user able to stablish encrypted tunnels between nodes. This is a major
advantage of this extremely useful tool. There are several
possibilities. Let's assume that we are user <var>bob</var> in a node
called <var>home_box</var>, that has a private IP and it's behind a
firewall, and we can access a second node, called <var>work_box</var>,
where we are user <var>william</var>. We can connect
from <var>home_box</var> to <var>work_box</var> but not the other way
around. Thus, we want to make a encrypted tunnel that enables
the coconnection from <var>work_box</var> to <var>home_box</var>. This
is known as reverse <prgn>ssh</prgn> tunneling.

<p>
In order to create this tunnel we should run from <var>home_box</var>.
<p>
<example> 
william@home_box:~$ ssh -R 9999:localhost:22 william@work_box
</example>
<p> A session in <var>work_box</var> is opened, and while this session is active, the tunnel works. Then, if we log into <var>work_box</var>, we can connect to <var>home_box</var> making use of the tunnel.

<p>
<example> 
william@work_box:~$ ssh -p 9999 bob@localhost
The authenticity of host 'localhost (127.0.0.1)' can't be established.
RSA key fingerprint is b0:b6:f3:78:e2:8d:8f:8b:3f:ab:b4:d4:da:c5:a6:e1.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'localhost' (RSA) to the list of known hosts.
bob@localhost's password: 
bob@home_box:~$ 
</example>
<p>
A problem in this case is that once the initial connection is closed
the tunnel collapses. A possible way to alleviate this problem there
is to run an application in the connection to <var>work_box</var>,
e.g.  <tt>top</tt> trying to keep the connection alive.

<p>
This is not the best option. There are better ones, for example,
launching a dedicated connection with options <tt>-f</tt> (detach ssh
process from tty), <tt>-N</tt> (do not execute any command over ssh),
and <tt>-o TCPKeepAlive=yes</tt> to keep the connection alive.

<p>
<example> 
william@home_box:~$ ssh -f -N -o TCPKeepAlive=yes -R 9998:localhost:22 \ 
                       william@work_box
william@home_box:~$
</example>
We can then connect using the new tunnel.
<p>
<example> 
william@work_box:~$ ssh -p 9998 bob@localhost
bob@localhost's password: 
bob@home_box:~$ 
</example>

<!-- Other options: autossh and config ssh files -->

<sect1 id="ref_sshtunnel"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://www.howtoforge.com/reverse-ssh-tunneling"
name="howtoforge :: reverse-ssh-tunneling">
<item><url id="http://www.revsys.com/writings/quicktips/ssh-tunnel.html"
name=" SSH Tunneling Made Easy">
<item><url id="http://www.linux-mag.com/id/1705"
name="SSH Tunneling">
<item><url id="http://souptonuts.sourceforge.net/sshtips.htm"
name="Breaking Firewalls with OpenSSH and PuTTY">
</enumlist>  
</sect1>

</sect>

<sect id="sec_tarssh"><heading>Using <prgn>ssh</prgn> to make a tarball directly in a remote folder </heading> 
<p>
Created on March 13th, 2015.

<p>You could be interested in preparing a tarball and, for lack of space or to save intermediate steps, transfer on the fly the file to a remote box. For example, let's assume that you want to transfer a directory called <file>data_EXP</file> from a computer called <tt>laptop</tt> to another computer called <tt>backup_server</tt> (I know, not very imaginative....). If our working directory is <file>data_EXP</file> parent directory we can then run
<p>
<example> 
$ tar czf - data_EXP | ssh username@backup_server "cat &gt; data_EXP_dir.tgz"
</example>

</sect>

<chapt id="cap_emacs"><heading><prgn>Emacs</prgn> text editor</heading> 

<sect id="sec_emacs1"><heading><prgn>Emacs</prgn> macros</heading> 
<p>
Updated on February 7th, 2016.
<p> To define several <prgn>emacs</prgn> macros simultaneously and
  save them, the macros should be named. To give a macro a name define
  the macro and then execute <tt>M-x (name-last-kbd-macro)</tt> and
  give the macro a name<footnote>It is interesting to prefix the
  macros with your initials or your username to prevent conflicts.</footnote>.

<p> The defined macro can be executed with the key combination <tt>C-x
    e</tt> unless a new macro is defined. When the last macro defined is not
    the one that should be executed, it should be recalled by its name
    as <tt>M-x</tt> <var>macro_name</var>.

<p> If you consider the macro worth to be saved for future
  sessions you can open a file and save the macro in this file with the command <tt>M-x insert-kbd-macro RET <var>macroname</var> RET</tt>. You can load the file later with <tt>load-file</tt>.

  <p> The macro can also be added to the <prgn>emacs</prgn> startup
  file. In order to do so, open the <tt>.emacs</tt> file or the file
  where you keep <prgn>emacs</prgn> macros and execute <tt>M-x
  (insert-kbd-macro)</tt> giving the name of the macro to be saved.

<sect1 id="ref_emacs"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://www.emacs.uniyar.ac.ru/doc/em24h/emacs112.htm"
name="http://www.emacs.uniyar.ac.ru/doc/em24h/emacs112.htm">
<item><url id="http://www.gnu.org/software/emacs/manual/html_node/emacs/Save-Keyboard-Macro.html"
name="Emacs Manual">
</enumlist>  
</sect1>
</sect>


<sect id="sec_emacs2"><heading>Changing the default system's text
    editor to <prgn>Emacs</prgn></heading> 

<p>
In order to change the default system's text editor
to <prgn>emacs</prgn> or other alternative as <prgn>vi</prgn> in
a <prgn>Debian</prgn> system the <tt>root</tt> user can update the
system's default
<p>
<example>
$ sudo update-alternatives --config editor 
[sudo] password for curro: 

There are 4 alternatives which provide `editor'.

  Selection    Alternative
-----------------------------------------------
          1    /bin/ed
*+        2    /bin/nano
          3    /usr/bin/vim.tiny
          4    /usr/bin/emacs22

Press enter to keep the default[*], or type selection number: 4
Using '/usr/bin/emacs22' to provide 'editor'.
$ 
</example>
<p>
Some programs use the environment variables <tt>$EDITOR</tt> or <tt>$VISUAL</tt> to
decide which editor to use. For the sake of consistency on Debian
systems, these variables should be set to <file>/usr/bin/editor</file>.

</sect>

<sect id="sec_emacs3"><heading>Removing empty lines in <prgn>Emacs</prgn></heading> 
<p>
Created on May 21st, 2015.

<p>
In order to remove all blank lines in a text file (or a selected text
file region) you can use the command  <tt>M-x flush-lines</tt> that
removes all lines that matches a regexp condition as follows
<p>
<example>
M-x flush-lines RET ^$ RET
</example>
<p>
In case you want to remove lines containing only spaces the command is 
<p>
<example>
M-x flush-lines RET ^\s-*$ RET
</example>
<p>
<sect1 id="ref_emacs03"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="https://www.masteringemacs.org/article/removing-blank-lines-buffer"
name="Mastering Emacs">
</enumlist>  
</sect1>

<sect id="sec_emacs_init"><heading>Reading init file <file>.emacs</file></heading> 
<p>
Created on December 7th, 2017.

<p>
  If you perform changes in the <prgn>emacs</prgn> init file <file>.emacs</file> and you want to reload the definitions in an already open editor instance there are several ways to proceed:
  
  <p>
    <enumlist>  
<item> Open emacs and then <tt>load-file</tt> (<tt>M-x load-file</tt>, then press return twice to accept the default filename, which is the current file being edited).
  <item> move the point to the end of any sexp and press <tt>C-xC-e</tt> to execute just that sexp. Usually it's not necessary to reload the whole file if you're just changing a line or two.
    <item> Open .emacs and execute <tt>M-x eval-buffer</tt>. It immediately evaluates all code in the buffer.
    </enumlist>
    
<p>
<sect1 id="ref_emacs_init"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="https://stackoverflow.com/questions/2580650/how-can-i-reload-emacs-after-changing-it"
name="Answer from Stackoverflow">
</enumlist>  
</sect1>

<sect id="sec_comment"><heading>Commenting a region of a code in <prgn>Emacs</prgn></heading> 
<p>
Created on February 23rd, 2016.

<p>
  In order to remove comment several lines of a source code, in <prgn>LaTeX</prgn>, <prgn>Python</prgn>, <prgn>Fortran</prgn>, etc. select the region to comment and press <tt>M-;</tt>. To uncomment a region type <tt>C-u C-;</tt>.
<p>
<sect1 id="ref_comment"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="https://www.gnu.org/software/emacs/manual/html_node/emacs/Comment-Commands.html"
name="Emacs manual">
</enumlist>  
</sect1>

<sect id="sec_emacs_orgmode"><heading><prgn>Emacs</prgn> <tt>org-mode</tt></heading> 
<p>
Added on December 6th, 2017.
<p> We include in this section information about different aspects of the <prgn>Emacs</prgn> text editor and its <tt>org-mode</tt>.

<p>
<enumlist>  
  <item> Adding a title, a subtitle, and an author name to an <tt>org-mode</tt> file is done in the preamble as in the following example
    <p>
      <example>
#+TITLE: Notes on the Quartic Potential
#+SUBTITLE: Quantum Cusp and Isomerization in 1D
#+AUTHOR Curro Pérez-Bernal
#
#+STARTUP: latexpreview
      </example>
      <p>
	The <tt>#+STARTUP: latexpreview</tt> command in the preamble produce a preview image of the <prgn>LaTeX</prgn> fragments in the text at point and overlay them over the source code. To activate tttttttttttttttttttttttt
	<p>
	  Adding references from a <file>bibtex</file>. Include a line
	  <p>
	    <example>
	      #+BIBLIOGRAPHY: refs plain 
	    </example>
	    <p>
	      and call <tt>org-reftex-citation</tt> each time you need to include a reference.
	      
<item> Shortcuts of interest:
      <enumlist>
	<item>  <tt>TAB (Shift-TAB)</tt> :: Fold-unfold parts. With <tt>Shift</tt> affects the whole file.
	  <item> <tt>Alt-up/down</tt> ::  move a headline up or down

      </enumlist>  
</enumlist>  


<sect1 id="ref_emacs_orgmode"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://www.emacs.uniyar.ac.ru/doc/em24h/emacs112.htm"
name="http://www.emacs.uniyar.ac.ru/doc/em24h/emacs112.htm">
<item><url id="http://www.gnu.org/software/emacs/manual/html_node/emacs/Save-Keyboard-Macro.html"
name="Emacs Manual">
</enumlist>  
</sect1>

<sect id="sec_notes2bib"><heading>Including comments and footnotes in the References section</heading> 
<p>
Created on January 2nd, 2019.

<p>
  The inclusion of footnotes and remarks in the reference list is provided by the package <tt>notes2bib</tt>.  To load the package, include a line  <tt>\usepackage{notes2bib}</tt> in the text head. Then any footnote content or relevant note can be deal with the command <tt>\bibnote</tt> as follows
  
<p>
<example>
There are two variables, $a$ and $b$\bibnote[]{The $b$ variable is
related to the quantum number $c$ as $b = 2c$.} and two control parameters: A and B.
</example>
<p>
  Note that if you do not include the empty squared braces option in <tt>bibnote</tt> a label to your comment will be added in addition to the reference keynote.
  
<p>
<sect1 id="ref_notes2bib"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://mirror.hmc.edu/ctan/macros/latex/contrib/notes2bib/notes2bib.pdf"
name="notes2bib documentation">
</enumlist>  
</sect1>

</sect>


<chapt id="cap_3"><heading>Perl Language</heading> 
<p>
This chapter has been translated
  into <url id="http://www.webhostinghub.com/support/es/misc/instalacion-de-perl"
name="Spanish"> language by Maria Ramos  from
    <url id="http://www.webhostinghub.com/support/edu"
    name="Webhostinghub.com/support/edu">.

<sect id="sec_31"><heading>Installing a <tt>CPAN</tt> module</heading> 

<p>There are two possible ways to install a CPAN module. We give both alternatives.

<sect1 id="sec_311"><heading>First alternative for installing a <tt>CPAN</tt> module</heading> 
<p>
Download the <tt>CPAN</tt> module (we use the module <tt>Devel-SmallProf-2.02</tt> as an example) and untar it

<p>
<example>
# tar xzvf Devel-SmallProf-2.02.tar.gz
# cd Devel-SmallProf-2.02
Devel-SmallProf-2.02# ls
Changes  MANIFEST  META.yml  Makefile.PL  README  TODO  lib  t
</example>

<p> Compile and install the module
<example>
Devel-SmallProf-2.02# perl Makefile.PL
Checking if your kit is complete...
Looks good
Writing Makefile for Devel::SmallProf

Devel-SmallProf-2.02# make
cp lib/Devel/SmallProf.pm blib/lib/Devel/SmallProf.pm
Manifying blib/man3/Devel::SmallProf.3pm

Devel-SmallProf-2.02# make test
PERL_DL_NONLAZY=1 /usr/bin/perl "-MExtUtils::Command::MM" "-e" "test_harness(0, 'blib/lib', 'blib/arch')" t/*.t
t/part1....ok
t/part2....ok
t/part3....ok
t/part4....ok
t/pods.....skipped
        all skipped: Only the author needs to check that POD docs are right
All tests successful, 1 test skipped.
Files=5, Tests=14,  1 wallclock secs ( 0.08 cusr +  0.01 csys =  0.09 CPU)

Devel-SmallProf-2.02# make install
Installing /usr/local/share/perl/5.8.8/Devel/SmallProf.pm
Installing /usr/local/man/man3/Devel::SmallProf.3pm
Writing /usr/local/lib/perl/5.8.8/auto/Devel/SmallProf/.packlist
Appending installation info to /usr/local/lib/perl/5.8.8/perllocal.pod
</example>
</sect1>


<sect1 id="sec_312"><heading>Second alternative for installing a <tt>CPAN</tt> module</heading> 

<p> In this case we use an interactive shell that we launch as

<example># perl -MCPAN -e shell</example>

<p>The first time the shell is launched the system has to be configured and upgraded. 
The system prompts for several programs (unzip, etc.). Install them if they are not already installed in the computer.
Select a repository (in my case <tt>ftp://ftp.rediris.es/mirror/CPAN</tt>) and
  most questions can safely answered using the default choice.

<p>The first thing to do after configuration is to upgrade your <tt>CPAN</tt>:

<example>cpan> install Bundle::CPAN


CPAN: Storable loaded ok
Fetching with LWP:
  ftp://ftp.rediris.es/mirror/CPAN/authors/01mailrc.txt.gz
Going to read /root/.cpan/sources/authors/01mailrc.txt.gz
CPAN: Compress::Zlib loaded ok
Fetching with LWP:
  ftp://ftp.rediris.es/mirror/CPAN/modules/02packages.details.txt.gz
.
.
.</example>


<p>Then you reload it:

<example>cpan> reload cpan</example>


<p>And install the required module, <tt>Roots</tt> in this example:

<example>cpan> install Math::Function::Roots

.
.
.

Appending installation info to /usr/lib/perl/5.8/perllocal.pod
  /usr/bin/make install  -- OK</example>

 


</sect1>
</sect>

<sect id="sec_32"><heading>Interesting perl oneliners</heading> 
<p>
Updated on March 5th, 2017.
<p>
Updated on October 29th, 2016.
<p>
Updated on May 21st, 2015.
<p>
Updated on January 31st, 2015.
<p>
<enumlist>  
<item>Execute a program, in this case <prgn>epstopdf</prgn>, using as
  an input all files sharing an common extension , in this
  case <tt>eps</tt>, in the current directory.

<p>
<example>
perl -e 'system "epstopdf $_" for (glob "*.eps");'
</example>

<item> Erasing "phantom" files with 0 bytes size.

<p>
<example>
perl -e 'foreach (glob "*") \
{unless (-s $_) {"Deleting $_\n";unlink "$_";}}'
</example>

<item> Checking <prgn>Postscript</prgn> files referred in a <prgn>LaTeX</prgn> output message.

<p>
<example>
latex <var>filename.tex</var> | perl -e \
'while (&lt;&gt;){foreach (split) {/<(.*?\.eps)>/ and push(@eps, $1)}};\ 
foreach (sort @eps) {print;print "\n"}' 
</example>


<item> Print apostrophe character.

<p>
<example>
perl -le 'print "'\'' is an apostrophe..."'</example>

<item> Changing a text file from UTF-8 encoding to ASCII. Note that it
  does not work for Spanish accented characters.

<p>
<example>perl -ne 'for (unpack "U*", $_) \ 
{ printf $_ > 128 ? "x" :  "%c", $_ }' <var>fileUTF.txt</var> > <var>fileASCII.txt</var>
</example>

<item> Adding an <tt>E</tt> character to the output
  of <prgn>Fortran</prgn> programs with three digits in the exponent
  that lacks this character. 

<p>
<example>
perl -pi'.bak' -e 's/(\d)-(\d\d\d)/$1E-$2/g' <var>fort.output</var>
</example>

<item> Delete empty lines in a file.

<p>
<example> perl -ni -e 'chomp($_);print "$_\n" if ($_)'<var> test.dat</var>
</example>

<item> Makes a substitution in a file, in the selected example
  substitute the word <var>figures</var> by <var>Figures</var> in all
  files with extension <tt>tex</tt> in the current directory.

<p>
<example> perl -pi'.bak' -e 's/figures\//Figures\//g' *.tex
</example>

<item> Counting the number of words per line in a file. If the filename is <file>test.out</file> then

<p>
<example>
perl -n -e 'my @line = split;print scalar @line,"\n"' test.out 
10000
202
10000
202
10000
202
10000
202
10000
202
</example>

<item> Join even lines at the end of odd lines in a file.  If the filename is <file>test.out</file> then we can count the number of words in each line prior and after the merging.

<p>
<example>
perl -n -e 'my @line = split;print scalar @line,"\n"' test.out 
10000
202
10000
202
10000
202
perl -n -e 'chomp; $.%2 ? print "$_ ": print "$_\n";' test.out > test2.out 
perl -n -e 'my @line = split;print scalar @line,"\n"' test2.out 
10202
10202
10202
</example>

<item> Search and display occurrences in a log file
  (<var>/var/log/loginlog.0</var> in this example) of succesful logins
  of user <var>curro</var>, showing the number of times the user has logged from
  each machine.

<p>
<example> 
perl -e 'while (&lt;&gt;) {
if (m|\d+:\d+:\d+\s+(.*?)\s+.*ccepted.*<var>curro</var>\s+from\s+(.*?)\s+.*|) 
 {$vh{"$1 from $2"}++;} } 
 foreach (keys %vh) 
  {print "$vh{$_} login(s) to $_\n";}'<var> /var/log/loginlog.0</var>
</example>

<item> Count the number of files in a directory. 

<p>
In the first example
  we use globbing to count the total number of files including hidden
  files or the number of files subject to some restriction.

<p>
<example> 
$ perl -e 'my @files = glob "* .*"; print 1+$#files."\n"'
129
$ perl -e 'my @files = glob "1*gif"; print 1+$#files."\n"'
9
</example>
<p>
The same can be accomplished using directory handles and <prgn>grep</prgn>
<p>
<example> 
$ perl -e 'opendir DH, ".";my @files = readdir DH; print 1+$#files."\n"'
129
$ perl -e 'opendir DH, ".";my @files = grep /^1.*\.gif$/, (readdir DH); print 1+$#files."\n"'
9
</example>
<item> Get the last line of a file. 
<p>
We include a oneliner that gets the last line of a series of files
<p>
<example>
perl -e 'foreach (@ARGV) {my $line = `tail -n 1 $_`; print $line}' output_notes_1* output_notes_2* output_notes_3* ...   
</example>
<p>
In the original application the line was prepended with a number
appearing in the filename as follows
<p>
<example>
perl -e 'foreach (@ARGV) {/.*(\d\d).*/;my $line = $1.`tail -n 1 $_`; print $line}' output_notes_1* output_notes_2* output_notes_3* ...
</example>
<item> Change <prgn>Mac</prgn> carriage return to <prgn>UNIX</prgn> new line
<p>
  Let's assume we have a bunch of <tt>csv</tt> files with  <prgn>Mac</prgn> carriage return that our system interprets as a very long unique line. Instead of using <prgn>emacs</prgn> we can easily fix this with
<p>
<example>
perl -pi -e 's/\r/\n/g' *.csv
</example>
<item> Extract the figure names from a <prgn>LaTeX</prgn> compile
  output and prepare a tarball with the figure files. 

<p>
We assume that we compile a file called <file>rdiary_2014.tex</file>
  and   all figs are in a directory called <tt>Figs</tt> and
  are <tt>png</tt> files. We use two pipes, the first one connect the
  output of <prgn>pdflatex</prgn> with a <prgn>perl</prgn> oneliner
  that reads the standad input and extract the file names. A second
  pipe sends to <prgn>tar</prgn> the file names. Notice the <tt>-T
  -</tt> options.
<p>
<example>
pdflatex rdiary_2014.tex | perl -e 'while (&lt;&gt;) {print "$1\n" if /&lt;.*(F.*png).*&gt;/g}' | tar czf figs.tgz -T -
</example>

<item> We have two files, each with two columns of data in an X Y
  format. Let's say <file>File_1</file> with <tt>X1 Y1</tt>
  and <file>File_2</file> with <tt>X2 Y2</tt>. The abscissa are common
  and we want to create a third file with called <file>File_3</file>
  with three columns and the following format: X1 Y1 Y2.

<p>
<example> 
perl -e '@fhs=map { open my $fh, "&lt;", $_; $fh } @ARGV; $f0 =
$fhs[0]; $f1 = $fhs[1]; while (!$done) { $done=1; chomp($l0=&lt;$f0&gt;); $l1=&lt;$f1&gt;; do { @ll1 = split " ", $l1; print "$l0 $ll1[-1] \n"; $done=0 } if (defined $l0); } ' File_1 File_2
</example>

</enumlist>  


</sect>

<sect id="sec_33"><heading>Environment Codification and Character Ordering</heading> 
<p>
The following short script permit to test a terminal codification.
<p>
<example>  
#!/usr/bin/perl
use warnings;
use strict;
use Encode;
my @charsets = qw(utf-8 latin1 iso-8859-15 utf-16);
# some non-ASCII codepoints:
my $test = 'Ue: ' . chr(220) .'; Euro: '. chr(8364) . "\n";
#
for (@charsets){print "$_: " . encode($_, $test);}
</example>  
<p> Once the script is run, different lines appear, and the terminal
charset is the one of the line correctly displayed. For example, if we
execute the script in a terminal using the <tt>UTF-8</tt> coding system
the output is something similar to
<p>
<example>  
$ encodings.plx 
utf-8: Ue: Ü; Euro: €
latin1: Ue: �; Euro: ?
iso-8859-15: Ue: �; Euro: �
utf-16: ��Ue: �; Euro:  �
</example>  
<p>
Note that both special characters, Ü and the euro symbol, only appear
in correcto form in the <tt>utf-8</tt> charset line. 

<p>
The function <tt>chr</tt> in <prgn>Perl</prgn> takes a number
as an argument and returns the character represented by that NUMBER in
the selected character set. The function <tt>encode</tt> allows the
codification of the character is different character sets. The four
most common character sets are the ones included in the former
example.

<p> 
Another problem with character sets arise when ordering
alphabetically a set of words of characters when the characters in the
set are not the standard 127 <tt>ASCII</tt> character. For example, suppose
that we are trying to order alphabetically the following set of names

<example>
Álvarez
Mínguez  
Pérez
Perales
Pilar
Mola
Borrero
Díaz
Diz
Delgado
Cuesta
Castro
Cáñamo
</example>  

<p>
A standard program, comparing with the <tt>cmp</tt> function is as follows

<p>
<example>
#!/usr/bin/perl
use strict;
use warnings;
#
my @names;
#
while (defined(my $line = &lt;&gt;)) {
    chomp($line);
    my $elem = push(@names,$line);
    print "$elem element(s) added\n";
}
#
print "Reading process finished. Sorting ... ";
#
print "Done.\n\n";
print "Sorted set of names:\n";
foreach (sort by_name @names) {
    print "\t$_\n";
}
#
sub by_name {$a cmp $b}
</example>  

However, when we run the program we obtain the somewhat surprising output
<example>
Sorted set of names:
	Borrero
	Castro
	Cuesta
	Cáñamo
	Delgado
	Diz
	Díaz
	Mola
	Mínguez  
	Perales
	Pilar
	Pérez
	Álvarez
</example>  

<p>
Clearly this is not the expected output if we intend to sort
alphabetically (using Spanish sorting rules). The reason of this
unexpected behavior is that the <tt>cmp</tt> function compares
non-ASCII chars by codepoint
number<footnote>From <prgn>Wikipedia</prgn>: In character encoding
terminology, a code point or code position is any of the numerical
values that make up the code space. For example, ASCII comprises 128
code points in the range 0hex to 7Fhex, Extended ASCII comprises 256
code points in the range 0hex to FFhex, and Unicode comprises
1,114,112 code points in the range 0hex to 10FFFFhex.</footnote>, which might
give unexpected results. In order to sort according to a particular
languague convention we should use the <tt>locale</tt> pragma. The
previous program can be rewritten as follows

<p>
<example>
#!/usr/bin/perl
use strict;
use warnings;
#
##########
use locale;
use POSIX qw(locale_h);
setlocale(LC_COLLATE, 'es_ES@euro') or die "Locale es_ES\@euro not installed.\n";
##########
#
#
my @names;
#
while (defined(my $line = &lt;&gt;)) {
    chomp($line);
    my $elem = push(@names,$line);
    print "$elem element(s) added\n";
}
#
print "Reading process finished. Sorting ... ";
#
print "Done.\n\n";
print "Sorted set of names:\n";
foreach (sort by_name @names) {
    print "\t$_\n";
}
#
sub by_name {$a cmp $b}
</example>  
<p>
After this change the word order is the usual one in Spanish.
<p>
<example>
Sorted set of names:
        Álvarez
        Borrero
        Cáñamo
        Castro
        Cuesta
        Delgado
        Díaz
        Diz
        Mínguez  
        Mola
        Perales
        Pérez
        Pilar
</example>  

<sect1 id="ref_codifs"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://perlgeek.de/en/article/encodings-and-unicode"
name="http://perlgeek.de/en/article/encodings-and-unicode">
<item><url id="http://perldoc.perl.org/perllocale.html#USING-LOCALES"
name="http://perldoc.perl.org/perllocale.html#USING-LOCALES">
</enumlist>  
</sect1>

</sect>

<sect id="sec_34"><heading>Extracting matches from a regular expressions</heading> 

<p>
This can be easily done using the grouping metacharacters
'<tt>()</tt>'. They allow the extraction of the parts of a string that
matched the imposed condition. Each grouping marked by parentheses
goes into a special variable <tt>$1</tt>, <tt>$2</tt>, etc. They can
be used as ordinary variables.
<p>
If we want to extract the day, month and year from a date expressed
as <var>dd/mm/yyyy</var> we can do the following

<p>
<example>
 # extract day, month, year
       if ($date =~ m!(\d\d)/(\d\d)/(\d\d\d\d)!) { # match dd/mm/yyyy format
           $day = $1;
           $month = $2;
           $year = $3;
       }
</example>

<p>
Note the use of the pattern match operator <tt>m!!</tt> to change the
standard pattern delimiters. We can rewrite in a shorter form the
previous code, taking advantage of the different behavior of the
binding operator in scalar and list contexts.

<p>
In scalar context the binding operator returns a true or false value.

<p>
<example>
$answer = $date =~ m!(\d\d)/(\d\d)/(\d\d\d\d)!
</example>

<p> 
Thus <var>$answer</var> equals to one or zero. In list context,
however, the binding operator returns the list of matched
values <tt>($1, $2, $3, ...)</tt>. Thus we can abbreviate the previous
code as

<p>
<example>
($day,$month,$year) = ($date =~ m!(\d\d)/(\d\d)/(\d\d\d\d)!)
</example>

<p>
If the groupings in a regexp are nested, <tt>$1</tt> gets the group with the
leftmost opening parenthesis, <tt>$2</tt> the next opening parenthesis, etc.


<p>
For more information: <tt>man perlretut</tt>.

</sect>

<sect id="sec_35"><heading>Basic use of <prgn>fork</prgn> to launch a program</heading> 

<p>
Apart from the <prgn>system</prgn> utility, a <prgn>Perl</prgn> script
can launch child processes using the <prgn>fork</prgn> utility. Let's
assume that we are interested in launching applications,
called <tt>fort_1</tt> and <tt>fort_2</tt> from a script, but we are
not interested in waiting for the end of the
application. Using <prgn>fork</prgn> we can do the following in our script
<p>
<example>
defined(my $pid0 = fork) or die "Cannot fork: $!";
unless ($pid0) {
  # Child 0 process is here
  exec "fort_1";
  die "cannot exec fort_1: $!";
}
defined(my $pid1 = fork) or die "Cannot fork: $!";
unless ($pid1) {
  # Child 1 process is here
  exec "fort_2";
  die "cannot exec fort_2: $!";
}
print "Program output: \n";
# Parent processes are here
<var># script continues ... </var>
waitpid($pid0, 0);
waitpid($pid1, 0);
</example>

<p>
Only the parent process has a non-zero value in <tt>$pid0</tt>
and <tt>$pid1</tt> and skip the two <tt>unless</tt> conditionals. The
program arrives to the <tt>waitpid</tt> function. This function waits
for a particular child process to terminate and returns the pid of the
deceased process. It is important to do so in order to get rid of
zombie processes.
<p>
For more information: <tt>man perlipc</tt>.

</sect>

<sect id="sec_36"><heading><prgn>Perl</prgn> predefined variables. Some examples.</heading> 

<p>
Apart from the ubiquitous <prgn>Perl</prgn> default variable, <tt>$_</tt>
there is a large number of useful predefined variables. We give some
examples of them in the following short codes. 
<p>
<enumlist>
<item> <tt>$.</tt>
<p>
<em>Current line number for the last filehandle accessed.</em>
<p>
The following code displays each line of the file and the
corresponding line number.
<p>
<example>
#
open(INPUT,"&lt;/etc/motd") or die "/etc/motd: $!";
#
while (&lt;INPUT&gt;) {
    print "Line $.: $_";
}
</example>
<item> <tt>$0</tt>
<p>
<em>Name of the program being executed.</em>
<p>
The following code removes directories preceding the program name and
stores it in a variable called <tt>$prgname</tt>
<p>
<example>
#
(my $prgname) = $0 =~ m#.*/(.+$)#;
#
</example>
</enumlist>

For more information: <tt>man perlvar</tt>.

</sect>


<sect id="sec_37"><heading>Using a named pipe for interprocess communication in <prgn>Perl</prgn></heading> 

<p>
A named pipe (or <tt>fifo</tt> file) can be used for interprocess
communication between a parent process and a child process or children
processes. Let's suppose that we forked and launched a couple of child
processes <ref id="sec_35"> and we want to check whether each of the
child processes has finished. Once the first process finishes we
execute the <tt>waitpid</tt>. It is not efficient to directly
execute <tt>waitpid</tt> because we do not know which of the processes
will finish first. 

<p>
A commented sample of code that manages to do so, launching a couple
of child processes and waiting for each of them to finish is the
following
<p>
<example>
#!/usr/bin/perl
#
# named pipe use for ipc example
#
# by Currix TM
#
use strict;
use warnings;
use POSIX qw(mkfifo);
#
# fifo definition
my $FIFOname = ".prgfifo";
unless (-p $FIFOname) { # Create the pipe if it doesn't exist
    unlink $FIFOname;
    mkfifo($FIFOname, 0700) or die "mkfifo in the current directory failed: $!";
}
#
my @pid;
#
print "This is the parent process before forking with pid $$\n";
#
defined ($pid[0]=fork) or die "Cannot fork (1): $!";
#
# 
unless ($pid[0]) {
    print "fork1 pid: $pid[0]\n";
    print "fork1 ps: $$\n";
    sleep 10; # Sleeeeeeeping
    system "cat /etc/motd";
#   Child process ended. Write process number in the FIFO
    open (FIFO, "&gt;$FIFOname") || die "can't write prgfifo: $!";
    print FIFO "$$";
    sleep 2;    # to avoid dup signals
    print "Exiting child 1\n";
    exit(0) # Remember to cleanly close the child process
} else {
    print "This is the parent process after forking 1 with pid: $pid[0]\n";
}
#
defined ($pid[1]=fork) or die "Cannot fork (2): $!"; 
#
unless ($pid[1]) {
    print "fork2 pid: $pid[1]\n";
    print "fork2 ps: $$\n";
    sleep 5; # Sleeeeeeeping
    system "cat /etc/fstab";
#   Child process ended. Write process number in the FIFO
    open (FIFO, "&gt;$FIFOname") || die "can't write prgfifo: $!";
    print FIFO "$$";
    sleep 1;    # to avoid dup signals
    print "Exiting child 2\n";
    exit(0); # Remember to cleanly close the child process
} else {
    print "This is the parent process after forking 2 with pid: $pid[1]\n";
}
#
print "This are the pids from the parent process after forking: $pid[0], $pid[1]\n";
#
my $iprocess = 0;
open (FIFO, "&lt;$FIFOname") || die "can't read prgfifo: $!";
while (1)  {
    my $kidpid = &lt;FIFO&gt;;
    if (defined $kidpid) {
	print "child process $kidpid ended\n";
	sleep 2; # To avoid dup signals again
	waitpid($kidpid, 0);
	last if ((++$iprocess) == 2);
    }
} 
#
print "The two child processes have finished. Closing the parent process.\n";
# 
unlink("$FIFOname"); # Remove the named pipe

</example>

<p>
For more information: <tt>man perlipc</tt> and references below.

<sect1 id="ref_perlipc"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://perldoc.perl.org/perlipc.html"
name="Perldoc website">
</enumlist>  
</sect1>

</sect>
<sect id="sec_38"><heading><tt>CperlMode</tt> in <prgn>Emacs</prgn></heading> 

<p>
The <tt>CPerlMode</tt> can be set as the standard mode for
editing <prgn>Perl</prgn> adding the following line to
the <file>.emacs</file> configuration file:

<p>
<example>
(defalias 'perl-mode 'cperl-mode)
</example>

<p>
To access the documentation about the mode use
the <tt>describe-mode</tt> function by typing <tt>C-h m</tt> when in
<tt>CPerlMode</tt>. When not in <tt>CPerlMode</tt> use <tt>M-x
  describe-function RET cperl-mode</tt> or <tt>C-h f cperl-mode</tt>.

<sect1 id="ref_cperlmode"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://www.emacswiki.org/emacs/CPerlMode"
name="Emacs wiki">
</enumlist>  
</sect1>

</sect>


<sect id="sec_39"><heading>Using <prgn>Perl</prgn> to benchmark code.</heading> 

<p>
The  <prgn>Benchmark</prgn> module included in the
base <prgn>Perl</prgn> distribution includes a series of procedures to
to benchmark running times of code. 

<p>
Some of the available procedures are the following<footnote>There are
    other possibilities. Check the References.</footnote>

<p>
<list>
<item> <tt>timethis</tt>: run a chunk of code several times.
<item> <tt>timethese</tt>: run several chunks of code several times.
<item> <tt>cmpthese</tt>: print results of timethese as a comparison
  chart (*).
<item> <tt>timeit</tt>: run a chunk of code and see how long it goes (*).
<item> <tt>countit</tt>: see how many times a chunk of code runs in a given time (*).
</list>
<p>
The procedures marked with an asterisk (*) are not included by default
and should be explicitly loaded.

<p> Two of the most useful options are  <tt>timethese</tt>
  and <tt>cmpthese</tt>.

<p>
The <tt>timethese</tt> procedure runs several chunks of code several
times. The syntax is 

<p>
<example>
timethese($count, {
'Name1' => sub { ...code1... },
'Name2' => sub { ...code2... },
});
</example>

<p>
If the argument <tt>$count</tt> is a positive integer it gives the
number of times the code is run, a negative intiger indicates the minimum number of
CPU seconds to run<footnote>CPU seconds is, in <prgn>UNIX</prgn> terms, the user time plus
the system time of the process itself, as opposed to the real
(wallclock) time and the time spent by the child
    processes.</footnote>. The minimum in this case is  0.1
sec. If <tt>$count</tt> is zero a default value of 3 CPU seconds is
assumed.

<p>
The output of <tt>timethese</tt> is an object that can be used as an
input for <tt>cmpthese</tt>.

<p>
We apply this to the following example, comparing different ways of
calculating the square of a number.


<p> 
<example>
#!/usr/bin/perl
use strict;
use warnings;
use Benchmark qw( timethese cmpthese ) ;
my $x = 3.1;
my $CNT = -6;
my $r = timethese( $CNT, {
a => sub{$x*$x},
b => sub{$x**2},
c => sub{exp(2*log($x))}
} );
cmpthese $r;
$CNT=40_000_000;
$r = timethese( $CNT, {
a => sub{$x*$x},
b => sub{$x**2},
c => sub{exp(2*log($x))}
} );
cmpthese $r;
</example>
<p>
The procedures are run twice, the first with  <tt>$count=-6</tt> and
the second with  <tt>$count=40_000_000</tt>.

<p> In the first case the <tt>timethese</tt> output
 is the following
<p>
<example>
Benchmark: running a, b, c for at least 6 CPU seconds...
   a:  8 wallclock secs ( 7.07 usr +  0.00 sys =  7.07 CPU) @ 17313412.45/s (n=122405826)
   b:  7 wallclock secs ( 6.13 usr + -0.02 sys =  6.11 CPU) @ 12221032.41/s (n=74670508)
   c:  6 wallclock secs ( 6.39 usr +  0.00 sys =  6.39 CPU) @ 3914053.68/s (n=25010803)
</example>

<p>
In these case the real (wallclock) time is given, and also the
distribution of the addition of the time spent by the user and the
system to accomplish the CPU time goal<footnote>For an explanation of
the different times reported check this
link <url id="http://en.wikipedia.org/wiki/Process_time" name="Process
time"></footnote>. In case the program spawns one or more children
processes the <tt>cusr</tt> and <tt>csys</tt> times are also
given. The number after the <tt>@</tt> symbol is the number of
iterations per second and n is the total number of iterations. Thus
the larger the better in these two last cases. The first version of
the code can be concluded to be more efficient. This is more easily
denoted using the <tt>cmpthese</tt> output. It gives in increasing
order the number of iterations per second and the percentage of
improvement (positive) or worsening (negative value) compared to the
other options.


<example> 
       Rate    c    b    a
c  3914054/s   -- -68% -77%
b 12221032/s 212%   -- -29%
a 17313412/s 342%  42%   --
</example>


<p>
In this case the codes are ordered starting on the slowest (c in this
case), giving in Rate the iterations per second and the percentages of
comparison of the rate with the rate of the other codes under
evaluation.

<p> 
If the <tt>$count</tt> argument is positive the code is executed the
number of times indicated by the argument. If this number is high
enough the results should coincide with the previously obtained.

<p>
<example>
enchmark: timing 40000000 iterations of a, b, c...
   a:  2 wallclock secs ( 1.90 usr + -0.01 sys =  1.89 CPU) @ 21164021.16/s (n=40000000)
   b:  3 wallclock secs ( 3.25 usr +  0.00 sys =  3.25 CPU) @ 12307692.31/s (n=40000000)
   c: 10 wallclock secs (10.16 usr +  0.00 sys = 10.16 CPU) @ 3937007.87/s (n=40000000)
        Rate    c    b    a
c  3937008/s   -- -68% -81%
b 12307692/s 213%   -- -42%
a 21164021/s 438%  72%   --
</example> 


<p>
The output will vary even for the same box, and several runnings are
sometimes necessary to get a final answer. Also the output vary from
box to box. If the same code is run in a different computer we obtain
<example>

Benchmark: running a, b, c for at least 6 CPU seconds...
   a:  7 wallclock secs ( 6.18 usr +  0.00 sys =  6.18 CPU) @ 19332920.23/s (n=119477447)
   b:  7 wallclock secs ( 7.25 usr +  0.00 sys =  7.25 CPU) @ 10521698.76/s (n=76282316)
   c:  8 wallclock secs ( 6.96 usr +  0.00 sys =  6.96 CPU) @ 4018543.53/s (n=27969063)
        Rate    c    b    a
c  4018544/s   -- -62% -79%
b 10521699/s 162%   -- -46%
a 19332920/s 381%  84%   --
Benchmark: timing 40000000 iterations of a, b, c...
   a:  2 wallclock secs ( 0.77 usr +  0.00 sys =  0.77 CPU) @ 51948051.95/s (n=40000000)
   b:  2 wallclock secs ( 2.40 usr +  0.00 sys =  2.40 CPU) @ 16666666.67/s (n=40000000)
   c:  9 wallclock secs ( 9.40 usr +  0.00 sys =  9.40 CPU) @ 4255319.15/s (n=40000000)
        Rate     c     b     a
c  4255319/s    --  -74%  -92%
b 16666667/s  292%    --  -68%
a 51948052/s 1121%  212%    --
</example>

<sect1 id="ref_benchmark"><heading>References</heading> 


<p>
<enumlist>  
<item><url id="http://perldoc.perl.org/Benchmark.html"
name="Perldoc Benchmarc Entry">
<item><url id="http://www.techrepublic.com/article/benchmarking-perl-scripts-with-benchmarkpm/5278558"
name="Benchmarking in techrepublic">
<item><url id="http://en.wikipedia.org/wiki/Process_time"
name="Process time">
</enumlist>  
</sect1>

</sect>
<sect id="sec_perlrecdir"><heading>Accessing recursively files and directories in <prgn>Perl</prgn></heading> 
<p>
Added on November 22nd, 2012.
<p>
The easiest way in <prgn>Perl</prgn> to access files and directories
recursively is making use of the <tt>File::Find</tt> module. For
example let's assume that we want to, recursively, change the
permissions of a given directory contents in such a way that files
have <tt>rw-r----</tt> permision and directories <tt>rwxr-x--</tt>. 

<p> We can do this with the following script, than makes use of the <tt>File::Find</tt> module.

<p>
<example>
#!/usr/bin/perl
#
# script to process recursively a directory.
# by Currix TM.
use strict;
use warnings;
#
use File::Find;
#
sub process_files {
  my $permission_dir = 0750;
  my $permission_file = 0740;
  if (-d $_) {
    #print "processing dir $_\n";
    chmod $permission_dir, $_;
  } elsif (-f $_) {
    #print "\tprocessing file $_\n";
    chmod $permission_file, $_;
  }
}
@ARGV = qw(.) unless @ARGV;
find(\&amp;process_files, @ARGV);
</example>

<p>
Notice that the <tt>chmod</tt> function in  <prgn>Perl</prgn> needs
that the permission are expressed in octal values. Note also the lack
of apostrophes in the permisision variables definition.

</sect>
<sect id="sec_perl_newfilehandle"><heading>Correct way of opening filehandles in <prgn>Perl</prgn></heading> 
<p>
Added on December 17th, 2018.

  
<p>
  If we need to open for reading a file whose name is encoded in the variable <var>$filename</var>, we create a variable for the filehandle name <tt>$fh</tt>, and we want to stop the program if the file does not exist,  we should use something similar to the following example:
<p>  
<example>
use strict;
use warnings;
 
my $filename = 'data.txt';
open(my $fh, '<:encoding(UTF-8)', $filename)
  or die "Could not open file '$filename' $!";
 
while (my $row = <$fh>) {
  chomp $row;
  print "$row\n";
}
</example>
 
<p>Notice that the <tt>open</tt> function has three arguments and instead of using only the symbol <tt>\&lt</tt> for reading the encoding is provided.

  <p> In early <prgn>Perl</prgn> versions (prior to 2000) the standard way of doing this would be
<p>  
<example>
use strict;
use warnings;
 
my $filename = 'data.txt';
open(IN, "<$filename")
  or die "Could not open file '$filename' $!";
 
while (my $row = &lt;IN&gt;) {
  chomp $row;
  print "$row\n";
}
</example>
<p>
  In this case only two arguments are given for <tt>open</tt>. The filehandle is <tt>IN</tt>, a global bareword that is not catched by the <tt>use stric</tt> pragma. The problem with this old fashion way is
  <enumlist>  
    <item> <tt>IN</tt> is global to all the script with possible clashes.
    <item> It is difficult to pass the filehandle to functions and subroutines as an argument.
      <item> Having two parameters the filename variable can make possible to experience unexpected side effects. For example defining <tt>$filename = ">/etc/crontab"</tt> and making possible to modify this file (hopefully you do not run as root your scripts...).
</enumlist>

<p> Same apply for writing...
  
<sect1 id="ref_open_new_filehandles"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="https://perlmaven.com/open-files-in-the-old-way"
name="PerlMaven.com">
</enumlist>  
</sect1>

</sect>

<chapt id="cap_fortran"><heading>Fortran Tips and Templates</heading>

  <sect id="sec_06">Compile and install the <prgn>LAPACK95</prgn> interface driver routine.
    <p>
      Updated on February 22nd, 2018.
      <p>
	Updated on September 16th, 2011.
	
	<p>
	  This howto was checked initially in a <prgn>Debian Squeeze</prgn> box, with a <prgn>gfortran 4.4.5</prgn> compiler and in a <prgn>Ubuntu Lucid Lynx</prgn> with a compiler <prgn>gfortran 4.4.3</prgn>. Last version has been checked in a  <prgn>Debian Stretch</prgn> box, with a <prgn>gfortran 6.3.0</prgn> compiler.

	  <p>
  In this howto we install from scratch the <prgn>Fortran 77</prgn> libraries <prgn>BLAS</prgn> and <prgn>LAPACK</prgn>, and then compile the <prgn>FORTRAN 95</prgn> extension to <prgn>LAPACK</prgn>.

Both <prgn>Debian</prgn> and <prgn>Ubuntu</prgn> systems provide  <prgn>BLAS</prgn> and <prgn>LAPACK</prgn> libraries as native packages and this first step could be skipped and you can ignore next two paragraphs. In any case it may be interesting to compile all the libraries with optimized flags for the system in question.

<p>
First we should upload the <prgn>LAPACK</prgn> and <prgn>LAPACK 95</prgn> libraries, for example from the <em>Netlib</em> website  (<url id="http://www.netlib.org/lapack/lapack-3.3.1.tgz"
name="LAPACK tgz from Netlib">, (<url id="http://www.netlib.org/lapack95/lapack95.tgz"
name="LAPACK95 tgz from Netlib"> ). The <prgn>LAPACK</prgn> version we will install is 3.3.1.

<p>
<example> 
$ wget  -c http://www.netlib.org/lapack/lapack-3.3.1.tgz
--2011-09-16 13:49:37--  http://www.netlib.org/lapack/lapack-3.3.1.tgz
Resolving www.netlib.org... 160.36.58.108
.
.
.
2011-09-16 13:49:48 (439 KB/s) - `lapack-3.3.1.tgz' saved [4945204/4945204]

$ wget http://www.netlib.org/lapack95/lapack95.tgz
--2011-09-16 13:49:54--  http://www.netlib.org/lapack95/lapack95.tgz
.
.
.
2011-09-16 13:49:59 (368 KB/s) - `lapack95.tgz' saved [1579613/1579613]
</example> 

<p>
Untar the <prgn>LAPACK</prgn> library tarball.
<p>
<example>
$ tar xzf lapack-3.3.1.tgz 
$ cd lapack-3.3.1/
lapack-3.3.1$
</example>

<p> 
Edit the file <tt>make.inc</tt> to a file conveniently tuned for your system. A working example for <prgn>gfortran</prgn> is shown in <ref id="make_inc_77">. The library can now be compiled, starting with the compilation of the included <prgn>BLAS</prgn> library
<p>
<example>
lapack-3.3.1$ cd BLAS/SRC
lapack-3.3.1/BLAS/SRC$ make
.
.
.
 zhemm.o zherk.o zher2k.o lsame.o xerbla.o xerbla_array.o
ranlib ../../blas_linux_gfortran.a
lapack-3.3.1/BLAS/SRC$
</example>
<p>
The next step is the compilation of the <prgn>BLAS</prgn> library

<p>
<example>
lapack-3.3.1/BLAS/SRC$ cd ../../
lapack-3.3.1$ make
.
.
.
make[1]: Leaving directory `/home/curro/1/lapack-3.3.1/BLAS/TESTING'
( cd BLAS; ./xblat3s < sblat3.in     ; \
	           ./xblat3d < dblat3.in     ; \
	           ./xblat3c < cblat3.in     ; \
	           ./xblat3z < zblat3.in     ) 
lapack-3.3.1$ ls *.a
blas_linux_gfortran.a  lapack_linux_gfortran.a  tmglib_linux_gfortran.a
</example>
<p>
The next step is to copy the compiled libraries to their final destination
<p>
<example>
lapack-3.3.1$ sudo mkdir /usr/local/lapack-3.3.1
[sudo] password for curro: 
lapack-3.3.1$ sudo cp *.a /usr/local/lapack-3.3.1/
</example>

<p>
We now proceed to compile and install the <prgn>LAPACK 95</prgn> library. This is where you should start if you are using the <prgn>BLAS</prgn> and <prgn>LAPACK</prgn> provided by the distribution. First we unpack the <prgn>LAPACK 95</prgn> tarball and edit the <file>make.inc</file> file.  A working example for <prgn>gfortran</prgn> is shown in <ref id="make_inc_95">.

<p>
<example>
$ tar xzf lapack95.tgz 
$ cd LAPACK95/
LAPACK95$ cd SRC
LAPACK95/SRC$ make single_double_complex_dcomplex
.
.
.
ranlib ../lapack95.a
rm -fr ../lapack95_modules
mkdir ../lapack95_modules
'cp' *.mod ../lapack95_modules/
rm -f f77_lapack.* f95_lapack.*
rm -f *_lapack_single_double_complex_dcomplex.o
LAPACK95/SRC$
</example>
<p>
The final step is to copy the libfile and modules to a convenient location.
<p>
<example>
LAPACK95$ sudo mkdir /usr/local/lib/lapack95
LAPACK95$ sudo cp -r lapack95.a lapack95_modules /usr/local/lapack95 
</example>
We include a program template invoking this library in <ref id="sec_prg_example"> and a <tt>makefile</tt> that can be used to compile this program in  <ref id="sec_makefile_example">.
<sect1 id="make_inc_77">  <tt>make.inc</tt> for <prgn>LAPACK</prgn> compilation
<p>
<example>
# -*- Makefile -*-
####################################################################
#  LAPACK make include file.                                       #
#  LAPACK, Version 3.3.1                                           #
#  April 2011                                                      #
####################################################################
#
# See the INSTALL/ directory for more examples.
#
SHELL = /bin/sh
#
#  The machine (platform) identifier to append to the library names
#
PLAT = _linux_gfortran
#  
#  Modify the FORTRAN and OPTS definitions to refer to the
#  compiler and desired compiler options for your machine.  NOOPT
#  refers to the compiler options desired when NO OPTIMIZATION is
#  selected.  Define LOADER and LOADOPTS to refer to the loader
#  and desired load options for your machine.
#
FORTRAN  = gfortran -O2 -m32
OPTS     =
DRVOPTS  = $(OPTS)
NOOPT    = -g -O0
LOADER   = gfortran -g
LOADOPTS =
#
# Timer for the SECOND and DSECND routines
#
# Default : SECOND and DSECND will use a call to the EXTERNAL FUNCTION ETIME
# TIMER    = EXT_ETIME
# For RS6K : SECOND and DSECND will use a call to the EXTERNAL FUNCTION ETIME_
# TIMER    = EXT_ETIME_
# For gfortran compiler: SECOND and DSECND will use a call to the INTERNAL FUNCTION ETIME
TIMER    = INT_ETIME
# If your Fortran compiler does not provide etime (like Nag Fortran Compiler, etc...)
# SECOND and DSECND will use a call to the Fortran standard INTERNAL FUNCTION CPU_TIME 
# TIMER    = INT_CPU_TIME
# If neither of this works...you can use the NONE value... In that case, SECOND and DSECND will always return 0
# TIMER     = NONE
#
#  The archiver and the flag(s) to use when building archive (library)
#  If you system has no ranlib, set RANLIB = echo.
#
ARCH     = ar
ARCHFLAGS= cr
RANLIB   = ranlib
#
#  The location of BLAS library for linking the testing programs.
#  The target's machine-specific, optimized BLAS library should be
#  used whenever possible.
#
BLASLIB      = ../../blas$(PLAT).a
#
#  Location of the extended-precision BLAS (XBLAS) Fortran library
#  used for building and testing extended-precision routines.  The
#  relevant routines will be compiled and XBLAS will be linked only if
#  USEXBLAS is defined.
#
# USEXBLAS    = Yes
XBLASLIB     =
# XBLASLIB    = -lxblas
#
#  Names of generated libraries.
#
LAPACKLIB    = lapack$(PLAT).a
TMGLIB       = tmglib$(PLAT).a
EIGSRCLIB    = eigsrc$(PLAT).a
LINSRCLIB    = linsrc$(PLAT).a
</example>
</sect1>
<sect1 id="make_inc_95">  <tt>make.inc</tt> for <prgn>LAPACK95</prgn> compilation
<p>
<example>
#
#  -- LAPACK95 interface driver routine (version 2.0) --
#     UNI-C, Denmark; Univ. of Tennessee, USA; NAG Ltd., UK
#     August 5, 2000
#
FC	 = gfortran 
FC1      = gfortran  
# -dcfuns  Enable recognition of non-standard double
#          precision  complex intrinsic functions
# -dusty   Allows the compilation and execution of "legacy"
#          software by downgrading the category  of  common
#          errors  found  in  such software from "Error" to
# -ieee=full enables all IEEE arithmetic facilities
#          including non-stop arithmetic.
OPTS0    = -O3
MODLIB   = -I./../lapack95_modules
OPTS1    = -c $(OPTS0)
OPTS3    = $(OPTS1) $(MODLIB)
OPTL     = -o 
OPTLIB   =

#LAPACK_PATH = /usr/local/lib/LAPACK3/

LAPACK95 = ../lapack95.a
LAPACK77 = -llapack
BLAS     = -lblas

LIBS     = $(LAPACK95) $(LAPACK77) $(BLAS)
SUF      = f90

XX = 'rm' -f $@; \
        'rm' -f $@.res; \
	$(FC) $(OPTS0) -o $@ $(MODLIB) $@.$(SUF) $(OPTLIB) $(LIBS); \
        $@ < $@.dat > $@.res; \
        'rm' -f $@

YY = $(FC) $(OPTS0) -o $@ $(MODLIB) $@.$(SUF) $(OPTLIB) $(LIBS)

.SUFFIXES: .f90 .f .o

.$(SUF).o: 
	$(FC) $(OPTS3) $<

.f.o:
	$(FC1) $(OPTS3) $<
</example>
</sect1>
<sect1 id="sec_prg_example">  Example of program using <prgn>LAPACK95</prgn>
  <p>
    This source should be saved in a file called <file>ejemplo_la_spsv.f90</file> to use the <tt>Makefile</tt> provided in n  <ref id="sec_makefile_example">.
    <p>
     
<example>
PROGRAM LA_SSPSV_EXAMPLE

  !  -- LAPACK95 EXAMPLE DRIVER ROUTINE (VERSION 1.0) --
  !
  !  .Use Statements
  USE LA_PRECISION, ONLY: WP => SP
  USE F95_LAPACK, ONLY: LA_SPSV
  !  Implicit Statement
  IMPLICIT NONE
  !  Local Scalars
  INTEGER :: I, N, NN, NRHS
  !  Local Arrays
  INTEGER, ALLOCATABLE :: IPIV(:)
  REAL(WP), ALLOCATABLE :: B(:,:), AP(:)
  !  Executable Statements
  WRITE (*,*) 'SSPSV Example Program Results.'
  N = 5; NRHS = 1
  WRITE(*,'(5H N = , I4, 9H; NRHS = , I4)') N, NRHS
  NN = N*(N+1)/2
  ALLOCATE ( AP(NN), B(N,NRHS), IPIV(N) )
  !
  CALL  RANDOM_NUMBER(AP)
  AP = 10*AP
  !
  WRITE(*,*)'Matrix AP :'
  DO I=1,NN; WRITE(*,"(15(I3,1X,1X),I3,1X)") INT(AP(I));
  ENDDO
  !
  WRITE(*,*)'Matrix B :'
  CALL  RANDOM_NUMBER(B)
  B = 10*B
  DO I=1,N; WRITE(*,"(10(I3,1X,1X),I3,1X)") INT(B(I,1));
  ENDDO
  !
  WRITE(*,*)" CALL LA_SPSV( AP, B, 'L', IPIV )"
  !
  CALL LA_SPSV( AP, B, 'L', IPIV )
  !
  WRITE(*,*)'AP on exit: '
  DO I=1,NN; WRITE(*,"(15(E13.5))") AP(I); 
  ENDDO
  !
  WRITE(*,*)'Matrix B on exit :'
  DO I=1,N; WRITE(*,"(F9.5)") B(I,1);
  ENDDO
  !
  WRITE(*,*)'IPIV = ', IPIV
  !
END PROGRAM LA_SSPSV_EXAMPLE
</example>
</sect1>
<sect1 id="sec_makefile_example">  <tt>makefile</tt> for compiling programs with calls to <prgn>LAPACK95</prgn>
<p>
<example>
#
#  -- LAPACK95 makefile (version 1.0) --
#
FC	 = gfortran
#
MODLIB   = -I/usr/local/lib/lapack95_modules
OPTS1    = -c
OPTS3    = $(OPTS1) $(MODLIB)
OPTL     = -o 
OPTLIB   = -lblas -llapack

LAPACK_PATH = /usr/local/lib
LAPACK95_PATH = /usr/local/lib

LAPACK95 = $(LAPACK95_PATH)/lapack95.a

LIBS     = $(LAPACK95)
SUF      = f90

YY = $(FC) -o $@ $(MODLIB) $@.$(SUF) $(OPTLIB) $(LIBS)

.SUFFIXES: .f90 .f .o

.$(SUF).o: 
	$(FC) $(OPTS3) $<

ejemplo_la_spsv: 
	$(YY)

clean:
	'rm' -f *.o *.mod core 
</example>
</sect1>

</sect>

<sect id="sec_07">Compile and link statically with <prgn>NAG</prgn>
  and <prgn>LAPACK</prgn>

<p> It is important to be able to compile and link statically programs
  when libraries are not available in all nodes. This is the case with
  the <prgn>NAG</prgn> library which is not compatible
  with <prgn>gfortran</prgn>, the only <prgn>Fortran</prgn> compiler
  in <prgn>Debian Lenny</prgn>. The program statically linked in one
  node (where <prgn>Etch</prgn> is installed and <prgn>g77</prgn> is
  available can the be executed in any other node. 

<p> An example of compilation is the following

<p>
<example> 
g77 -static -o infsq_box_1D  infsq_box_1D.f ../Potentials/wsaxon_Box_pot.f -L /usr/lib/atlas -L/usr/local2/NAG -lnag  -llapack -lblas-3
</example> 

<p>Some important points:

<enumlist>  
<item> It is necessary to include both <prgn>Lapack</prgn>
  and <prgn>Blas</prgn> libraries.
<item> The <prgn>Blas</prgn> library should be <tt>blas-3</tt>.
<item> The use of standard <prgn>Lapack</prgn> and <prgn>Blas</prgn>
  libraries give an error due to the different sizes of object
  files. Something like 
<p>
<example> 
(xerbla.o): In function `xerbla_': multiple definition of `xerbla_'
/usr/lib/liblapack.a(xerbla.o): first defined here
/usr/bin/ld: Warning: size of symbol `xerbla_' changed from 86
in /usr/lib/liblapack.a(xerbla.o) to 38
in /usr/lib/libblas.a(xerbla.o)
collect2: ld returned 1 exit status
</example> 
<p>
This is a known bug and can be solved using the libraries provided
with the <prgn>Atlas</prgn> packages and adding the corresponding path
to the compilation: <tt>-L /usr/lib/atlas</tt>.
<item> The order of the libraries is not irrelevant. In particular I
  found that <tt>lapack</tt> has to be invoked prior to <tt>blas-3</tt>.
</enumlist>  


</sect>
<sect id="sec_cpp_gfortran">Creating a <file>Makefile</file>
  to use <prgn>cpp</prgn> with <prgn>gfortran</prgn>

<p>
Added on November 09th, 2015.

<p>
There is a way of using the C language preprocessor, <prgn>cpp</prgn>,
with gfortran. In this way we can communicate
via <file>Makefile</file> with our program. Let's assume that we have
a <prgn>Fortran 90</prgn> program to compute two normally distributed
set of random numbers that use the Box-Muller transform. The program
is called <file>box_muller.f90</file> and we also compute the mean,
median and standard variance of the resulting distributions using a
subroutine called <file>stats.f90</file><footnote>Please, note that the
subroutine is not optimized and could take a long time for a large
number of data due to an inefficient sort algorithm.</footnote>. The
<prgn>FORTRAN 90</prgn> codes are provided in <ref id="ref_f90_codes_Makefile">.


<p>
The <file>Makefile</file> used for compilation is
<p>
<example> 
# Fortran Compiler
FC=gfortran
#
# C Preprocessor
CPP=cpp
#
TYPE_DEF=-DPREC=DP 
ifdef USE_SINGLE
TYPE_DEF = -DPREC=SP 
endif
#
# Optimization Flags
OPTFLAGS = -O3 -funroll-loops -march=native
OPTFLAGS_P = "\"-O3 -funroll-loops -march=native\""
#
all: box_muller
#
.FORCE:
#
box_muller: box_muller.f90 stats.f90 .FORCE
	$(CPP)  -std=c89 $(TYPE_DEF) -DFLAGS=$(OPTFLAGS_P) $< > /tmp/$<
	$(CPP)  -std=c89 $(TYPE_DEF)  stats.f90 > /tmp/stats.f90
	$(FC) $(OPTFLAGS) -o $@ /tmp/stats.f90 /tmp/$< 
	rm /tmp/stats.f90 /tmp/$<
#
clean:
	rm -f *.o box_muller
</example> 
<p>
Note how <prgn>cpp</prgn> is called twice, once for each file and
the <tt>PREC</tt> string are replaced either by <tt>DP</tt>
or <tt>SP</tt>, the last case if the option <tt>USE_SINGLE</tt> is
set. In the main program the string <tt>FLAGS</tt> is replaced by the
contents of the variable <tt>OPTFLAGS_P</tt> to print the compilation
flags used. Thus to run the program in single precision the user
proceed as follows
<p>
<example> 
$ make all USE_SINGLE=1
cpp  -std=c89 -DPREC=SP  -DFLAGS="\"-O3 -funroll-loops -march=native\"" box_muller.f90 > /tmp/box_muller.f90
cpp  -std=c89 -DPREC=SP   stats.f90 > /tmp/stats.f90
gfortran -O3 -funroll-loops -march=native -o box_muller /tmp/stats.f90 /tmp/box_muller.f90 
rm /tmp/stats.f90 /tmp/box_muller.f90
$ ./box_muller 
10000
 Time Box Muller subroutine :   4.00000019E-03
  MEAN =   -7.31508713E-03
  STANDARD DEVIATION =   0.995381057    
  MEDIAN IS =    1.01202750E-04
 Time STATS subroutine 1:  0.100005999    
  MEAN =    2.96602229E-04
  STANDARD DEVIATION =   0.999957144    
  MEDIAN IS =    1.29099786E-02
 Time STATS subroutine 2:  0.100006007    
 KIND = SINGLE ;  Optimization Flags: -O3 -funroll-loops -march=native
</example> 


<sect1 id="ref_f90_codes_Makefile"><heading>Fortran Codes</heading> 
<p>
Main program: <file>box_muller.f90</file>
<p>
<example> 
PROGRAM Box_Muller_Prog
  !
  IMPLICIT NONE
  !
  ! Single and double precision kind parameters
  INTEGER, PARAMETER :: SP = KIND(1.0)
  INTEGER, PARAMETER :: DP = KIND(1.0D0)
  !
  INTEGER :: I, IERR
  REAL(KIND = PREC), DIMENSION(:), ALLOCATABLE :: X, Y
  REAL(KIND = PREC) :: M, SD, MEDIAN
  REAL(KIND = SP) :: time_end, time_start
  !
  !
  CHARACTER(LEN = 6) :: PRECISION 
  !
  ! interface block   
  INTERFACE
     SUBROUTINE STATS(VECTOR,N,MEAN,STD_DEV,MEDIAN)
       IMPLICIT NONE
       ! Single and double precision kind parameters
       INTEGER, PARAMETER :: SP = KIND(1.0)
       INTEGER, PARAMETER :: DP = KIND(1.0D0)
       INTEGER , INTENT(IN)                    ::  N
       REAL(KIND = PREC)      , INTENT(IN) , DIMENSION(:)   :: VECTOR  
       REAL(KIND = PREC)      , INTENT(OUT)                 :: MEAN
       REAL(KIND = PREC)      , INTENT(OUT)                 :: STD_DEV
       REAL(KIND = PREC)      , INTENT(OUT)                 :: MEDIAN
     END SUBROUTINE STATS
  END INTERFACE
  !
  ! Set Precision for output
  IF (PREC == DP) THEN
     PRECISION = "DOUBLE"
  ELSE
     PRECISION = "SINGLE"
  ENDIF
  !
  ! Input number of data
  READ*, I  
  !
  ALLOCATE(X(1:I), STAT = IERR)    
  IF (IERR /= 0) THEN
     PRINT*, "X allocation request denied."
     STOP
  ENDIF
  !
  ALLOCATE(Y(1:I), STAT = IERR)    
  IF (IERR /= 0) THEN
     PRINT*, "Y allocation request denied."
     STOP
  ENDIF
  !
  ! Set time start
  CALL CPU_TIME(time_start)
  !
  CALL BOX_MULLER(I)
  !
  ! Set time end
  CALL CPU_TIME(time_end)
  !
  !PRINT*, X
  !PRINT*, Y
  !
  PRINT*, "Time Box Muller subroutine :", time_end - time_start
  time_start = time_end
  !
  CALL STATS(X,I,M,SD,MEDIAN)
  !
  PRINT *,' MEAN = ',M
  PRINT *,' STANDARD DEVIATION = ',SD
  PRINT *,' MEDIAN IS = ',MEDIAN
  !
  ! Set time end
  CALL CPU_TIME(time_end)
  !
  PRINT*, "Time STATS subroutine 1:", time_end - time_start
  time_start = time_end
  !
  IF (ALLOCATED(X)) DEALLOCATE(X, STAT = IERR) 
  IF (IERR /= 0) THEN
     PRINT*, "X NON DEALLOCATED!"
     STOP
  ENDIF
  !
  CALL STATS(Y,I,M,SD,MEDIAN)
  !
  !
  PRINT *,' MEAN = ',M
  PRINT *,' STANDARD DEVIATION = ',SD
  PRINT *,' MEDIAN IS = ',MEDIAN
  !
  ! Set time end
  CALL CPU_TIME(time_end)
  !
  PRINT*, "Time STATS subroutine 2:", time_end - time_start
  time_start = time_end
  !
  IF (ALLOCATED(Y)) DEALLOCATE(Y, STAT = IERR)   
  IF (IERR /= 0) THEN
     PRINT*, "Y NON DEALLOCATED!"
     STOP
  ENDIF
  !
  PRINT*, "KIND = ", PRECISION, " ;  Optimization Flags: ", FLAGS 
  !
CONTAINS
  !
  SUBROUTINE BOX_MULLER(dim)
    ! 
    ! Uses the Box-Muller method to create two normally distributed vectors
    !
    INTEGER, INTENT(IN) :: dim
    !
    REAL(KIND = PREC), PARAMETER :: PI = ACOS(-1.0)
    REAL(KIND = PREC), DIMENSION(dim) :: RANDOM_u, RANDOM_v ! Automatic arrays
    !
    CALL RANDOM_NUMBER(RANDOM_u)
    CALL RANDOM_NUMBER(RANDOM_v)
    !
    X = SQRT(-2.0_ PREC*LOG(RANDOM_u))
    Y = X*SIN(2*PI*RANDOM_v)
    X = X*COS(2*PI*RANDOM_v)
    !
  END SUBROUTINE BOX_MULLER
  !
END PROGRAM Box_Muller_Prog

</example> 
<p>
Subroutine: <file>stats.f90</file>
<p>
<example> 
SUBROUTINE STATS(VECTOR,N,MEAN,STD_DEV,MEDIAN)
  IMPLICIT NONE
  ! Single and double precision kind parameters
  INTEGER, PARAMETER :: SP = KIND(1.0)
  INTEGER, PARAMETER :: DP = KIND(1.0D0)
  ! Argument definition
  INTEGER , INTENT(IN)                    ::  N
  REAL(KIND = PREC)      , INTENT(IN) , DIMENSION(:)    ::  VECTOR   
  REAL(KIND = PREC)      , INTENT(OUT)                  ::  MEAN
  REAL(KIND = PREC)      , INTENT(OUT)                  ::  STD_DEV
  REAL(KIND = PREC)      , INTENT(OUT)                  ::  MEDIAN
  ! Local variables
  REAL(KIND = PREC) :: VARIANCE = 0.0
  REAL(KIND = PREC)      :: SUMXI = 0.0, SUMXI2 = 0.0
  REAL(KIND = PREC)      , DIMENSION(1:N)              ::  Y
  !
  SUMXI=SUM(VECTOR)      
  SUMXI2=SUM(VECTOR*VECTOR) 
  MEAN=SUMXI/N       
  VARIANCE=(SUMXI2-SUMXI*SUMXI/N)/(N-1)
  STD_DEV = SQRT(VARIANCE)
  Y=VECTOR
  ! Sort values
  CALL SELECTION
  IF (MOD(N,2) == 0) THEN
     MEDIAN=(Y(N/2)+Y((N/2)+1))/2
  ELSE
     MEDIAN=Y((N/2)+1)
  ENDIF
CONTAINS   
  SUBROUTINE SELECTION
    IMPLICIT NONE
    INTEGER :: I,J,K
    REAL :: MINIMUM
    DO I=1,N-1
       K=I
       MINIMUM=Y(I)
       DO J=I+1,N
          IF (Y(J) < MINIMUM) THEN
             K=J
             MINIMUM=Y(K)
          END IF
       END DO
       Y(K)=Y(I)
       Y(I)=MINIMUM
    END DO
  END SUBROUTINE SELECTION
END SUBROUTINE STATS

</example> 
</sect1>


<sect1 id="ref_Makefile"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="https://stackoverflow.com/questions/31649691/stringify-macro-with-gnu-gfortran/31753386#31753386"
name="StackOverflow">
</enumlist>  
</sect1>


</sect>

<sect id="sec_fortran_envvar"><heading>Obtaining environment variables values from <prgn>Fortran</prgn> </heading> 
<p>
Created on March 9th, 2018
<p>
  With the <tt>gfortran</tt> compiler the intrinsic procedure <tt>GET_ENVIRONMENT_VARIABLE</tt> allows the reading of environment variables such as <tt>hostname</tt>, <tt>username</tt>, or <tt></tt>. The syntax for this procedure is
  <p>
    <example>
      CALL GET_ENVIRONMENT_VARIABLE(NAME[, VALUE, LENGTH, STATUS, TRIM_NAME])
    </example>
    <p>
      This procedure replaces the now deprecated <tt>GETENV</tt> procedure.  In the next program we use this subroutine to get values of the environment variables <tt>HOSTNAME</tt>, <tt>USER</tt>, and <tt>HOME</tt>. Note that unless the user has exported this variable  <tt>HOSTNAME</tt> reading may fail. We also use  the intrinsic procedure <tt>GETPID</tt> to obtain the process <tt>PID</tt> number.
  <p>
    <example>
PROGRAM GET_ENV
  !                                           
  IMPLICIT NONE
  !
  INTEGER :: ivar = 0, len, stat, pid
  CHARACTER(LEN=256) :: home, host, user
  !
  ! Hostname variable
  CALL GET_ENVIRONMENT_VARIABLE('HOSTNAME', host, len, stat)
  IF (stat == 0) THEN
     PRINT*, "Hostname read: ", TRIM(host)
  ELSE
     PRINT*, "Hostname read failed: stat = ", stat
  ENDIF
  !
  ! Username variable
  CALL GET_ENVIRONMENT_VARIABLE('USER', user, len, stat)
  IF (stat == 0) print*, "Username read: ", TRIM(user)
  !
  ! Homedir variable
  CALL GET_ENVIRONMENT_VARIABLE('HOME', home, len, stat)
  IF (stat == 0) THEN
     PRINT*, "Homedir read: ", TRIM(home)
  ELSE
     PRINT*, "Homedir read failed: stat = ", stat
  ENDIF
  !
  ! Process ID
  pid = GETPID()
  PRINT*, "Process ID: ", pid
  !
END PROGRAM GET_ENV
    </example> 
    <p>
A possible output of the previous code is
  <p>
    <example>
$ ./get_env_gfortran 
 Hostname read failed: stat =            1
 Username read: bilbo
 Homedir read: /home/bilbo
 Process ID:         5614
    </example> 
</sect>

<sect id="sec_fortran_random"><heading>Creating a vector of random data </heading> 
<p>
Created on March 8th, 2018
<p>
  The best way to deal with random numbers with <prgn>gfortran</prgn> is making use of the intrinsic procedures <tt>RANDOM_NUMBER</tt> and <tt>RANDOM_SEED</tt>. Note that <tt>RAN</tt> and <tt>RAND</tt> procedures have been deprecated. From the <prgn>gfortran</prgn> documentation:
  <p>
    <example>
      Returns a single pseudorandom number or an array of pseudorandom numbers from the uniform distribution over the range 0 \leq x \le 1.
    </example> 
    <p>
      Therefore the creation of a vector with, e.g. 100 random integers in the <tt>0-99</tt> range should be accomplished with a simple program as this one
  <p>
    <example>
PROGRAM RANDOM_VECTOR
  IMPLICIT NONE
  REAL, DIMENSION(1:100) :: REAL_RAND_VALUES
  INTEGER, DIMENSION(1:100) :: INT_RAND_VALUES
  INTEGER :: INDEX
  !
  CALL RANDOM_NUMBER(REAL_RAND_VALUES)
  !
  INT_RAND_VALUES = NINT(REAL_RAND_VALUES*100)
  !
  DO INDEX = 1, 100
     PRINT*, INDEX, INT_RAND_VALUES(INDEX)
  ENDDO
  !
END PROGRAM RANDOM_VECTOR
    </example> 
    <p>
      And everything seems pretty okay until we run several times the program and observe that our random number vector always have the same values... Surprise...
  <p>
    <example>
           1         100
           2          57
           3          97
          ..............
          98          11
          99          22
         100          10
    </example> 
    <p>
      The problem is that  <tt>RANDOM_NUMBER</tt> provides a  sequence of pseudorandom values. If it starts the sequence from the same point, it gives you always the same sequence. We need to chose a different starting point every time that we use the procedure. This can be done using  <tt>RANDOM_SEED</tt> and providing a particular value to this procedure, e.g. the process <tt>PID</tt>.  This is done in the code that follows
  <p>
    <example>
PROGRAM RANDOM_VECTOR
  IMPLICIT NONE
  REAL, DIMENSION(1:100) :: REAL_RAND_VALUES
  INTEGER, DIMENSION(1:100) :: INT_RAND_VALUES
  INTEGER, DIMENSION(:), ALLOCATABLE :: pid
  INTEGER :: index, size=1
  !
  ! Get minimum size of the PUT array for RANDOM_SEED
  CALL RANDOM_SEED(SIZE=size)
  !
  ! Allocate and give values to pid array
  ALLOCATE(pid(1:size))
  pid = GETPID() 
  !
  ! Restart random seed
  CALL RANDOM_SEED(PUT=pid)
  !
  ! Generate random vector
  CALL RANDOM_NUMBER(REAL_RAND_VALUES)
  !
  ! Transform to integers
  INT_RAND_VALUES = NINT(REAL_RAND_VALUES*100)
  !
  DO index = 1, 100
     PRINT*, index, INT_RAND_VALUES(index)
  ENDDO
  !
END PROGRAM RANDOM_VECTOR
</example>
      
</sect>
<sect id="sec_fortran_maxl"><heading>Obtaining the values and positions of the larger values in an array </heading> 
<p>
Created on July 30th, 2018
<p>
  We use the random vector building method of  <ref id="sec_fortran_random">  to build an array of random values and then show how to obtain the indexes and values of the largest elements in each row or column of the array. In order to do so we use the intrinsic procedures <tt>MAXVAL</tt> and <tt>MAXLOC</tt>.
    <p>
      Therefore we first create a two dimensional array with 100 random integers in the <tt>0-1</tt> range, display the array and then calculate the maximum values and its index in a column-wise and a row-wise way.
  <p>
    <example>
PROGRAM MAXIMA_VALUES_POSITIONS
  IMPLICIT NONE
  INTEGER, PARAMETER :: dim = 10
  REAL, DIMENSION(1:dim,1:dim) :: ARRAY_VALUES
  REAL, DIMENSION(1:dim) :: MAX_VALUES
  INTEGER, DIMENSION(1:dim) :: MAX_INDEX
  INTEGER, DIMENSION(:), ALLOCATABLE :: pid
  INTEGER :: index, size=1
  !
  ! Get minimum size of the PUT array for RANDOM_SEED
  CALL RANDOM_SEED(SIZE=size)
  !
  ! Allocate and give values to pid array
  ALLOCATE(pid(1:size))
  pid = GETPID() 
  !
  ! Restart random seed
  CALL RANDOM_SEED(PUT=pid)
  !
  ! Generate random vector
  CALL RANDOM_NUMBER(ARRAY_VALUES)
  !
  ! Display array
  DO index = 1, dim
     PRINT 10, index, ARRAY_VALUES(index,:)
  ENDDO
  !
  !
  PRINT*
  !
  !
  PRINT*, 'MAXIMUM COLUMN-WISE VALUES'
  MAX_VALUES = MAXVAL(ARRAY_VALUES, 1)
  MAX_INDEX = MAXLOC(ARRAY_VALUES,1)
  DO index = 1, dim
     PRINT 20, index, MAX_INDEX(index), MAX_VALUES(index)
  ENDDO
  !
  PRINT*
  !
  PRINT*, 'MAXIMUM ROW-WISE VALUES'
  MAX_VALUES = MAXVAL(ARRAY_VALUES, 2)
  MAX_INDEX = MAXLOC(ARRAY_VALUES, 2)
  DO index = 1, dim
     PRINT 20, index, MAX_INDEX(index), MAX_VALUES(index)
  ENDDO
  !
10 FORMAT(1X, I2, 1X, *(F6.4, 1X)) ! Note the * in the format statement for variable number of fields
  !
20 FORMAT(2X, I2, 1X, I2, 2X, F6.4)
END PROGRAM MAXIMA_VALUES_POSITIONS
    </example> 
    <p>
      Notice that if the second argument to the procedures is one the array is sliced column-wise and if it is two it is sliced row wise. There are analogous procedures for minimum values with the intrinsics <tt>MINVAL</tt> and  <tt>MINLOC</tt>.
      
</sect>
<sect id="sec_fortran_makefile"><heading>Tips for building a  <prgn>Fortran</prgn> <file>Makefile</file></heading> 
<p>
Created on March 20th, 2018
<p>
  I enclose a template of a <tt>Fortran 90</tt> <file>Makefile</file> that solves some common problems that appear when using the <prgn>make</prgn> application with this programming language. Let's assume that we have a program file called <file>prog_main.f90</file> that depends on two module files, <file>module_a.f90</file> and <file>module_b.f90</file>. And we want to use the preprocessor and to build single thread and multithread execs making use of openmp. The template <file>Makefile</file> is as follows:
  <p>
    <example>
BINPATH = ../bin/
###################################################
prog_SRC = module_a.f90 module_b.f90 prog_main.f90 
#
prog_OBJ = $(prog_SRC:.f90=.o)
#
prog_OPENMP_OBJ = $(prog_SRC:.f90=.oOMP)
###################################################
#
.SUFFIXES:
.SUFFIXES: .o .f90 .oOMP
###
FC = gfortran
FOPT	= -O3 -Wall
PREP = -cpp
#
MODLIB   = -I/usr/local/include/lapack95_modules
LAPACK95 = -L/usr/local/lib -llapack95
LAPACK77 = -llapack
BLAS     = -lblas
# 
LIBS     = $(LAPACK95)  $(LAPACK77) $(BLAS) 
###################################################
all: prog prog_openmp 
###################################################
.PHONY : all
###################################################
.f90.o:
	$(info )
	$(info Compiling single thread object file:)
	$(FC) -c $(PREP) $(MODLIB)  "$<"
###################################################
.f90.oOMP:
	$(info )
	$(info Compiling multi thread object file:)
	$(FC) -c -fopenmp $(PREP) $(MODLIB)  -o "$@" "$<"
###################################################
prog: $(prog_OBJ) Makefile 
	$(info )
	$(info Linking prog single thread executable:)
	$(FC) $(FOPT) $(MODLIB) -o $(BINPATH)/$@_$(FC) $(prog_OBJ) $(LIBS) 
#######################
prog_openmp: $(prog_OPENMP_OBJ) Makefile 
	$(info )
	$(info Linking prog multithread executable:)
	$(FC) -fopenmp $(FOPT) $(MODLIB) -o $(BINPATH)/$@_$(FC) $(prog_OPENMP_OBJ) $(LIBS) 
#######################
clean:
	$(info Cleaning object, module, and executable files.)
	@rm -f  *.o *.oOMP *.mod $(BINPATH)/prog_$(FC) $(BINPATH)/prog_openmp_$(FC)
#######################
    </example> 
    <p>
      Notice, for example, the empty <tt>SUFFIXES</tt> line, as it resets the predefined suffixes to avoid dependency problems associated with the <tt>.mod</tt> module files. The executable files are called <file>prog_gfortran</file> and <file>prog_openmp_gfortran</file> and are stored in the folder defined by the <var>BINPATH</var> variable.
      
</sect>

<chapt id="cap_python"><heading>Python Tips and Templates</heading>
<sect id="sec_python_random"><heading>Creating a vector of random data </heading> 
<p>
Created on April 12th, 2015.
<p>
  The following snippet of <prgn>Ipython</prgn> code computes a vector, called <var>vectorn</var>, with 10 elements of normally distributed random data 
<p>
<example>
import numpy as np

np.random.randn(10)
Out[2]: 
array([-0.20490308, -0.39783301, -0.6802615 , -0.57939922, -0.10054472,
       -0.20376277, -1.48068811,  0.98628113, -0.79514919, -0.09896364])

vectorn = np.random.randn(200)
</example>

</sect>

<sect id="sec_python_boolvec"><heading>Logical comparison between two
    boolean vectors </heading> 
<p>
Created on May 06th, 2015.
<p>
  The following snippet of <prgn>Ipython</prgn> code defines two
  vector, called <var>vectorA</var> and <var>vectorB</var>, with 20
  elements of normally distributed random data each and, using
  the <prgn>NumPy</prgn> function <tt>logical_and</tt> check the
  occurrences where the corresponding elements of the two vectors are
  larger than zero
<p>
<example>
import numpy as np

vectorA = np.random.randn(20)
vectorB = np.random.randn(20)

boolvec = np.logical_and(vectorA > 0, vectorB > 0)

vectorA[boolvec]
Out[47]: array([ 0.39058535,  1.0062992 ])

vectorB[boolvec]
Out[48]: array([ 0.87795544,  0.59063525])
</example>

</sect>

<sect id="sec_python_interval"><heading>Creating a loop iterating on a list and the list index </heading> 
<p>
Created on April 16th, 2015.
<p>
  The following snippet of <prgn>Ipython</prgn> code uses as a starting point a a vector, called <var>vn</var>, with 10 elements of uniformly distributed random data in the interval $[0,1)$ and in a loop, using as iterator a pair <var>index, value</var>, we build a symmetric matrix <var>A</var> such that <var>A_ij = vn_i*vn_j</var>. 
<p>
<example>
import numpy as np
##
vn = np.random.rand(20)
##
A_matrix = np.zeros((20,20))
##
for i, ival in enumerate(vn):
    for j, jval in enumerate(vn):
        A_matrix[i,j] = ival*jval
</example>

<p>
It can be easily optimized not computing the full matrix but the upper or lower diagonal and adding to its transpose (beware of double counting diagonal elements).
</sect>

<sect id="sec_python_addframecol"><heading>Adding a column to a  <prgn>Pandas</prgn> dataframe</heading> 
<p>
Created on April 21st, 2015.
<p>
If we have a <prgn>Pandas</prgn> dataframe for example, the following
one, called <tt>df0</tt>
<p>
<example>
import numpy as np
import pandas as pd

vectorn = np.random.rand(20)
df0 = pd.DataFrame(data=vectorn, columns = ["s0"])

</example>
<p>
We can now add a second column of random data using the <tt>pd.Series</tt> command;
the column is labeled <tt>s1</tt>
<p>
<example>
vectors = np.random.rand(20)
df0["s1"] = Series(data=vectors, index = index.df0)

</example>

</sect>

<sect id="sec_python_maxindex"><heading>Getting the maximum component of a vector and its index in <prgn>numpy</prgn> </heading> 
<p>
Created on April 12th, 2015.
<p>
  The following snippet of <prgn>Ipython</prgn> code computes a vector, called <var>vectorn</var>, with 200 elements of uniformly distributed random data in the interval $[0,1)$. 
<p>
<example>
import numpy as np

vectorn = np.random.rand(200)

max_val, max_index = vectoru.max(), vectoru.argmax()

max_val
Out[87]: 0.99652709220203461

max_index
Out[88]: 117


</example>

</sect>

<sect id="sec_python_tzone"><heading>Some easy examples of
    offset-aware times with <prgn>pytz</prgn> </heading> 
<p>
Created on May 13th, 2015.
<p>
Dealing with timezones and the associated DST (daylight saving times)
can cause a more than serious headache. Here we have some (very limited) examples
of their use.
<p>
Let's assume that we have two strings: <tt>stdate1 = "20/03/2015 12:22"</tt>
and <tt>stdate1 = "23/03/2015 22:22"</tt> and we want to parse them to
a <tt>datetime</tt> object. This is done as follows:
<p>
<example>
from dateutil.parser import parse
stdate1 = "20/03/2015 12:22"
stdate2 = "23/03/2015 22:22"

date1 = parse(stdate1, dayfirst=True)

date2 = parse(stdate2, dayfirst=True)

date1
Out[6]: datetime.datetime(2015, 3, 20, 12, 22)

date2
Out[7]: datetime.datetime(2015, 3, 23, 22, 22)

date2-date1
Out[8]: datetime.timedelta(3, 36000)
</example>
<p>
At this point we have offset-naive times. If we want to transform to a
given time zone, e.g. <tt>CET</tt> then we use
<p>
<example>
import pytz

cet_tz = pytz.timezone("CET") 

cet_date1 = cet_tz.normalize(cet_tz.localize(date1))
cet_date2 = cet_tz.normalize(cet_tz.localize(date2))

cet_date1
Out[12]: datetime.datetime(2015, 3, 20, 12, 22, tzinfo=&lt;DstTzInfo 'CET' CET+1:00:00 STD&gt;)

cet_date2-cet_date1
Out[14]: datetime.timedelta(3, 36000)
</example>
<p>
We can now transform these time data to <tt>UTC</tt>
<p>
<example>
utc_tz = pytz.timezone('UTC')

utc_date1 = cet_date1.astimezone(utc_tz)
utc_date2 = cet_date2.astimezone(utc_tz)

utc_date2 - utc_date1
Out[22]: datetime.timedelta(3, 36000)
</example>
<p>
We can transform directly to <tt>UTC</tt> from the initially parsed
variables
<example>
UTC_date1 = utc_tz.normalize(utc_tz.localize(date1))

UTC_date1
Out[28]: datetime.datetime(2015, 3, 20, 12, 22, tzinfo=&lt;UTC&gt;)

UTC_date1 - utc_date1
Out[27]: datetime.timedelta(0, 3600)
</example>

<p>
These functions can be applied on lists using lambda functions.
</sect>

<sect id="sec_mplotlib_1"><heading>Creating a panel array of plots with <prgn>Matplotlib</prgn> </heading> 
<p>
Created on April 12th, 2015.
<p>
The following snippet of code uses a vector of length 200 with random normally distributed data (see  <ref id="sec_python_random">) and plot in four panels the data, their cumulative sum, a histogram with the data, and the sum of the data to a quadratic function.
<p>
<example>
import numpy as np
from matplotlib import pyplot

fig,axes = pyplot.subplots(2,2) # Define plot of 2x2 panels

axes[0,0].plot(vectorn,"k-o") 
Out[36]: [&lt;matplotlib.lines.Line2D at 0x7f827af2a510&gt;]

axes[0,1].plot(vectorn.cumsum(),"k--")
Out[37]: [&lt;matplotlib.lines.Line2D at 0x7f827af2a1d0&gt;]

axes[1,0].hist(vectorn,bins=30,color="r",alpha=0.3)
Out[38]: 
(array([  3.,   0.,   2.,   2.,   4.,   2.,   6.,   4.,  10.,  12.,   8.,
         10.,  13.,  14.,  16.,  14.,   9.,  10.,   9.,  13.,   8.,   5.,
          8.,   3.,   5.,   6.,   0.,   1.,   1.,   2.]),
 array([-2.41379287, -2.24330459, -2.0728163 , -1.90232801, -1.73183972,
        -1.56135143, -1.39086315, -1.22037486, -1.04988657, -0.87939828,
        -0.70891   , -0.53842171, -0.36793342, -0.19744513, -0.02695684,
         0.14353144,  0.31401973,  0.48450802,  0.65499631,  0.8254846 ,
         0.99597288,  1.16646117,  1.33694946,  1.50743775,  1.67792603,
         1.84841432,  2.01890261,  2.1893909 ,  2.35987919,  2.53036747,
         2.70085576]),
 &lt;a list of 30 Patch objects&gt;)

axes[1,1].scatter(np.arange(200),0.01*np.arange(200)**2+10*vectorn)
Out[39]: &lt;matplotlib.collections.PathCollection at 0x7f827aedae90&gt;

pyplot.show()
</example>

</sect>

<sect id="sec_mplotlib_2"><heading>Creating a panel array of plots with common axes using <prgn>Matplotlib</prgn> </heading> 
<p>
Created on April 12th, 2015.
<p>
The following snippet of code add different vectors of length 200 with random normally distributed data (see  <ref id="sec_python_random">) to a parabollic function (mimicking experimental errors in a object free fall) and plot the results in four panels, with common abscyssa and ordinate axes, and controlling the spacing between the panels.
<p>
<example>
import numpy as np
from matplotlib import pyplot

vectorn = np.random.randn(100)

result1 = 0.5*9.8*time_grid**2 + 2*vectorn

result2 = 0.5*9.8*time_grid**2 + 4*vectorn

result3 = 0.5*9.8*time_grid**2 + 8*vectorn

result4 = 0.5*9.8*time_grid**2 + 16*vectorn

fig,axes = pyplot.subplots(2,2,sharex=True,sharey=True)

axes[0,0].plot(result1,"k-o")
Out[85]: [&lt;matplotlib.lines.Line2D at 0x7f827aa7ae10&gt;]

axes[0,1].plot(result2,"k-o")
Out[86]: [&lt;matplotlib.lines.Line2D at 0x7f827aa7ae90&gt;]

axes[1,0].plot(result3,"k-o")
Out[87]: [&lt;matplotlib.lines.Line2D at 0x7f827aa7a4d0&gt;]

axes[1,1].plot(result4,"k-o")
Out[88]: [&lt;matplotlib.lines.Line2D at 0x7f827aaaff10&gt;]

pyplot.subplots_adjust(wspace=0,hspace=0)

pyplot.show()
</example>

</sect>
<sect id="sec_mplotlib_3"><heading>Combining several plots in a figure </heading> 
<p>
Created on June 10th, 2015.
<p>
  The following snippet of <prgn>Ipython</prgn> code computes three
  vectors, called <var>vector1</var>, <var>vector2</var>,
  and <var>vector3</var>, with 100 elements of normally distributed
  random data with the same mean value (2) and different standard
  deviations (0.1, 0.2, and 0.4). We then plot the three vectors in a
  single graph controlling the line styles and labels and ticks font sizes.
<p>
<example>
import numpy as np

meanval = 2
vector1 = np.random.normal(loc = meanval, scale = 0.2, size = 100)
vector2 = np.random.normal(loc = meanval, scale = 0.4, size = 100)
vector3 = np.random.normal(loc = meanval, scale = 0.8, size = 100)

ax = pyplot.subplot(111)

ax.plot(vector1,"o--b",lw=3)
ax.plot(vector2,"x:r",lw=2)
ax.plot(vector3,"g",lw=2)

ax.set_xlabel(r'X axis Label (a.u.)',fontsize=16)
ax.set_ylabel(r'Y axis Label $v_1, v_2, v_3$',fontsize = 16)
pyplot.setp(ax.get_xticklabels(), fontsize=14)
pyplot.setp(ax.get_yticklabels(), fontsize=14)
</example>

</sect>
<sect id="sec_python_dispall"><heading>Display in <prgn>Ipython</prgn>all the components of a
    <prgn>Pandas</prgn> <tt>Series</tt> or <tt>DataFrame</tt></heading> 
<p>
Created on January 29th, 2016.
<p>
  Working in <prgn>Ipython></prgn> only the head and tail
  of  <tt>Series</tt> or <tt>DataFrames</tt> data structures are
  displayed. In order to display the full contents
  of <tt>DataFrames</tt> named e.g. <tt>exp_vals_H2</tt> the following
  commands can be used. 
<p>
<example>
pd.set_option('display.max_rows', len(exp_vals_H2))
print(exp_vals_H2)
pd.reset_option('display.max_rows')
</example>
<p>
If this is repeatedly needed a function can be defined as follows
  <p>
<example>
def print_full(x):
    pd.set_option('display.max_rows', len(x))
    print(x)
    pd.reset_option('display.max_rows')
</example>


<sect1 id="ref_dispall"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://stackoverflow.com/questions/19124601/is-there-a-way-to-pretty-print-the-entire-pandas-series-dataframe"
name="Stack Exchange">
</enumlist>  
</sect1>

<sect id="sec_python_qtbuff"><heading>Changing the number of lines to scroll in an <prgn>Ipython qtconsole</prgn> session.
<p>
Created on April 3rd, 2018.
<p>
  Working in <prgn>Ipython qtconsole</prgn> the standard is that you can scroll up 500 lines. This number can be changed in some different ways (see references)
  but the simplest way may be in the program invocation. For example, to increase this number to 1000 lines one should execute:
  
  <p>
<example>
ipython qtconsole --IPythonWidget.buffer_size=1000
</example>


<sect1 id="ref_ipybuff"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="https://stackoverflow.com/questions/14720766/how-to-increase-the-ipython-qtconsole-scrollback-buffer-limit"
name="Stack Exchange Ipython Qtconsole Buffer Limit">
</enumlist>  
</sect1>


<chapt id="cap_4"><heading>Text Processing and Formatting</heading>
  <p>
    <em>Translations of this chapter:</em>
  <p>
    You can find a <url id="http://www.katrinastillstanding.com/how-to-gnu-linux/" name="translation into Ukranian"> by Kate Belevets of  <url id="https://ohmyessay.com/" name="OhMyEssay.com">.
  <p>
    You can find a translation to French by Maxwell Edward in <url id="https://fateknoloji.com/perez/"
name="this link">.
  <p>
    You can find a translation to Hindi by Mahesh Varma in <url id="https://dealsdaddy.co.uk/translations/textprocessingformatting/"
name="this link">.
<sect id="sec_411"><heading><prgn>pdftk</prgn> application examples</heading> 
<p>
Updated on April 18th, 2017.
<p>
Updated on December 1st, 2011.
<p>
We present several examples of transforming <tt>PDF</tt> files using
the program <prgn>pdftk</prgn>, a powerful and simple application to
work with <tt>PDF</tt> files.

<enumlist> 
<item> Removing pages. If we have a file named <file>text.pdf</file>
  with ten pages, the following commands transform the file removing
  certain pages and saving the transformed output in file <file>out_text.pdf</file>:
<list> 
<item> Remove first two pages:
<p>
<example> 
$ pdftk text.pdf cat 3-10 output out_text.pdf
</example>
<item> Remove pages 2, 3, and 6:
<p>
<example> 
$ pdftk text.pdf cat 1 4-5 7-10 output out_text.pdf
</example>
<item> Merge <tt>PDF</tt> files.
<p>
<example> 
$ pdftk 1.pdf 2.pdf 3.pdf 4.pdf cat output file1234.pdf
</example>
<p>This command merges four files into a final
 file <tt>file1234.pdf</tt>. 
<item> Split the pdf file into pages. If you want to create a
  pdf including only the first page of file <tt>jpcA.pdf</tt>

<p>
<example> 
pdftk jpcA.pdf cat 1 output jpcA_p1.pdf
</example>

<p> In case you want to extract pages 1 to 3, leave out pages 4 and 5,
  and include the rest of the pages you can execute

<p>
<example> 
pdftk jpcA.pdf cat 1-3 6-end output jpcA_partial.pdf
</example>

<item> If you want to extract all the pages of a pdf document in separate
  files you can use the <tt>burst</tt> option. If the
  file <file>document_A.pdf</file> has 8 pages the command

<p>
<example> 
pdftk document_A.pdf burst output document_A_page_%01d.pdf
</example>

<p> creates files <file>document_A_page_1.pdf</file>
  ... <file>document_A_page_8.pdf</file>.

<item> If you want to include a pdf file amid the pages of another pdf
  document, e.g. we want to include 
  file <file>document_small.pdf</file> after page 8 of
  file  <file>document_big.pdf</file> and save the final result into a
  file called <file>document.pdf</file>, we can do this as follows

<p>
<example> 
pdftk A=document_big.pdf B=document_small.pdf cat A1-8 B A9-end output document.pdf
</example>

<item> (To Do) Decrypt input or encrypt output.
<item> (To Do) Generate FDF data stencil from
  PDF forms.
<item> (To do) Apply a background watermark or a foreground stamp.
</list> 
</enumlist> 

</sect>

<sect id="sec_41"><heading>Merge two <tt>PostScript</tt>
    or <tt>PDF</tt> files</heading> 
<p>
Updated on December 1st, 2011.

<p>
We explain an alternative way to merge <tt>PDF</tt> files, to avoid
using <prgn>pdftk</prgn>. This is also applicable
to <tt>PostScript</tt> files.


<p>You can also merge two <tt>PostScript</tt> or <tt>PDF</tt> files using <prgn>gs</prgn>
<example> 
$gs -q -dNOPAUSE -dBATCH -sDEVICE=pswrite \
       -sOutputFile=<var>bla.ps</var> -f <var>foo1.ps foo2.ps</var>
 
$gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite \
       -sOutputFile=<var>bla.pdf</var> -f <var>foo1.pdf foo2.pdf</var>
</example>

<sect1 id="ref_mergepdf"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://qref.sourceforge.net/Debian/reference/ch-tips.en.html#s8.6.24"
name="Debian Reference Guide">
</enumlist>  
</sect1>

</sect>


<sect id="sec_42"><heading>Include <em>et al.</em> in <prgn>bibtex</prgn></heading> 

<p>You can include the term <em>et al.</em> to replace a long set of
  authors in a <prgn>bibtex</prgn> reference using <tt>and
  others</tt>. Thus, if you want to include only the first two authors
  and replace the rest by others, the <prgn>bibtex</prgn> author field
  should be written as
<p>
<example> 
author =    {<var>First Author</var> and <var>Second Author</var> and others},
</example>

</sect>

<sect id="sec_43"><heading>Include bibliographical info in each
    chapter using <prgn>LaTeX</prgn></heading> 

<p>You can include the bibliography after each chapter
  in <prgn>LaTeX</prgn> using the package <prgn>chapterbib</prgn>. You
  can even change the citation style for each chapter. In
  order to do so include at the beginning of the main <tt>tex</tt>
  source file the line

<p>
<example> 
\usepackage{chapterbib}
</example>

<p>
Then at the end of each chapter include

<p>
<example> 
\bibliographystyle{alpha}
\bibliography{<var>texfilename</var>}
</example>
<p>
For each chapter you can change the  bibliography style if
necessary. If you are using <tt>\include{<var>filename</var></tt> do
not forget to run <prgn>bibtex</prgn> to each of the included files
possessing a bibliography entry.
</sect>

<sect id="sec_44"><heading>Comment paragraphs in <prgn>LaTeX</prgn></heading> 

<p>In order to comment one or several paragraphs in
  a <prgn>LaTeX</prgn> source file instead of making use of the %
  character you can use the <tt>verbatim</tt> package including at the
  beginning of your <tt>tex file</tt>

<p>
<example> 
\usepackage{verbatim}
</example>

<p> And then you can simply comment several lines of the file making
  use of <tt>\begin{comment}</tt> and <tt>\end{comment}</tt>

<p>
<example> 
\begin{comment}
<var>Commented fragment ...</var>
\end{comment}
</example>

</sect>

<sect id="sec_45"><heading>Installing appropriately a <prgn>LaTeX</prgn> package or style.</heading> 

<p>
The way to install a <prgn>LaTeX</prgn> package in the right path is
shown. The first step is to look for the place
where the package should be installed. 
<p>
<example>
$ kpsewhich -expand-var "\$TEXMFLOCAL"
/usr/local/share/texmf
</example>

<p>
Unpack the latex package that is going to be installed and copy the
directories (<tt>bibtex/</tt>, <tt>doc/</tt>, <tt>tex/</tt> ...) to
the previous path, <tt>/usr/local/share/texmf</tt> and rehash the database.
<p>
<example>
$ sudo cp -r doc tex source bibtex  /usr/local/share/texmf
$ texhash 
texhash: Updating /usr/local/share/texmf/ls-R... 
texhash: Updating /var/lib/texmf/ls-R-TEXMFMAIN... 
texhash: Updating /var/lib/texmf/ls-R-TEXLIVE... 
texhash: Updating /var/lib/texmf/ls-R... 
texhash: Done.
</example>

The style is now ready and installed.
</sect>
<sect id="sec_46"><heading>Change the selected language
    in <prgn>DebianDoc</prgn> files</heading> 

<p>In order to change the selected language for
  a <prgn>DebianDoc</prgn> <tt>sgml</tt> file the option <tt>-l</tt>
  is employed. This affects the different tags and labels in the
  text.

<p> For example, assuming that the default language in the system is
  English and we want to generate a version in Spanish
  in <tt>ASCII</tt> format of the file <tt>test.sgml</tt> we should employ

<p>
<example> 
debiandoc2text -les_ES test.sgml
</example>

<p>In this case we suppose that the locale <tt>es_ES</tt> is
  available<footnote>You can check the available locales in the file <tt>/etc/locale.gen</tt>.</footnote>.
</sect>

<sect id="sec_47"><heading>Avoid <tt>Page %d may be too complex to print</tt> errors.</heading> 

<p>When preparing pdf files from <prgn>LaTeX</prgn> files sometimes
  the <tt>dvipdf</tt> script takes a very long time to complete the
  pdf file and outputs some errors like in the following example.

<p>
<example> 
$ dvipdf test.dvi 
Page 1 may be too complex to print
Page 3 may be too complex to print
Warning:  no %%Page comments generated.
</example>

<p>Moreover, when the final pdf file is opened with a viewer there is
  a long series of error messages

<p>
<example> 
$ xpdf test.pdf 
Error: Bad bounding box in Type 3 glyph
Error: Bad bounding box in Type 3 glyph
Error: Bad bounding box in Type 3 glyph
Error: Bad bounding box in Type 3 glyph
Error: Bad bounding box in Type 3 glyph
Error: Bad bounding box in Type 3 glyph
</example>


<p> This is due to the inclusion of the
  command <tt>\usepackage[T1]{fontenc}</tt> in the input file. This is
  convenient when writing in Spanish because in this way you have
  access to special characters (as accented letter). 

<p> The solution to the problem consists in making use of
  the <tt>latin-modern</tt> fonts. The heading of the tex file should
  include

<p>
<example> 
\usepackage[T1]{fontenc}
\usepackage{lmodern}
</example>

<p>The <prgn>Debian</prgn> package that includes this fonts should be
  installed and its name is <tt>lmodern.deb</tt>.
</sect>

<!--
<sect id="sec_48"><heading>Some uses of <prgn>pdftk</prgn></heading> 

<p>The program <prgn>pdftk</prgn>, used in  <ref id="sec_41"> to merge
  two pdf files is a complete toolkit to work with pdf files. We give
  hereupon  some possible uses of the command.

<enumlist> 

</enumlist>
</sect>
--> 

<sect id="sec_49"><heading>Diverse <prgn>LaTeX</prgn> lists</heading> 
<p>
<prgn>LaTeX</prgn> distinguishes between three different list
environments: <tt>enumerate</tt>, <tt>itemize</tt>, and <tt>description</tt>. Each environment provides four levels, which implies you
can have nested lists of up to four levels. The description of the three environments is the following. 

<p>
<enumlist>
<item><em>Enumerate</em>

<p> 
The syntax in this case is
<p>
<example>
\begin{enumerate}
\item ...
\end{enumerate}
</example>
<p>
The enumerate environment permits the definition of numbered lists.
If you like to change the appearance of the enumerator, the simplest
way to change is to use the enumerate-package, giving you the
possibility to optionally choose an enumerator.

<p>
<example>
\usepackage{enumerate}
...
\begin{enumerate}[I]<var>%for capital roman numbers.</var>
\item
\end{enumerate}

\begin{enumerate}[(a)]<var>%for small alpha-characters within brackets.</var>
\item
\end{enumerate}
</example>
<item><em>Itemize</em>

<p>
Itemization is probably the mostly used list in <prgn>LaTeX</prgn>. It also
provides four levels.
<p>
<example>\begin{itemize}
\item ...
\end{itemize}
</example>

<p>
The bullets marking each item can be changed for each level using
the following command:
<p>
<example>
\renewcommand{\labelitemi}{$\bullet$}
\renewcommand{\labelitemii}{$\cdot$}
\renewcommand{\labelitemiii}{$\diamond$}
\renewcommand{\labelitemiv}{$\ast$}
</example>

<p>
Amongst the more commonly used symbols are <tt>$\bullet$</tt>, <tt>$\cdot$</tt>, <tt>$\diamond$</tt>, <tt>$-$</tt>, <tt>$\ast$</tt>, and <tt>$\circ$</tt>.

<item><em>Description</em>
<p>
The description list is very handy if you need to explain notations or
terms. Its neither numbered nor bulleted. The user can define the
string marking each item.
 
<p>
<example>
\begin{description}
\item[] ...
\end{description}
</example>

</enumlist>

<p>
In the three environments the space between different items can be controlled with the <tt>\itemsep</tt> command that can only be added just after <tt>begin</tt>
<p>
<example>
\begin{itemize}\itemsep2pt
\item
\end{itemize}
</example>

<sect1 id="ref_latexlists"><heading>References</heading> 
<p>
<enumlist>  
<item><url id="http://texblog.wordpress.com/2008/10/16/lists-enumerate-itemize-description-and-how-to-change-them/"
name="LaTeX Lists Environments">
</enumlist>  
</sect1>
</sect>
<sect id="sec_410"><heading>Use <tt>Unicode</tt> encoding in <prgn>LaTeX</prgn></heading> 

<p>In order to use <tt>utf</tt>  encoding in <prgn>LaTeX</prgn> the
  following line should be added to the tex file

<p>
<example> 
\usepackage[utf8]{inputenc}
</example>

<p> If this option does not work  use <tt>utf8x</tt> instead <tt>utf8</tt>.

</sect>
<sect id="sec_latexcolor"><heading>Use color in <prgn>LaTeX</prgn></heading> 

<p>
Added on November 30th, 2011.

<p>In order to use colors in your in <prgn>LaTeX</prgn> the
  following line should be added to the file preamble

<p>
<example> 
\usepackage{color}
</example>

<p>
The text can be colored in different ways
<p>
<example> 
\textcolor{declared-color}{text}
{black text\color{declared-color} text}
</example>
<p>
where declared-color is a color that was defined before by <tt>\definecolor.</tt>
You can change the background color of the whole page by:
<p>
<example> 
\pagecolor{declared-color} 
</example>
<sect1 id="ref_latexcolor"><heading>References</heading> 
<p>
<enumlist>  
<item><url id="http://en.wikibooks.org/wiki/LaTeX/Colors#Adding_the_color_package"
name="LaTeX Color in LaTeX Wiki Book">
</enumlist>  
</sect1>

</sect>
<sect id="sec_fullpage"><heading>Easy way of defining smaller margins in <prgn>LaTeX</prgn></heading> 
<p>
Added on January 20th, 2012.<p>
Updated on February 1st, 2012

<p>
In order to define a <prgn>LaTeX</prgn> document with smaller
  margins than the default without tampering too much with measures
  and sizes the <tt>fullpage</tt> package can be used adding the your
  document header

<p>
<example> 
\usepackage[<var>options</var>]{fullpage}
</example>
<p>
Possible options for this package are
<enumlist>
<item> <tt>in</tt>: (<em>default</em>) margins set to 1 in.
<item> <tt>cm</tt>:  margins set to 1.5 cm.
<item> <tt>plain</tt>: (<em>default</em>) selects plain page style.
<item> <tt>empty</tt>: neither headers nor footers.
<item> <tt>headings</tt>: both headers and footers.
<item> <tt>myheadings</tt>: both headers and footers.
</enumlist>

<p>
<example> 
\usepackage[cm]{fullpage}
</example>
<p>
With <tt>A4</tt> papersize another possibility is 
<p>
<example> 
\usepackage{a4wide}
</example>
</sect>
<sect id="sec_changefootnsym"><heading>Changing footnote symbols in <prgn>LaTeX</prgn></heading> 
<p>
Added on January 8th, 2016.

<p>The standard footnote symbol in   a <prgn>LaTeX</prgn> text are
  numbers, and sometimes, when combined with equations, can produce
  certain ambiguity. The symbols can be changed to a set of rotating
  nine different symbols adding to the text preamble
  
<p>
<example> 
\renewcommand{\thefootnote}{\fnsymbol{footnote}}
</example>

<p> Another option is to change to alphabetic uppercase labels with
  the command 

<p>
<example> 
\renewcommand{\thefootnote}{\Alph{footnote}}
</example>

</sect>
<sect id="sec_sevfootn"><heading>Using the same footnote mark in <prgn>LaTeX</prgn></heading> 
<p>
Added on February 5th, 2012.

<p>Sometimes in <prgn>LaTeX</prgn> it is necessary to make reference
  to the same footnote several times in a page. The following syntax
  allows for this
<p>
<example> 
Text that has a footnote\footnote{This is the footnote} looks like this. Later text referring to same footnote\footnotemark[\value{footnote}] uses the other command.
</example>

<p>
It is important to take into account that this doesn't work if there are other footnotes between the first reference and any of the other <em>duplicates</em>.
<sect1 id="ref_sevfootn"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://en.wikibooks.org/wiki/LaTeX/Formatting#Footnotes"
name="LaTeX wikibooks">
</enumlist>  
</sect1>
</sect>
<sect id="sec_eurosym"><heading>Using the euro symbol in <prgn>LaTeX</prgn></heading> 
<p>
Added on February 7th, 2012.

<p>The euro currency symbol in <prgn>LaTeX</prgn> is added making use
  of the package <tt>eurosym</tt>, which is part of all the
  major <prgn>GNU/Linux</prgn> distributions. The package has to be
  loaded in the document header
<p>
<example> 
\usepackage{eurosym}
</example>
<p>
Then there are two possible ways of including the euro currency symbol.
<p>
<example> 
The book is 10 \euro.
The book is \euro 10.
The book is \EUR{10}.
\textbf{The book is \EUR{10}.}
\textit{The book is \EUR{10}.}
</example>
<sect id="sec_landscape"><heading>Changing pages to landscape orientation
    in <prgn>LaTeX</prgn> texts</heading> 
<p>
Added on November 16th, 2012.

<p>The occurrence of a large table or figure in <prgn>LaTeX</prgn>
  sometimes hamper the display in the default portrait
  orientation. This can be solved changing one or various pages to
  landscape orientation. 

<p> The <tt>geometry</tt> package allows to change the full document
  to landscape orientation adding to the document header
<p>
<example> 
\usepackage[landscape]{geometry}
</example>

<p>
The <tt>lscape</tt> package allows to change to landscape orientation
a section of the document. To do so add the following line to the
document header
<p>
<example> 
\usepackage{lscape}
</example>

<p>
And whenever it is needed to switch to landscape orientation, e.g. to
include a large table or figure the region affected by the change is
defined as
<p>
<example> 
\begin{landscape}
... table or figure here ...
\end{landscape}
</example>

<p>
This is specially suited for printing. To change also the orientation
in the pdf file and for better screen readibility use the
package <tt>pdflscape</tt> in the header instead of <tt>lscape</tt>
<p>
<example> 
\usepackage{pdflscape}
</example>
<p>
And proceed as before
<p>
<example> 
\begin{landscape}
... table or figure here ...
\end{landscape}
</example>

<sect1 id="ref_landscape"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://texblog.org/2007/11/10/landscape-in-latex"
name="Landscape in LaTeX">
</enumlist>  
</sect1>
</sect>
<sect id="sec_singledouble"><heading>Including single column figures or tables in a double column  <prgn>LaTeX</prgn> document</heading> 
<p>
Added on November 18th, 2012.

<p>Sometimes when writing a two-column document the occurrence of a large table or figure in <prgn>LaTeX</prgn> forces its display in a single-column way. This can be solved for figures and tables using the <tt>-*</tt> variant

<p>
<example> 

  \begin{table*}

  \end{table*}
  \begin{figure*}

  \end{figure*}
</example>

<p>
In this way figures and tables will occupy the full page.
</sect>
<sect id="sec_horizontal"><heading>Controlling horizontal spacing in <prgn>LaTeX</prgn></heading> 
<p>
Added on January 15th, 2016.

<p>The horizontal spacing between words and between words and objects  in <prgn>LaTeX</prgn> is automatically determined. However we may be interested in adding or removing space. This can be done making use of the command
<p>
<example> 
\hspace{length}
</example>

<p>
  Where length can be expressed in <tt>cm</tt>, <tt>px</tt>, etc. If such a space should be kept even if it falls at the end or the start of a line, use the command <tt>\hspace*</tt>.
  
<p>
The command
<p>
<example> 
\stretch{n}
</example>

<p>
  acts differently, generating "elastic" spacing. It extends until all the remaining space on a line is occupied. If two <tt>\hspace{\stretch{n}}</tt> commands are issued on the same line, they grow according to the stretch factor.
<p>
<example> 
X\hspace{\stretch{1}}
X\hspace{\stretch{2}} X

x        x                x
</example>
<p>

<sect1 id="ref_horizspace"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://en.wikibooks.org/wiki/LaTeX/Formatting#Horizontal_Space" name="Horizontal Space LaTeX WikiBooks">
</enumlist>  
</sect1>
</sect>
<sect id="sec_bibinclude"><heading>Including <prgn>BibTeX</prgn> References in the <prgn>TeX</prgn> source file</heading> 
<p>
Added on July 2nd, 2019.

<p>Once you successfully compile your <prgn>LaTeX</prgn> source, including external references with <prgn>bibtex</prgn> from a bibfile you can include the references into the <prgn>LaTeX</prgn> source following two steps.

  <p>
    First, remove the line in your <tt>tex</tt> file defining the bibliography, e.g. <tt>\bibliography{xxx}</tt>, and then insert in the file the contents of the <tt>bbl</tt> file previously generated.  Remove then the existing <tt>aux</tt> file and recompile.



<chapt id="cap_5"><heading>Graphic Edition</heading> 

<sect id="sec_51"><heading>Include greek characters
    in <prgn>inkscape</prgn></heading> 

<p>
Find the unicode number corresponding to the greek character you want
to include. Tables of codes can be found in <url id="http://unicode.org/charts/PDF/U0370.pdf"
name="Unicode Charts">. For example, the unicode for the alpha symbol
    is <tt>03b1</tt>.

<p>
In a text cell type <tt>Ctrl-u</tt>, include the unicode key of the
greek letter and press enter.
</sect>

<sect id="sec_52"><heading>Include greek characters
    in <prgn>Gimp</prgn></heading> 

<p>
Find the unicode number corresponding to the Greek character you want
to include. Tables of codes can be found in <url id="http://unicode.org/charts/PDF/U0370.pdf"
name="Unicode Charts">. For example, the unicode for the alpha symbol
    is <tt>03b1</tt>.

<p>
In a text cell type <tt>Ctrl-Shft-u</tt>, include the unicode key of the
Greek letter and press enter.
</sect>

<sect id="sec_53"><heading>Change the text baseline in <prgn>inkscape</prgn></heading> 

<p>
In order to include sub and super-indexes in  <prgn>inkscape</prgn>
you can change the text base line in a text cell using the keys:

<p>
<tt>Alt-Up</tt> and <tt>Alt-Down</tt>.
</sect>

<sect id="sec_54"><heading>Use <prgn>ImageMagick</prgn> to transform graphic files</heading> 
<p>
Updated on July 06th, 2014; September 22nd, 2016.

<p>You can easily transform a graphic file from the console using the tool <tt>convert</tt> from the <prgn>ImageMagick</prgn> suite. Imagine for example that we start with the file <tt>foto_0.png</tt>.
<p>
<example> 
$ identify foto_0.png 
foto_0.png PNG 1209x1710 1209x1710+0+0 DirectClass 8-bit 2.63038mb 
</example>

<p>
We have made use of the command <tt>identify</tt>, that is also part of
the <prgn>ImageMagick</prgn> suite and describes the format and
characteristics of image files. There are several ways to resize the file. The common syntax is <tt>convert -resize</tt> <var>geometry</var>. From the many possible ways of expressing the geometry change we present three useful options:

<p>
<enumlist>  
<item> <var>scale</var><tt>%</tt>: Height and width scaled by the specified percentage <var>scale</var>.
<item> <var>width</var>: Width fixed to <var>width</var> and height automatically rescaled to conserve aspect ratio.
<item> <tt>x</tt><var>height</var>: Height fixed to <var>height</var> and width automatically rescaled to conserve aspect ratio.
</enumlist>  

<p>
We present examples of the three possibilities<footnote>Note that we added the option <tt>-depth 8</tt> to avoid the image depth to be changed to 16, the default system value.</footnote>:
<p>
<example> 
$ identify foto_0.png 
foto_0.png PNG 1209x1710 1209x1710+0+0 DirectClass 8-bit 2.63038mb 
$ convert -depth 8 -resize 50% foto_0.png foto_1.png
$ identify foto_1.png 
foto_1.png PNG 605x855 605x855+0+0 DirectClass 8-bit 681.391kb 
$ convert -depth 8 -resize 1024 foto_0.png foto_2.png
$ identify foto_2.png 
foto_2.png PNG 1024x1448 1024x1448+0+0 DirectClass 8-bit 1.82886mb 
$ convert -depth 8 -resize x800 foto_0.png foto_3.png
$ identify foto_3.png 
foto_3.png PNG 566x800 566x800+0+0 DirectClass 8-bit 601.271kb 
</example>

<p>
Apart from resizing images we can also transform from an image format to a different one. For example, to convert from encapsulated postscript (eps) to png format:
<p>
<example> 
$ identify bsplot_N40.eps 
bsplot_N40.eps PS 613x661 613x661+0+0 16-bit DirectClass 20.4KB 0.000u 0:00.000
$ convert bsplot_N40.eps bsplot.png
$ identify bsplot.png 
bsplot.png PNG 613x661 613x661+0+0 8-bit PseudoClass 6c 8.64KB 0.000u 0:00.000
</example>

<p>
  Convert can be also used to stack horizontally or vertically several
  images. For example, the command
<p>
<example> 
$ convert Glacial_Map_0.jpg Glacial_Map_1.jpg Glacial_Map_2.jpg +append test.png
</example>
<p>
  will produce a file <file>test.png</file> that includes the three
  figures appended in a row. To append them vertically the option is <tt>-append</tt>.

<sect1 id="ref_convertgraf"><heading>References</heading> 

<p>
<enumlist>  
<item><url id="http://www.linuxjournal.com/article/10531"
name="Linux Journal, issue 185, Sept. 2009">
</enumlist>  
</sect1>

</sect>
<sect id="sec_55"><heading>Enhancing colors and resolution in <prgn>Gimp</prgn></heading> 

<p>
A  <prgn>Gimp</prgn> filter that improves and sharpen lines when
colors are too weak can be found in 

<example> 
Filters -> Enhance -> Unsharp Mask
</example>

</sect>
<sect id="sec_56"><heading>Remove the background of an image
    in <prgn>Gimp</prgn></heading> 

<p>
In order to remove the background of an image using <prgn>Gimp</prgn>
a possible (easy) recipe is the following-,

<enumlist>
<item> Using the <em>lasso</em> tool (also known as <em>Free Select
Tool</em>) make a rough selection around the image that you want to
remove the background from.

<item> Activate the quick mask tool by selecting the little square at the
bottom left side of the main image window. Using this tool the
  selection can be refined.

<item> Using the pencil tool shade the background more precisely
around your image. If you make a mistake you can either
use <tt>Ctrl Z</tt> to undo your last action or change the pencil to white
which will remove the mask.

<item> Toggle the quick mask off, copy the image, and paste as
  new. This will result in a background-free copy of your image.

<item> To refine the final result, add alpha to the selection (from
    the layers tool). Then, from the <tt>Select</tt> menu: (a) invert
    the selection, (b) feather the selection by 1 or 2 pixels,
    (c) <tt>Ctrl + k</tt> to clear, and (d) <tt>Ctrl + Shift + A</tt>
    to unselect. 
<item> Save your image.
</enumlist>
</sect>

<sect id="sec_57"><heading>Take a screenshot using <prgn>Gimp</prgn></heading> 

<p>
In order to take a screenshot of the full display, a window, or part
of a window launch <prgn>Gimp</prgn> and select

<p>
<example> 
File -> Create -> ScreenShot...
</example>

<p> It is convenient to fix a time delay to be able to select the
  right window to grab the region of interest.

</sect>

<sect id="sec_markersink"><heading>Change the color of markers in <prgn>inkscape</prgn></heading> 
<p>
Added on July 06th, 2014.

<p>
In order to change the color of markers (e.g. arrows end and start) in  <prgn>inkscape</prgn> to coincide with the color of the stroke of the object they belong to the following effect should be enabled.


<p>
<tt>Extensions > Modify Path > Color Markers to Match Stroke</tt>

<p>
If 
<sect1 id="ref_markersink"><heading>References</heading> 
<p>
<enumlist>  
<item><url id="http://wiki.inkscape.org/wiki/index.php/Frequently_asked_questions#How_do_I_change_the_color_of_markers_.28e.g._arrow_ends.29.3F"
name="Inkscape FAQ">
</enumlist>  
</sect1>

</sect>
<sect id="sec_gimp_canvas"><heading>Modify the canvas size of a  <prgn>Gimp</prgn> file</heading> 
<p>
Added on November 10th, 2018
<p>
  The <em>canvas</em> is the visible area of the <prgn>Gimp</prgn>  image. By default the  canvas and layers size coincides. The <tt>Canvas Size</tt> command lets you enlarge or reduce the canvas size. You can also modify the size of the layers. You can access this command from the image menubar through <tt>Image -- Canvas Size</tt>.

  <p>
    When you enlarge the canvas, you create free space around the contents of the image. When you reduce it, the visible area is cropped, however the layers still extend beyond the canvas border.

<p>When you reduce the canvas size, the new canvas appears surrounded with a thin negative border in the preview. The mouse pointer is a moving cross: click and drag to move the image against this frame.

</sect>

<sect id="sec_extractpdfimg"><heading>Terminal app to extract images from a  <tt>pdf</tt> file</heading> 
<p>
Added on October 24th, 2017.

<p>
  If you need to extract images from a  <tt>pdf</tt> file a convenient terminal application is <prgn>pdfimages</prgn>. For example if we need to extract the images from a file named <file>article.pdf</file> you can proceed as follows

<p>
  <example>
    $ pdfimages -all article.pdf ./article_images
    $ ls
article.pdf  article_images-003.tif  article_images-006.tif
article_images-000.tif   article_images-004.pbm  article_images-007.tif
article_images-001.tif   article_images-004.png
article_images-002.tif   article_images-005.tif
  </example>
  <p>
    The article contains seven images. The options <tt>-all</tt> indicate that <tt>JPEG</tt>,  <tt>JPEG2000</tt>,  <tt>JBIG2</tt>, and <tt>CCITT</tt> images are extracted in their native
    format while <tt>CMYK</tt> files are written as TIFF files and all  other  images are  written as <tt>PNG</tt> files.
    <sect1 id="ref_extractpdfimg"><heading>References</heading> 
<p>
<enumlist>  
<item><url id="https://www.howtogeek.com/228796/how-to-extract-and-save-images-from-a-pdf-file-in-linux/"
name="Howto Geek 228796">
</enumlist>  
</sect1>

</sect>

<chapt id="cap_6"><heading>Miscelanea</heading> 

<sect id="sec_61"><heading>Compute the average from the results of
    <prgn>Moodle</prgn> test grading</heading> 

<p>The starting point is a set of txt files with the grading obtained
  by students in <prgn>Moodle</prgn>. This set should include all
  students, not only the students that have participated in the test. The format of these files<footnote>The <prgn>Moodle</prgn> output is
  formatted using <tt>UTF-8</tt>, thus it may be necessary to convert, using
  <prgn>emacs</prgn>, to <tt>latin-1</tt> formatting.</footnote> is like the one in the
  following example

<p>
<example> 
XXX XXXXXX XX  29 de January de 2009, 11:27	17 minutos 40 segundos	7 
</example>

<p>
For those students that did not participate in the test, the format is
the following

<p>
<example> 
XXX XXXXXX XX       -       -       - 
</example>

<p>
The name of the files with the results are <var>test_i.txt</var> with
<var>i = 1, 2, 3</var>. The number of files is not limited in
principle. The following perl oneliner extract the
required info, computes the average students' grade, and save the
output in a <tt>CSV</tt> file format

<p>
<example>
perl -e 'while (&lt;&gt;) {
$v{$1}+=$2 if (/^(.*)\b\s+\d+\s+de.*s\s+(\d+).*$/);
$v{$1}+=0 if (/^(.*)\b\s+-\s+-\s+-.*$/);}; 
foreach (sort keys(%v)) { print "$_ ;",$v{$_}/3,"\n"}' \
<var>test_1.txt test_2.txt test_3 .txt</var>  > grades.csv
</example>
</sect>
<sect id="sec_62"><heading>Splitting in two lines a cell content in  <prgn>Openoffice/simpress</prgn></heading> 

<p>
From <prgn>OpenOffice Calc</prgn>'s help pages 

<p>Writing multi-line text:

<p>
<enumlist>
<item> The Ctrl+Enter key combination inserts a manual line
    break. This shortcut only works directly in the cell, not in the
    input line. 
<item> If you want the text to automatically break at the
    right border of the cell, proceed as follows: select all the
    cells where you want the text to break at the right border, and in
  <tt>Format - Cells - Alignment</tt>, mark the <tt>Automatic line
  break</tt> option and click OK.
</enumlist>
</sect>
<sect id="sec_63"><heading>Solving <tt>BADSIG</tt> errors
    in <prgn>UBUNTU (Oneiric Ocelot)</prgn></heading> 

<p>
Added on January 18th, 2012.
<p>
In <prgn>Oneiric Ocelot</prgn>, for reasons unknown to me, errors
concerning the signature key plage the software update process. For
example, the output obtained updating with <tt>apt-get</tt> with this
problem is 


<p>
<example>
$ sudo apt-get update
Ign http://archive.canonical.com oneiric/partner Translation-en_US
Ign http://extras.ubuntu.com oneiric/main Translation-en                                        
Hit http://sunsite.rediris.es oneiric-updates Release                                           
Ign http://archive.canonical.com oneiric/partner Translation-en      
Hit http://sunsite.rediris.es oneiric-backports Release                                          
Hit http://sunsite.rediris.es oneiric-security Release                                           
Ign http://sunsite.rediris.es oneiric-security Release                                           
Hit http://sunsite.rediris.es oneiric/main Sources                                               
Hit http://sunsite.rediris.es oneiric/restricted Sources                  
Hit http://sunsite.rediris.es oneiric/universe Sources
Hit http://sunsite.rediris.es oneiric/multiverse Sources
Hit http://sunsite.rediris.es oneiric/main i386 Packages
Hit http://sunsite.rediris.es oneiric/restricted i386 Packages
Hit http://sunsite.rediris.es oneiric/universe i386 Packages
Hit http://sunsite.rediris.es oneiric/multiverse i386 Packages
Hit http://sunsite.rediris.es oneiric/main TranslationIndex
Hit http://sunsite.rediris.es oneiric/multiverse TranslationIndex
Hit http://sunsite.rediris.es oneiric/restricted TranslationIndex
Hit http://sunsite.rediris.es oneiric/universe TranslationIndex
Hit http://sunsite.rediris.es oneiric-updates/main Sources
Hit http://sunsite.rediris.es oneiric-updates/restricted Sources
Hit http://sunsite.rediris.es oneiric-updates/universe Sources            
Hit http://sunsite.rediris.es oneiric-updates/multiverse Sources          
Hit http://sunsite.rediris.es oneiric-updates/main i386 Packages
Hit http://sunsite.rediris.es oneiric-updates/restricted i386 Packages
Get:2 http://sunsite.rediris.es oneiric-updates/universe i386 Packages [82.3 kB]
99% [2 Packages bzip2 0 B] [Waiting for headers] [Waiting for headers]
bzip2: Data integrity error when decompressing.
        Input file = (stdin), output file = (stdout)

It is possible that the compressed file(s) have become corrupted.
You can use the -tvv option to test integrity of such files.

You can use the `bzip2recover' program to attempt to recover
data from undamaged sections of corrupted files.

Get:3 http://sunsite.rediris.es oneiric-updates/multiverse i386 Packages [4,976 B]
</example>
<p>
In order to fix this error follow the instructions below. <em>Notice
    that this implies moving directories and removing recursively as
    superuser. Be extremely cautious...</em>
<p>
In first place you open an interactive session as superuser and
download the public key from the <prgn>Ubuntu</prgn> key server.
<p>
<example>
$ sudo -i
# apt-key adv --recv-key --keyserver keyserver.ubuntu.com 40976EAF437D05B5
</example>
<p>
Then proceed to make a backup copy of some directories and remove part
of the stored info (remember, do not take the name of root in vain...)
<p>
<example>
# cp -arf /var/lib/dpkg /var/lib/dpkg.backup
# cp /var/lib/dpkg/status-old /var/lib/dpkg/status
# cp /var/lib/dpkg/available-old /var/lib/dpkg/available
# rm -rf /var/lib/dpkg/updates/*
# rm -rf /var/lib/apt/lists
</example>
<p>
Create the <tt>lists/partial</tt> directory, clean the cache and
update again.
<p>
<example>
# mkdir -p /var/lib/apt/lists/partial
# apt-get clean
# apt-get update
</example>
<p>
This should be enough to fix the <tt>BADSIG</tt> problem. Hopefully.
</sect>

<chapt id="cap_Trans"><heading>Translations of this document</heading> 

<p>
The present document has been translated from (not-so-good) English to other languages:

<p>
<enumlist>  
  <item><url id="http://www.webhostinghub.com/support/es/misc/instalacion-de-perl" name="Translation to Spanish of Chapter 3 (Perl Language) by María Ramos.">
  <item><url id="http://www.autoteiledirekt.de/science/certains-mini-howtos-dinteret" name="Translation to Frech of the full document by Kate Bondareva.">
</enumlist> 


</book>
